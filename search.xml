<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[设计模式之禅]]></title>
      <url>/2016/08/02/160802_designpatern_read/</url>
      <content type="html"><![CDATA[<h2 id="【读书笔记】设计模式之禅"><a href="#【读书笔记】设计模式之禅" class="headerlink" title="【读书笔记】设计模式之禅"></a>【读书笔记】设计模式之禅</h2><p><img src="http://ww3.sinaimg.cn/large/610dc034jw1f69c9e22xjj20u011hjuu.jpg" alt="07月25日"></p>
<a id="more"></a>
<h2 id="六大设计原则"><a href="#六大设计原则" class="headerlink" title="六大设计原则"></a>六大设计原则</h2><ul>
<li>单一职责原则</li>
<li>里氏替换原则</li>
<li>依赖导致原则</li>
<li>接口隔离原则</li>
<li>迪米特法则</li>
<li>开闭原则</li>
</ul>
<h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><ul>
<li>接口、类、方法尽可能做一件事情。</li>
<li>单一职责最难划分的就是职责。一个职责一个接口，但是职责没有标准。</li>
<li>对于接口，我们在设计的时候一定要做到单一</li>
<li>类的话，具体情况具体看</li>
</ul>
<blockquote>
<p>我的建议是接口一定要做到单一职责，类的设计尽量做到只有一个原因引起变化</p>
</blockquote>
<ul>
<li>单一职责原则的好处<ol>
<li>类的复杂性降低，实现什么职责都有清晰明确的定义</li>
<li>可读性提高，复杂性降低，那当然可读性提高了</li>
<li>可维护性提高，可读性提高，那当然更容易维护了</li>
<li>变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修<br>改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有非常大<br>的帮助</li>
</ol>
</li>
</ul>
<h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><ul>
<li>在面向对象的语言中，<strong>继承</strong>不可或缺的，优秀的语言机制</li>
</ul>
<blockquote>
<p>优点如下：</p>
</blockquote>
<ol>
<li>代码共享，减少创建类的工作量，每个子类都拥有父类的方法和属性</li>
<li>提高代码的重用性</li>
<li>子类可以形似父类，但又异于父类，“龙生龙，凤生凤，老鼠生来会打洞”是说子拥有父的“种”，“世界上没有两片完全相同的叶子”是指明子与父的不同</li>
<li>提高代码的可扩展性，实现父类的方法就可以“为所欲为”了，君不见很多开源框架的扩展接口都是通过继承父类来完成的</li>
<li>提高产品或项目的开放性</li>
</ol>
<blockquote>
<p>缺点如下：</p>
</blockquote>
<ol>
<li>继承是侵入性的。<ul>
<li>只要继承，就必须拥有父类的所有属性和方法</li>
</ul>
</li>
<li>降低代码的灵活性。<ul>
<li>子类必须拥有父类的属性和方法，让子类自由的世界中多了些约束；</li>
</ul>
</li>
<li>增强了耦合性<ul>
<li>当父类的常量、变量和方法被修改时，需要考虑子类的修改，而且在缺乏规范的环境下，这种修改可能会导致大量代码需要重构</li>
</ul>
</li>
</ol>
<h4 id="什么是里氏替换原则"><a href="#什么是里氏替换原则" class="headerlink" title="什么是里氏替换原则"></a>什么是里氏替换原则</h4><ul>
<li>第一种定义：<ul>
<li>如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型S是类型T的子类型 </li>
</ul>
</li>
<li>第二种定义 <ul>
<li>所有引用基类的地方必须能透明地使用其子类的<br>对象</li>
</ul>
</li>
</ul>
<blockquote>
<p>第二个定义是最清晰明确的，通俗点讲，只要父类能出现的地方子类就可以出现，而且替换为子类也不会产生任何错误或异常，使用者可能根本就不需要知道是父类还是子类。但是，反过来就不行了，有子类出现的地方，父类未必就能适应<br>父类有的子类有，子类有的父类不一定有</p>
</blockquote>
<ol>
<li>子类必须完全实现父类的方法</li>
<li>子类可以有自己的个性</li>
<li>覆盖或实现父类的方法时输入参数可以被放大</li>
<li>覆写或实现父类的方法时输出结果可以被缩小</li>
</ol>
<blockquote>
<p>在类中调用其他类时务必要使用父类或接口，如果不能使用父类或接口，则说明类的设计已经违背了LSP原则。</p>
</blockquote>
<h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><h3 id="依赖倒置原则的定义"><a href="#依赖倒置原则的定义" class="headerlink" title="依赖倒置原则的定义"></a>依赖倒置原则的定义</h3><ul>
<li>高层模块不应该依赖低层模块，两者都应该依赖其抽象；</li>
<li>抽象不应该依赖细节；</li>
<li>细节应该依赖抽象。</li>
</ul>
<h3 id="依赖倒置原则在Java语言中的表现就是："><a href="#依赖倒置原则在Java语言中的表现就是：" class="headerlink" title="依赖倒置原则在Java语言中的表现就是："></a>依赖倒置原则在Java语言中的表现就是：</h3><ul>
<li>模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的</li>
<li>接口或抽象类不依赖于实现类；</li>
<li>实现类依赖接口或抽象类</li>
</ul>
<blockquote>
<p>更加精简的定义就是“面向接口编程”——OOD（Object-Oriented Design，面向对象设计）的精髓之一。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ArrayList源码阅读]]></title>
      <url>/2016/08/01/160801_sc_arraylist/</url>
      <content type="html"><![CDATA[<h2 id="ArrayList源码阅读【JDK8】"><a href="#ArrayList源码阅读【JDK8】" class="headerlink" title="ArrayList源码阅读【JDK8】"></a>ArrayList源码阅读【JDK8】</h2><p><img src="http://ww2.sinaimg.cn/large/610dc034jw1f65f0oqodoj20qo0hntc9.jpg" alt="07月25日"></p>
<a id="more"></a>
<h3 id="arrayList的类图"><a href="#arrayList的类图" class="headerlink" title="arrayList的类图"></a>arrayList的类图</h3><p><img src="http://7xjlkb.com1.z0.glb.clouddn.com/sourcecode_jdk8_arraylist.png" alt="image"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RSA加密签名]]></title>
      <url>/2016/07/25/160725_rsa_algorithm/</url>
      <content type="html"><![CDATA[<h2 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h2><p><img src="http://ww2.sinaimg.cn/large/c85e4a5cgw1f62hzfvzwwj20hs0qogpo.jpg" alt="就问你美不美"></p>
<a id="more"></a>
<h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><ul>
<li>(1) 甲方选择某一种加密规则，对信息进行加密；　　</li>
<li>(2) 乙方使用同一种规则，对信息进行解密。 </li>
<li>(3) 加密和解秘使用同一种规则，对信息进行解谜</li>
</ul>
<blockquote>
<p>这种加密模式有一个最大弱点：甲方必须把加密规则告诉乙方，否则无法解密。保存和传递密钥，就成了最头疼的问题。    </p>
</blockquote>
<h3 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h3><ul>
<li>(1)乙方生成两把密钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。</li>
<li>(2) 甲方获取乙方的公钥，然后用它对信息加密。</li>
<li>(3) 乙方得到加密后的信息，用私钥解密。</li>
</ul>
<blockquote>
<p>如果公钥加密的信息只有私钥解得开，那么只要私钥不泄漏，通信就是安全的。</p>
</blockquote>
<ul>
<li>三位数学家Rivest、Shamir 和 Adleman 设计了一种算法，这种算法用他门三个人的名字命名，叫做RSA算法。</li>
</ul>
<h3 id="你需要知道的数论知识"><a href="#你需要知道的数论知识" class="headerlink" title="你需要知道的数论知识"></a>你需要知道的数论知识</h3><ul>
<li>(1) 互质关系<ul>
<li>如果两个正整数，除了1以外，没有其他公因子，我们就称这两个数是互质关系（coprime）。</li>
</ul>
</li>
<li>(2) 欧拉函数</li>
<li>(3) 欧拉定理<ul>
<li>如果两个正整数a和n互质，则n的欧拉函数 φ(n)可以让下面的等式成立：</li>
<li><img src="http://chart.googleapis.com/chart?cht=tx&amp;chl=a%5E%7B%5Cphi(n" alt="image">%7D%5Cequiv%5C1%20(mod%5C%20n)&amp;chs=60)</li>
</ul>
</li>
<li>模反元素<ul>
<li>如果两个正整数a和n互质，那么一定可以找到整数b，使得 ab-1被n整除，或者说ab被n除的余数是1。</li>
<li><img src="http://chart.googleapis.com/chart?cht=tx&amp;chl=ab%20%5Cequiv%201%5C%20(mod%5C%20n" alt="image">&amp;chs=40)</li>
<li>这时，b就叫做a的”模反元素”。</li>
</ul>
</li>
</ul>
<h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><ul>
<li>任意给定正整数<code>n</code>，请问在小于等于<code>n</code>的正整数之中，有多少个数与<code>n</code>构成互质关系，计算这个值的方法叫做<code>欧拉函数</code></li>
<li>以<code>φ(n)</code>表示。<ul>
<li>在1到8之中，与8形成互质关系的是1、3、5、7，所以 <code>φ(8) = 4</code>。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><code>第一种情况:如果是1</code><ul>
<li>如果<code>n=1</code>，则 <code>φ(1) = 1</code> 。因为1与任何数（包括自身）都构成互质关系。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><code>第二种情况：如果是质数</code><ul>
<li>如果<code>n</code>是质数，则 <code>φ(n)=n-1</code>。</li>
<li>因为质数与小于它的每一个数，都构成互质关系。比如<code>5</code>与<code>1</code>、<code>2</code>、<code>3</code>、<code>4</code>都构成互质关系。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><code>第三种情况:如果是质数的某一个次方</code><ul>
<li>如果<code>n</code>是质数的某一个次方，即 <code>n = p^k</code>（<code>p</code>为质数，<code>k</code>为大于等于1的整数），则</li>
<li><img src="http://chart.googleapis.com/chart?cht=tx&amp;chl=%5Cphi(p%5E%7Bk%7D" alt="image">%3Dp%5E%7Bk%7D-p%5E%7Bk-1%7D&amp;chs=40)</li>
<li>比如 φ(8) = φ(2^3) =2^3 - 2^2 = 8 -4 = 4。</li>
<li>这是因为只有当一个数不包含质数<code>p</code>，才可能与n互质。而包含质数<code>p</code>的数一共有<code>p^(k-1)</code>个，即1×p、2×p、3×p、…、p^(k-1)×p，把它们去除，剩下的就是与<code>n</code>互质的数。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p><code>第四种情况：如果n可以分解成两个互质的整数之积</code></p>
<ul>
<li><p>如果n可以分解成两个互质的整数之积</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　n = p1 × p2</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>+ 则

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　φ(n) = φ(p1p2) = φ(p1)φ(p2)</div></pre></td></tr></table></figure>

+ 积的欧拉函数等于各个因子的欧拉函数之积。比如，φ(56)=φ(8×7)=φ(8)×φ(7)=4×6=24。
</code></pre><h3 id="模反元素"><a href="#模反元素" class="headerlink" title="模反元素"></a>模反元素</h3><ul>
<li>如果两个正整数a和n互质，那么一定可以找到整数b，使得 ab-1 被n整除，或者说ab被n除的余数是1，也就是<code>ab / n = 1</code></li>
<li><img src="http://chart.googleapis.com/chart?cht=tx&amp;chl=ab%20%5Cequiv%201%5C%20(mod%5C%20n" alt="image">&amp;chs=40)</li>
<li>欧拉定理可以用来证明模反元素必然存在。</li>
<li><img src="http://chart.googleapis.com/chart?cht=tx&amp;chl=a%5E%7B%5Cphi(n" alt="image">%7D%3Da%5Ctimes%20a%5E%7B%5Cphi(n)-1%7D%5Cequiv%5C%201%5C%20(mod%5C%20n)%20&amp;chs=40)</li>
<li>可以看到，a的 φ(n)-1 次方，就是a的模反元素。</li>
<li>比如，3和11互质，那么3的模反元素就是4，因为 (3 × 4)-1 可以被11整除。显然，模反元素不止一个， 4加减11的整数倍都是3的模反元素 {…,-18,-7,4,15,26,…}，即如果b是a的模反元素，则 b+kn 都是a的模反元素。</li>
<li>欧拉定理可以用来证明模反元素必然存在。</li>
</ul>
<h3 id="RSA数学原理"><a href="#RSA数学原理" class="headerlink" title="RSA数学原理"></a>RSA数学原理</h3><ul>
<li>RSA加密 密文 = 明文e次方 Mod (就是%取余的意思) N 公钥 （e,N）  </li>
<li>RSA解密 明文 = 密文d次方 Mod (就是%取余的意思) N 私钥 （d,N） </li>
</ul>
<h3 id="jDK实现"><a href="#jDK实现" class="headerlink" title="jDK实现"></a>jDK实现</h3><table>
<thead>
<tr>
<th>算法</th>
<th>密钥长度</th>
<th>默认密钥长度</th>
<th>工作模式</th>
<th>填充方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>RSA</td>
<td>512~65536 <br>(<code>必须64的倍数</code>)</td>
<td>1024</td>
<td>ECB</td>
<td>NoPadding(常用)、<br>PKCS1Padding(常用)、<br>OAEPWITHMD5AndMGF1Padding</td>
</tr>
</tbody>
</table>
<ul>
<li><code>公钥加密私钥解密</code>–主要用来加密</li>
<li><code>私钥加密公钥解密</code>–主要用来数字签名</li>
</ul>
<h2 id="密钥生成步骤"><a href="#密钥生成步骤" class="headerlink" title="密钥生成步骤"></a>密钥生成步骤</h2><p><img src="http://image.beekka.com/blog/201307/bg2013070302.png" alt="image"></p>
<blockquote>
<p><strong>第一步，随机选择两个不相等的质数p和q。</strong></p>
</blockquote>
<ul>
<li>爱丽丝选择了61和53。（实际应用中，这两个质数越大，就越难破解。）</li>
</ul>
<hr>
<blockquote>
<p>第二步，计算p和q的乘积n。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">n = 61×53 = 3233</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>第三步，计算n的欧拉函数φ(n)。</p>
</blockquote>
<ul>
<li>根据公式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　φ(n) = (p-1)(q-1)</div></pre></td></tr></table></figure>
<ul>
<li>爱丽丝算出φ(3233)等于60×52，即3120。</li>
</ul>
<hr>
<blockquote>
<p>第四步，随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质。</p>
</blockquote>
<ul>
<li>爱丽丝就在1到3120之间，随机选择了17。（实际应用中，常常选择65537。）</li>
</ul>
<hr>
<blockquote>
<p>第五步，计算e对于φ(n)的模反元素d。</p>
</blockquote>
<ul>
<li>所谓”模反元素”就是指有一个整数d，可以使得ed被φ(n)除的余数为1。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ed ≡ 1 (mod φ(n))</div></pre></td></tr></table></figure>
<ul>
<li>这个式子等价于</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　ed - 1 = kφ(n)</div></pre></td></tr></table></figure>
<ul>
<li>于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　ex + φ(n)y = 1</div></pre></td></tr></table></figure>
<ul>
<li>已知 e=17, φ(n)=3120</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">17x + 3120y = 1</div></pre></td></tr></table></figure>
<ul>
<li>这个方程可以用”扩展欧几里得算法”求解，此处省略具体过程。总之，爱丽丝算出一组整数解为 (x,y)=(2753,-15)，即 d=2753。</li>
</ul>
<hr>
<blockquote>
<p>第六步，将n和e封装成公钥，n和d封装成私钥。</p>
</blockquote>
<ul>
<li>在爱丽丝的例子中，n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）。<br>实际应用中，公钥和私钥的数据都采用ASN.1格式表达（实例）。</li>
</ul>
<hr>
<blockquote>
<p>七、RSA算法的可靠性</p>
</blockquote>
<ul>
<li>回顾上面的密钥生成步骤，一共出现六个数字：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">p</div><div class="line">q</div><div class="line">n</div><div class="line">φ(n)</div><div class="line">e</div><div class="line">d</div></pre></td></tr></table></figure>
<ul>
<li>这六个数字之中，公钥用到了两个（n和e），其余四个数字都是不公开的。其中最关键的是d，因为n和d组成了私钥，一旦d泄漏，就等于私钥泄漏。</li>
</ul>
<blockquote>
<p>八、加密和解密</p>
</blockquote>
<ul>
<li><p>（1）加密要用公钥 (n,e)</p>
<ul>
<li>假设鲍勃要向爱丽丝发送加密信息m，他就要用爱丽丝的公钥 (n,e) 对m进行加密。这里需要注意，m必须是整数（字符串可以取ascii值或unicode值），且m必须小于n。</li>
<li><p>所谓”加密”，就是算出下式的c： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　me ≡ c (mod n)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>+ 爱丽丝的公钥是 (3233, 17)，鲍勃的m假设是65，那么可以算出下面的等式：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">6517 ≡ 2790 (mod 3233)</div></pre></td></tr></table></figure>


+ 于是，c等于2790，鲍勃就把2790发给了爱丽丝。
</code></pre><ul>
<li><p>（2）解密要用私钥(n,d)</p>
<ul>
<li><p>爱丽丝拿到鲍勃发来的2790以后，就用自己的私钥(3233, 2753) 进行解密。可以证明，下面的等式一定成立：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　cd ≡ m (mod n)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>+ 也就是说，c的d次方除以n的余数为m。现在，c等于2790，私钥是(3233, 2753)，那么，爱丽丝算出

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">27902753 ≡ 65 (mod 3233)</div></pre></td></tr></table></figure>

+ 因此，爱丽丝知道了鲍勃加密前的原文就是65。
</code></pre><hr>
<blockquote>
<p>九、私钥解密的证明</p>
</blockquote>
<ul>
<li><p>最后，我们来证明，为什么用私钥解密，一定可以正确地得到m。也就是证明下面这个式子：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　cd ≡ m (mod n)</div></pre></td></tr></table></figure>
<ul>
<li><p>因为，根据加密规则
　</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　ｍe ≡ c (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>于是，c可以写成下面的形式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　c = me - kn</div></pre></td></tr></table></figure>
</li>
<li><p>将c代入要我们要证明的那个解密规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(me - kn)d ≡ m (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>它等同于求证</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">med ≡ m (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>由于</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ed ≡ 1 (mod φ(n))</div></pre></td></tr></table></figure>
</li>
<li><p>所以</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ed = hφ(n)+1</div></pre></td></tr></table></figure>
</li>
<li><p>将ed代入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mhφ(n)+1 ≡ m (mod n)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>接下来，分成两种情况证明上面这个式子。</p>
</li>
<li><p>（1）m与n互质。</p>
<ul>
<li><p>根据欧拉定理，此时</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　 mφ(n) ≡ 1 (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>得到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(mφ(n))h × m ≡ m (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>原式得到证明。</p>
</li>
</ul>
</li>
<li><p>（2）m与n不是互质关系。<br>此时，由于n等于质数p和q的乘积，所以m必然等于kp或kq。<br>以 m = kp为例，考虑到这时k与q必然互质，则根据欧拉定理，下面的式子成立：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(kp)q-1 ≡ 1 (mod q)</div></pre></td></tr></table></figure>
<ul>
<li><p>进一步得到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　[(kp)q-1]h(p-1) × kp ≡ kp (mod q)</div></pre></td></tr></table></figure>
</li>
<li><p>即</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　(kp)ed ≡ kp (mod q)</div></pre></td></tr></table></figure>
</li>
<li><p>将它改写成下面的等式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　(kp)ed = tq + kp</div></pre></td></tr></table></figure>
</li>
<li><p>这时t必然能被p整除，即 t=t’p</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　(kp)ed = t&apos;pq + kp</div></pre></td></tr></table></figure>
</li>
<li><p>因为 m=kp，n=pq，所以</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　med ≡ m (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>原式得到证明。</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">package rsa;</div><div class="line"></div><div class="line">/*</div><div class="line">* --------------------------------------------**********--------------------------------------------</div><div class="line">*</div><div class="line">* 该算法于1977年由美国麻省理工学院MIT(Massachusetts Institute of Technology)的Ronal Rivest，Adi Shamir和Len Adleman三位年轻教授提出，并以三人的姓氏Rivest，Shamir和Adlernan命名为RSA算法，是一个支持变长密钥的公共密钥算法，需要加密的文件快的长度也是可变的!</div><div class="line">*</div><div class="line"> *所谓RSA加密算法，是世界上第一个非对称加密算法，也是数论的第一个实际应用。它的算法如下：</div><div class="line">*</div><div class="line"> 1.找两个非常大的质数p和q（通常p和q都有155十进制位或都有512十进制位）并计算n=pq，k=(p-1)(q-1)。</div><div class="line"></div><div class="line"> 2.将明文编码成整数M，保证M不小于0但是小于n。</div><div class="line"></div><div class="line"> 3.任取一个整数e，保证e和k互质，而且e不小于0但是小于k。加密钥匙（称作公钥）是(e, n)。 【exponent】</div><div class="line"></div><div class="line"> 4.找到一个整数d，使得ed除以k的余数是1（只要e和n满足上面条件，d肯定存在）。解密钥匙（称作密钥）是(d, n)。</div><div class="line"></div><div class="line"> 加密过程： 加密后的编码C等于M的e次方除以n所得的余数。</div><div class="line"></div><div class="line"> 解密过程： 解密后的编码N等于C的d次方除以n所得的余数。</div><div class="line"></div><div class="line"> 只要e、d和n满足上面给定的条件。M等于N。</div><div class="line"></div><div class="line"></div><div class="line"> --------------------------------------------**********--------------------------------------------</div><div class="line"> */</div><div class="line"></div><div class="line">import javax.crypto.BadPaddingException;</div><div class="line">import javax.crypto.Cipher;</div><div class="line">import javax.crypto.IllegalBlockSizeException;</div><div class="line">import javax.crypto.NoSuchPaddingException;</div><div class="line">import java.math.BigInteger;</div><div class="line">import java.security.*;</div><div class="line">import java.security.interfaces.RSAPrivateKey;</div><div class="line">import java.security.interfaces.RSAPublicKey;</div><div class="line">import java.security.spec.InvalidKeySpecException;</div><div class="line">import java.security.spec.RSAPrivateKeySpec;</div><div class="line">import java.security.spec.RSAPublicKeySpec;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.Map;</div><div class="line">http://my.oschina.net/ousinka/blog/338099</div><div class="line"></div><div class="line">## 加密算法</div><div class="line">    </div><div class="line">### 对称加密算法</div><div class="line">+ (1) 甲方选择某一种加密规则，对信息进行加密；　　</div><div class="line">+ (2) 乙方使用同一种规则，对信息进行解密。 </div><div class="line">+ (3) 加密和解秘使用同一种规则，对信息进行解谜</div><div class="line"></div><div class="line">&gt; 这种加密模式有一个最大弱点：甲方必须把加密规则告诉乙方，否则无法解密。保存和传递密钥，就成了最头疼的问题。    </div><div class="line"></div><div class="line">### 非对称加密算法</div><div class="line"></div><div class="line">+ (1)乙方生成两把密钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。</div><div class="line">+ (2) 甲方获取乙方的公钥，然后用它对信息加密。</div><div class="line">+ (3) 乙方得到加密后的信息，用私钥解密。</div><div class="line"> </div><div class="line">&gt; 如果公钥加密的信息只有私钥解得开，那么只要私钥不泄漏，通信就是安全的。</div><div class="line"></div><div class="line">+ 三位数学家Rivest、Shamir 和 Adleman 设计了一种算法，这种算法用他门三个人的名字命名，叫做RSA算法。</div><div class="line"></div><div class="line">### 你需要知道的数论知识</div><div class="line"></div><div class="line">+ (1) 互质关系</div><div class="line">    + 如果两个正整数，除了1以外，没有其他公因子，我们就称这两个数是互质关系（coprime）。</div><div class="line">+ (2) 欧拉函数</div><div class="line">+ (3) 欧拉定理</div><div class="line">    + 如果两个正整数a和n互质，则n的欧拉函数 φ(n)可以让下面的等式成立：</div><div class="line">    + ![image](http://chart.googleapis.com/chart?cht=tx&amp;chl=a%5E%7B%5Cphi(n)%7D%5Cequiv%5C1%20(mod%5C%20n)&amp;chs=60)</div><div class="line">+ 模反元素</div><div class="line">    + 如果两个正整数a和n互质，那么一定可以找到整数b，使得 ab-1被n整除，或者说ab被n除的余数是1。</div><div class="line">    + ![image](http://chart.googleapis.com/chart?cht=tx&amp;chl=ab%20%5Cequiv%201%5C%20(mod%5C%20n)&amp;chs=40)</div><div class="line">    + 这时，b就叫做a的&quot;模反元素&quot;。</div><div class="line"></div><div class="line">### 欧拉函数</div><div class="line"></div><div class="line">+ 任意给定正整数`n`，请问在小于等于`n`的正整数之中，有多少个数与`n`构成互质关系，计算这个值的方法叫做`欧拉函数`</div><div class="line">+ 以`φ(n)`表示。</div><div class="line">    + 在1到8之中，与8形成互质关系的是1、3、5、7，所以 `φ(8) = 4`。</div><div class="line"></div><div class="line">------------------------------------------------------------------------</div><div class="line"></div><div class="line">+ `第一种情况:如果是1`</div><div class="line">    +  如果`n=1`，则 `φ(1) = 1` 。因为1与任何数（包括自身）都构成互质关系。</div><div class="line"></div><div class="line">------------------------------------------------------------------------</div><div class="line"></div><div class="line">+ `第二种情况：如果是质数`</div><div class="line">    +  如果`n`是质数，则 `φ(n)=n-1`。</div><div class="line">    +  因为质数与小于它的每一个数，都构成互质关系。比如`5`与`1`、`2`、`3`、`4`都构成互质关系。</div><div class="line"></div><div class="line">------------------------------------------------------------------------</div><div class="line"></div><div class="line">+ `第三种情况:如果是质数的某一个次方`</div><div class="line">    +  如果`n`是质数的某一个次方，即 `n = p^k`（`p`为质数，`k`为大于等于1的整数），则</div><div class="line">    +  ![image](http://chart.googleapis.com/chart?cht=tx&amp;chl=%5Cphi(p%5E%7Bk%7D)%3Dp%5E%7Bk%7D-p%5E%7Bk-1%7D&amp;chs=40)</div><div class="line">    +  比如 φ(8) = φ(2^3) =2^3 - 2^2 = 8 -4 = 4。</div><div class="line">    +  这是因为只有当一个数不包含质数`p`，才可能与n互质。而包含质数`p`的数一共有`p^(k-1)`个，即1×p、2×p、3×p、...、p^(k-1)×p，把它们去除，剩下的就是与`n`互质的数。</div><div class="line"></div><div class="line">------------------------------------------------------------------------</div><div class="line"></div><div class="line">+ `第四种情况：如果n可以分解成两个互质的整数之积`</div><div class="line">    </div><div class="line">    + 如果n可以分解成两个互质的整数之积</div></pre></td></tr></table></figure>
<pre><code>　　n = p1 × p2
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ 则</div></pre></td></tr></table></figure>

　φ(n) = φ(p1p2) = φ(p1)φ(p2)

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">    + 积的欧拉函数等于各个因子的欧拉函数之积。比如，φ(56)=φ(8×7)=φ(8)×φ(7)=4×6=24。</div><div class="line">    </div><div class="line">### 模反元素</div><div class="line"></div><div class="line">+ 如果两个正整数a和n互质，那么一定可以找到整数b，使得 ab-1 被n整除，或者说ab被n除的余数是1，也就是` ab / n = 1`</div><div class="line">+ ![image](http://chart.googleapis.com/chart?cht=tx&amp;chl=ab%20%5Cequiv%201%5C%20(mod%5C%20n)&amp;chs=40)</div><div class="line">+ 欧拉定理可以用来证明模反元素必然存在。</div><div class="line">+ ![image](http://chart.googleapis.com/chart?cht=tx&amp;chl=a%5E%7B%5Cphi(n)%7D%3Da%5Ctimes%20a%5E%7B%5Cphi(n)-1%7D%5Cequiv%5C%201%5C%20(mod%5C%20n)%20&amp;chs=40)</div><div class="line">+ 可以看到，a的 φ(n)-1 次方，就是a的模反元素。</div><div class="line">+ 比如，3和11互质，那么3的模反元素就是4，因为 (3 × 4)-1 可以被11整除。显然，模反元素不止一个， 4加减11的整数倍都是3的模反元素 &#123;...,-18,-7,4,15,26,...&#125;，即如果b是a的模反元素，则 b+kn 都是a的模反元素。</div><div class="line">+ 欧拉定理可以用来证明模反元素必然存在。</div><div class="line"></div><div class="line">### RSA数学原理</div><div class="line"></div><div class="line">+ RSA加密 密文 = 明文e次方 Mod (就是%取余的意思) N 公钥 （e,N）  </div><div class="line">+ RSA解密 明文 = 密文d次方 Mod (就是%取余的意思) N 私钥 （d,N） </div><div class="line"></div><div class="line"></div><div class="line">### jDK实现</div><div class="line"></div><div class="line">|算法|密钥长度|默认密钥长度|工作模式|填充方式|</div><div class="line">|----|----|----|----|----|</div><div class="line">|RSA|512~65536 &lt;/br&gt;(`必须64的倍数`)|1024|ECB|NoPadding(常用)、&lt;/br&gt;PKCS1Padding(常用)、&lt;/br&gt;OAEPWITHMD5AndMGF1Padding|</div><div class="line"></div><div class="line">+ `公钥加密私钥解密`--主要用来加密</div><div class="line">+ `私钥加密公钥解密`--主要用来数字签名</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">## 密钥生成步骤</div><div class="line"></div><div class="line">![image](http://image.beekka.com/blog/201307/bg2013070302.png)</div><div class="line"></div><div class="line">&gt; **第一步，随机选择两个不相等的质数p和q。**</div><div class="line"></div><div class="line">+ 爱丽丝选择了61和53。（实际应用中，这两个质数越大，就越难破解。）</div><div class="line"></div><div class="line">----</div><div class="line"></div><div class="line">&gt; 第二步，计算p和q的乘积n。</div></pre></td></tr></table></figure>

    n = 61×53 = 3233
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">-----</div><div class="line"> </div><div class="line">&gt; 第三步，计算n的欧拉函数φ(n)。</div><div class="line">    </div><div class="line">+ 根据公式</div></pre></td></tr></table></figure>
<p>　φ(n) = (p-1)(q-1)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ 爱丽丝算出φ(3233)等于60×52，即3120。</div><div class="line"></div><div class="line">----</div><div class="line"></div><div class="line">&gt; 第四步，随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质。</div><div class="line"></div><div class="line">+ 爱丽丝就在1到3120之间，随机选择了17。（实际应用中，常常选择65537。）</div><div class="line"></div><div class="line">----</div><div class="line"></div><div class="line">&gt; 第五步，计算e对于φ(n)的模反元素d。</div><div class="line"></div><div class="line">+ 所谓&quot;模反元素&quot;就是指有一个整数d，可以使得ed被φ(n)除的余数为1。</div></pre></td></tr></table></figure>
<p>ed ≡ 1 (mod φ(n))</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ 这个式子等价于</div></pre></td></tr></table></figure>
<p>　ed - 1 = kφ(n)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ 于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。</div></pre></td></tr></table></figure>
<p>　ex + φ(n)y = 1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ 已知 e=17, φ(n)=3120</div></pre></td></tr></table></figure>
<p>17x + 3120y = 1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ 这个方程可以用&quot;扩展欧几里得算法&quot;求解，此处省略具体过程。总之，爱丽丝算出一组整数解为 (x,y)=(2753,-15)，即 d=2753。</div><div class="line"></div><div class="line">----</div><div class="line"></div><div class="line">&gt; 第六步，将n和e封装成公钥，n和d封装成私钥。</div><div class="line"></div><div class="line">+ 在爱丽丝的例子中，n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）。</div><div class="line">实际应用中，公钥和私钥的数据都采用ASN.1格式表达（实例）。</div><div class="line"></div><div class="line">----</div><div class="line"></div><div class="line">&gt; 七、RSA算法的可靠性</div><div class="line"></div><div class="line">+ 回顾上面的密钥生成步骤，一共出现六个数字：</div></pre></td></tr></table></figure>
<p>p<br>q<br>n<br>φ(n)<br>e<br>d</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ 这六个数字之中，公钥用到了两个（n和e），其余四个数字都是不公开的。其中最关键的是d，因为n和d组成了私钥，一旦d泄漏，就等于私钥泄漏。</div><div class="line"></div><div class="line">&gt; 八、加密和解密</div><div class="line"></div><div class="line">+ （1）加密要用公钥 (n,e)</div><div class="line">    + 假设鲍勃要向爱丽丝发送加密信息m，他就要用爱丽丝的公钥 (n,e) 对m进行加密。这里需要注意，m必须是整数（字符串可以取ascii值或unicode值），且m必须小于n。</div><div class="line">    + 所谓&quot;加密&quot;，就是算出下式的c：</div></pre></td></tr></table></figure>
<pre><code>　　me ≡ c (mod n)

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ 爱丽丝的公钥是 (3233, 17)，鲍勃的m假设是65，那么可以算出下面的等式：</div></pre></td></tr></table></figure>

6517 ≡ 2790 (mod 3233)

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">    + 于是，c等于2790，鲍勃就把2790发给了爱丽丝。</div><div class="line"></div><div class="line">+ （2）解密要用私钥(n,d)</div><div class="line">    + 爱丽丝拿到鲍勃发来的2790以后，就用自己的私钥(3233, 2753) 进行解密。可以证明，下面的等式一定成立：</div></pre></td></tr></table></figure>

　cd ≡ m (mod n)

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ 也就是说，c的d次方除以n的余数为m。现在，c等于2790，私钥是(3233, 2753)，那么，爱丽丝算出</div></pre></td></tr></table></figure>

27902753 ≡ 65 (mod 3233)

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    + 因此，爱丽丝知道了鲍勃加密前的原文就是65。</div><div class="line"></div><div class="line">----</div><div class="line"></div><div class="line">&gt; 九、私钥解密的证明</div><div class="line"></div><div class="line">+ 最后，我们来证明，为什么用私钥解密，一定可以正确地得到m。也就是证明下面这个式子：</div></pre></td></tr></table></figure>

　　cd ≡ m (mod n)
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ 因为，根据加密规则</div></pre></td></tr></table></figure>

　　ｍe ≡ c (mod n)
　　
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ 于是，c可以写成下面的形式：</div></pre></td></tr></table></figure>

　　c = me - kn
　　
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ 将c代入要我们要证明的那个解密规则：</div></pre></td></tr></table></figure>

    (me - kn)d ≡ m (mod n)

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ 它等同于求证</div><div class="line"></div><div class="line">```　</div><div class="line">med ≡ m (mod n)</div></pre></td></tr></table></figure>

+ 由于

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ed ≡ 1 (mod φ(n))</div></pre></td></tr></table></figure>

+ 所以

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ed = hφ(n)+1</div></pre></td></tr></table></figure>

+ 将ed代入：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mhφ(n)+1 ≡ m (mod n)</div></pre></td></tr></table></figure>
</code></pre><ul>
<li>接下来，分成两种情况证明上面这个式子。</li>
<li><p>（1）m与n互质。</p>
<ul>
<li><p>根据欧拉定理，此时</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　 mφ(n) ≡ 1 (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>得到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(mφ(n))h × m ≡ m (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>原式得到证明。</p>
</li>
</ul>
</li>
<li><p>（2）m与n不是互质关系。<br>此时，由于n等于质数p和q的乘积，所以m必然等于kp或kq。<br>以 m = kp为例，考虑到这时k与q必然互质，则根据欧拉定理，下面的式子成立：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(kp)q-1 ≡ 1 (mod q)</div></pre></td></tr></table></figure>
<ul>
<li><p>进一步得到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　[(kp)q-1]h(p-1) × kp ≡ kp (mod q)</div></pre></td></tr></table></figure>
</li>
<li><p>即</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　(kp)ed ≡ kp (mod q)</div></pre></td></tr></table></figure>
</li>
<li><p>将它改写成下面的等式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　(kp)ed = tq + kp</div></pre></td></tr></table></figure>
</li>
<li><p>这时t必然能被p整除，即 t=t’p</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　(kp)ed = t&apos;pq + kp</div></pre></td></tr></table></figure>
</li>
<li><p>因为 m=kp，n=pq，所以</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　med ≡ m (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>原式得到证明。</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">package rsa;</div><div class="line"></div><div class="line">/*</div><div class="line">* --------------------------------------------**********--------------------------------------------</div><div class="line">*</div><div class="line">* 该算法于1977年由美国麻省理工学院MIT(Massachusetts Institute of Technology)的Ronal Rivest，Adi Shamir和Len Adleman三位年轻教授提出，并以三人的姓氏Rivest，Shamir和Adlernan命名为RSA算法，是一个支持变长密钥的公共密钥算法，需要加密的文件快的长度也是可变的!</div><div class="line">*</div><div class="line"> *所谓RSA加密算法，是世界上第一个非对称加密算法，也是数论的第一个实际应用。它的算法如下：</div><div class="line">*</div><div class="line"> 1.找两个非常大的质数p和q（通常p和q都有155十进制位或都有512十进制位）并计算n=pq，k=(p-1)(q-1)。</div><div class="line"></div><div class="line"> 2.将明文编码成整数M，保证M不小于0但是小于n。</div><div class="line"></div><div class="line"> 3.任取一个整数e，保证e和k互质，而且e不小于0但是小于k。加密钥匙（称作公钥）是(e, n)。 【exponent】</div><div class="line"></div><div class="line"> 4.找到一个整数d，使得ed除以k的余数是1（只要e和n满足上面条件，d肯定存在）。解密钥匙（称作密钥）是(d, n)。</div><div class="line"></div><div class="line"> 加密过程： 加密后的编码C等于M的e次方除以n所得的余数。</div><div class="line"></div><div class="line"> 解密过程： 解密后的编码N等于C的d次方除以n所得的余数。</div><div class="line"></div><div class="line"> 只要e、d和n满足上面给定的条件。M等于N。</div></pre></td></tr></table></figure>
<h3 id="过程中遇到的问题总结"><a href="#过程中遇到的问题总结" class="headerlink" title="过程中遇到的问题总结"></a>过程中遇到的问题总结</h3><ul>
<li>加密后的数据需要用Base64将bytes转换成字符串不然会乱码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">byte[] bytes = RSA.encryptByPrivateKey(b, privateKeyStr);</div><div class="line">        String s2 = Base64Util.encode2String(bytes);</div><div class="line">        String s = new String(bytes);</div><div class="line">        System.out.println(&quot;私钥加密的数据&quot; + s2);</div></pre></td></tr></table></figure>
<ul>
<li>解密后的数据不需要用Base64将bytes转换成字符串，直接<code>new String(bytes)</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">byte[] bytes1 = RSA.decryptByPublicKey(bytes, publicKeyStr);</div><div class="line">        String s1 = new String(bytes1);</div><div class="line">        System.out.println(&quot;公钥解密的数据&quot; + s1);</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>RSAUtil.java</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">package rsa;</div><div class="line"></div><div class="line">import javax.crypto.BadPaddingException;</div><div class="line">import javax.crypto.Cipher;</div><div class="line">import javax.crypto.IllegalBlockSizeException;</div><div class="line">import javax.crypto.NoSuchPaddingException;</div><div class="line">import java.security.*;</div><div class="line">import java.security.interfaces.RSAPrivateKey;</div><div class="line">import java.security.interfaces.RSAPublicKey;</div><div class="line">import java.security.spec.InvalidKeySpecException;</div><div class="line">import java.security.spec.PKCS8EncodedKeySpec;</div><div class="line">import java.security.spec.X509EncodedKeySpec;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">/**</div><div class="line"> * @author by benny on 2016/7/23.</div><div class="line"> * @version 1.0</div><div class="line"> * @description 加密解密签名工具类 使用RSA算法</div><div class="line"> */</div><div class="line">public class RSAUtil &#123;</div><div class="line"></div><div class="line">    //算法类型</div><div class="line">    private static final String KEY_ALGORITHM = &quot;RSA&quot;;</div><div class="line">    //钥匙的长度</div><div class="line">    private static final int KEY_SIZE = 1024;</div><div class="line">    //RSA公钥</div><div class="line">    private static final String PUBLIC_KEY = &quot;RSAPublicKey&quot;;</div><div class="line">    //RSA私钥</div><div class="line">    private static final String PRIVATE_KEY = &quot;RSAPrivateKey&quot;;</div><div class="line">    //签名算法类型</div><div class="line">    private static String SIGN_ALGORITHM = &quot;SHA1WithRSA&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 初始化密钥</div><div class="line">     */</div><div class="line">    public static Map&lt;String, Object&gt; initKeyPair() &#123;</div><div class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</div><div class="line">        try &#123;</div><div class="line">            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(KEY_ALGORITHM);</div><div class="line">            keyPairGenerator.initialize(KEY_SIZE);</div><div class="line">            KeyPair keyPair = keyPairGenerator.generateKeyPair();</div><div class="line">            //公钥</div><div class="line">            RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();</div><div class="line">            //私钥</div><div class="line">            RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();</div><div class="line">            map.put(PUBLIC_KEY, publicKey);</div><div class="line">            map.put(PRIVATE_KEY, privateKey);</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return map;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获得公钥</div><div class="line">     *</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static RSAPublicKey getPublicKey(Map&lt;String, Object&gt; keyMap) &#123;</div><div class="line"></div><div class="line">        return (RSAPublicKey) initKeyPair().get(PUBLIC_KEY);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获得公钥</div><div class="line">     *</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static RSAPrivateKey getPrivateKey() &#123;</div><div class="line">        return (RSAPrivateKey) initKeyPair().get(PRIVATE_KEY);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 取得公钥，并转化为String类型</div><div class="line">     * @param keyMap</div><div class="line">     * @return 公钥</div><div class="line">     */</div><div class="line">    public static String getPublicKeyStr(Map&lt;String, Object&gt; keyMap) &#123;</div><div class="line">        Key publicKey = (Key) keyMap.get(PUBLIC_KEY);</div><div class="line">        return Base64Util.encode2String(publicKey.getEncoded());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 取得私钥，并转化为String类型</div><div class="line">     * @param keyMap</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static String getPrivateKeyStr(Map&lt;String, Object&gt; keyMap) &#123;</div><div class="line">        Key privateKey = (Key) keyMap.get(PRIVATE_KEY);</div><div class="line">        return Base64Util.encode2String(privateKey.getEncoded());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 用公钥加密</div><div class="line">     * @param bytes	加密数据</div><div class="line">     * @param publicKeyStr	密钥</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static byte[] encryptByPublicKey(byte[] bytes, String publicKeyStr) &#123;</div><div class="line">        //对公钥解密</div><div class="line">        byte[] publicKeyBytes = Base64Util.decodeString2Base64(publicKeyStr);</div><div class="line">        byte[] result = new byte[0];</div><div class="line">        try &#123;</div><div class="line">            // 根据字节数组取得公钥</div><div class="line">            X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(publicKeyBytes);</div><div class="line">            KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</div><div class="line">            Key publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</div><div class="line">            //对数据加密</div><div class="line">            Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</div><div class="line">            cipher.init(Cipher.ENCRYPT_MODE, publicKey);</div><div class="line">            //加密后的byte数组</div><div class="line">            result = cipher.doFinal(bytes);</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (InvalidKeySpecException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (NoSuchPaddingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (InvalidKeyException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (BadPaddingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (IllegalBlockSizeException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 用私钥加密</div><div class="line">     * @param bytes	加密数据</div><div class="line">     * @param privateKeyStr	密钥</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static byte[] encryptByPrivateKey(byte[] bytes, String privateKeyStr) &#123;</div><div class="line">        //对私钥解密</div><div class="line">        byte[] privateKeyBytes = Base64Util.decodeString2Base64(privateKeyStr);</div><div class="line">        byte[] result = new byte[0];</div><div class="line">        try &#123;</div><div class="line">            // 取得私钥</div><div class="line">            PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(privateKeyBytes);</div><div class="line">            KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</div><div class="line">            Key privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</div><div class="line">            // 对数据加密</div><div class="line">            Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</div><div class="line">            cipher.init(Cipher.ENCRYPT_MODE, privateKey);</div><div class="line">            result = cipher.doFinal(bytes);</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (InvalidKeySpecException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (NoSuchPaddingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (InvalidKeyException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (BadPaddingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (IllegalBlockSizeException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 用公钥解密</div><div class="line">     * @param bytes	加密数据</div><div class="line">     * @param publicKeyStr	私钥</div><div class="line">     * @return</div><div class="line">     * @throws Exception</div><div class="line">     */</div><div class="line">    public static byte[] decryptByPublicKey(byte[] bytes, String publicKeyStr) &#123;</div><div class="line">        //对公钥解密</div><div class="line">        byte[] publicKeyBytes = Base64Util.decodeString2Base64(publicKeyStr);</div><div class="line">        byte[] result = new byte[0];</div><div class="line">        try &#123;</div><div class="line">            //取得公钥</div><div class="line">            X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(publicKeyBytes);</div><div class="line">            KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</div><div class="line">            Key publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</div><div class="line"></div><div class="line">            //用公钥解密</div><div class="line">            Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</div><div class="line">            cipher.init(Cipher.DECRYPT_MODE, publicKey);</div><div class="line">            result = cipher.doFinal(bytes);</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (InvalidKeySpecException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (NoSuchPaddingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (InvalidKeyException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (BadPaddingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (IllegalBlockSizeException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 用私钥解密</div><div class="line">     */</div><div class="line">    public static byte[] decryptByPrivateKey(byte[] bytes, String privateKeyStr) &#123;</div><div class="line">        //对私钥解密</div><div class="line">        byte[] privateKeyBytes = Base64Util.decodeString2Base64(privateKeyStr);</div><div class="line">        byte[] result = new byte[0];</div><div class="line">        try &#123;</div><div class="line">            //根据字节数组获得私钥</div><div class="line">            PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(privateKeyBytes);</div><div class="line"></div><div class="line">            KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</div><div class="line">            Key privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</div><div class="line">            //解密数据</div><div class="line">            Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</div><div class="line">            cipher.init(Cipher.DECRYPT_MODE, privateKey);</div><div class="line">            //解密后的byte数组</div><div class="line">            result = cipher.doFinal(bytes);</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (InvalidKeySpecException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (NoSuchPaddingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (InvalidKeyException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (BadPaddingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (IllegalBlockSizeException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * RSA签名</div><div class="line">     *</div><div class="line">     * @param bytes         待签名数据</div><div class="line">     * @param privateKeyStr 商户私钥</div><div class="line">     * @return 签名值</div><div class="line">     */</div><div class="line">    public static String signByPrivateKey(byte[] bytes, String privateKeyStr) &#123;</div><div class="line">        //base64解密私钥</div><div class="line">        byte[] privateKeyBytes = Base64Util.decodeString2Base64(privateKeyStr);</div><div class="line">        String result = &quot;&quot;;</div><div class="line">        try &#123;</div><div class="line">            //取得私钥</div><div class="line">            PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(privateKeyBytes);</div><div class="line">            //指定加密算法</div><div class="line">            KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</div><div class="line">            PrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</div><div class="line">            //用私钥对信息生成数字签名</div><div class="line">            Signature signature = Signature.getInstance(SIGN_ALGORITHM);</div><div class="line">            signature.initSign(privateKey);</div><div class="line">            signature.update(bytes);</div><div class="line">            result = Base64Util.encode2String(signature.sign());</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (InvalidKeySpecException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (InvalidKeyException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (SignatureException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * RSA签名验证</div><div class="line">     *</div><div class="line">     * @param bytes        待签名数据</div><div class="line">     * @param signByte         签名值</div><div class="line">     * @param publicKeyStr 分配给开发商公钥</div><div class="line">     * @return 布尔值</div><div class="line">     */</div><div class="line">    public static boolean checkSignature(byte[] bytes, byte[] signByte, String publicKeyStr) &#123;</div><div class="line">        //base64解密公钥</div><div class="line">        byte[] publicKeyBytes = Base64Util.decodeString2Base64(publicKeyStr);</div><div class="line">        boolean result = false;</div><div class="line">        try &#123;</div><div class="line">            //构造X509EncodedKeySpec对象</div><div class="line">            X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(publicKeyBytes);</div><div class="line">            //指定加密算法</div><div class="line">            KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</div><div class="line">            //取公钥匙对象</div><div class="line">            PublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</div><div class="line">            Signature signature = Signature.getInstance(SIGN_ALGORITHM);</div><div class="line">            signature.initVerify(publicKey);</div><div class="line">            signature.update(bytes);</div><div class="line">            result = signature.verify(signByte);</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (InvalidKeySpecException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (InvalidKeyException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (SignatureException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Base64Util.java</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">package rsa;</div><div class="line"></div><div class="line"></div><div class="line">import sun.misc.BASE64Decoder;</div><div class="line">import sun.misc.BASE64Encoder;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line"></div><div class="line">/**</div><div class="line"> * @author by benny on 2016/7/23.</div><div class="line"> * @version 1.0</div><div class="line"> * @description Base64 编码工具</div><div class="line"> */</div><div class="line">public class Base64Util &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 加密成字符串</div><div class="line">     * @param key</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static String encode2String(byte[] key)&#123;</div><div class="line">        return new BASE64Encoder().encode(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 解密成字节数组</div><div class="line">     * @param key</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static byte[] decodeString2Base64(String key)&#123;</div><div class="line">        byte[] result = new byte[0];</div><div class="line">        try &#123;</div><div class="line">            result =  new BASE64Decoder().decodeBuffer(key);</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="RSAUtil使用说明"><a href="#RSAUtil使用说明" class="headerlink" title="RSAUtil使用说明"></a>RSAUtil使用说明</h2><h3 id="公钥加密-私钥解密"><a href="#公钥加密-私钥解密" class="headerlink" title="公钥加密 私钥解密"></a>公钥加密 私钥解密</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">String resource = &quot;我是加密的数据&quot;;</div><div class="line"></div><div class="line">Map&lt;String, Object&gt; keyMap = RSAUtil.initKeyPair();</div><div class="line"></div><div class="line">&lt;!--获得公钥--&gt;</div><div class="line">String publicKeyStr = RSAUtil.getPublicKeyStr(keyMap);</div><div class="line">&lt;!--获得私钥--&gt;</div><div class="line">String privateKeyStr = RSAUtil.getPrivateKeyStr(keyMap);</div><div class="line"></div><div class="line">&lt;!--将要加密的字符串转成字节数组--&gt;</div><div class="line">byte[] bytes = resource.getBytes();</div><div class="line"></div><div class="line">&lt;!--公钥加密--&gt;</div><div class="line">byte[] encryptBytes = RSAUtil.encryptByPublicKey(bytes, publicKeyStr);</div><div class="line">&lt;!--加密后的字符串--&gt;</div><div class="line">String encryptStr = Base64Util.encode2String(encryptBytes);</div><div class="line"></div><div class="line">&lt;!--私钥解密--&gt;</div><div class="line">byte[] decryptBytes = RSAUtil.decryptByPrivateKey(bytes, privateKeyStr);</div><div class="line">&lt;!--解密后的字符串--&gt;</div><div class="line">String decryptStr = new String(decryptBytes);</div></pre></td></tr></table></figure>
<h3 id="私钥加密-公钥解密-（签名）"><a href="#私钥加密-公钥解密-（签名）" class="headerlink" title="私钥加密 公钥解密 （签名）"></a>私钥加密 公钥解密 （签名）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">String resource = &quot;我是加密的数据&quot;;</div><div class="line"></div><div class="line">Map&lt;String, Object&gt; keyMap = RSAUtil.initKeyPair();</div><div class="line"></div><div class="line">&lt;!--获得公钥--&gt;</div><div class="line">String publicKeyStr = RSAUtil.getPublicKeyStr(keyMap);</div><div class="line">&lt;!--获得私钥--&gt;</div><div class="line">String privateKeyStr = RSAUtil.getPrivateKeyStr(keyMap);</div><div class="line"></div><div class="line">&lt;!--将要加密的字符串转成字节数组--&gt;</div><div class="line">byte[] b = resource.getBytes();</div><div class="line"></div><div class="line">&lt;!--生成签名字符串--&gt;</div><div class="line">String s1 = RSAUtil.signByPrivateKey(b, privateKeyStr);</div><div class="line">   </div><div class="line">&lt;!--验证签名--&gt;</div><div class="line">boolean result = RSAUtil.checkSignature(b12, Base64Util.decodeString2Base64(s1), publicKeyStr);</div><div class="line"></div><div class="line">if true 签名正确  else 签名失败</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于Linux命令的那点小事]]></title>
      <url>/2016/07/06/160706_linuxcommand/</url>
      <content type="html"><![CDATA[<h2 id="Linux命令那点事—ls命令-list"><a href="#Linux命令那点事—ls命令-list" class="headerlink" title="Linux命令那点事—ls命令[list]"></a>Linux命令那点事—<code>ls</code>命令[list]</h2><p><img src="http://ww3.sinaimg.cn/large/610dc034gw1f59lsn7wjnj20du0ku40c.jpg" alt="就问你美不美"></p>
<a id="more"></a>
<ul>
<li><p><code>命令格式</code></p>
<blockquote>
<p>ls  [选项] [目录名]</p>
</blockquote>
</li>
<li><p><code>命令功能</code></p>
<blockquote>
<p>列出目标目录中所有的子目录和文件。</p>
</blockquote>
</li>
<li><p><code>常用参数</code></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>列出目录下的所有文件，包括以 . 开头的隐含文件。</td>
</tr>
<tr>
<td>-b</td>
<td>把文件名中不可输出的字符用反斜杠加字符编号(就象在C语言里一样)的形式列出。</td>
</tr>
<tr>
<td>-c</td>
<td>输出文件的 i 节点的修改时间，并以此排序。</td>
</tr>
<tr>
<td>-d</td>
<td>将目录象文件一样显示，而不是显示其下的文件。</td>
</tr>
<tr>
<td>-e</td>
<td>输出时间的全部信息，而不是输出简略信息。</td>
</tr>
<tr>
<td>-f</td>
<td>-U 对输出的文件不排序。</td>
</tr>
<tr>
<td>-g</td>
<td>无用。</td>
</tr>
<tr>
<td>-i</td>
<td>输出文件的 i 节点的索引信息。</td>
</tr>
<tr>
<td>-k</td>
<td>以 k 字节的形式表示文件的大小。</td>
</tr>
<tr>
<td>-l</td>
<td>列出文件的详细信息。</td>
</tr>
<tr>
<td>-m</td>
<td>横向输出文件名，并以“，”作分格符。</td>
</tr>
<tr>
<td>-n</td>
<td>用数字的 UID,GID 代替名称。</td>
</tr>
<tr>
<td>-o</td>
<td>显示文件的除组信息外的详细信息。</td>
</tr>
<tr>
<td>-p -F</td>
<td>在每个文件名后附上一个字符以说明该文件的类型，“*”表示可执行的普通文件；“/”表示目录；“@”表示符号链接；“</td>
<td>”表示FIFOs；“”表示套接字(sockets)。</td>
</tr>
<tr>
<td>-q</td>
<td>用?代替不可输出的字符。</td>
</tr>
<tr>
<td>-r</td>
<td>对目录反向排序。</td>
</tr>
<tr>
<td>-s</td>
<td>在每个文件名后输出该文件的大小。</td>
</tr>
<tr>
<td>-t</td>
<td>以时间排序。</td>
</tr>
<tr>
<td>-u</td>
<td>以文件上次被访问的时间排序。</td>
</tr>
<tr>
<td>-x</td>
<td>按列输出，横向排序。</td>
</tr>
<tr>
<td>-A</td>
<td>显示除 “.”和“..”外的所有文件。</td>
</tr>
<tr>
<td>-B</td>
<td>不输出以 “~”结尾的备份文件。</td>
</tr>
<tr>
<td>-C</td>
<td>按列输出，纵向排序。</td>
</tr>
<tr>
<td>-F</td>
<td>在每个文件名后附上一个字符以说明该文件的类型，见-p -F命令。</td>
</tr>
<tr>
<td>-G</td>
<td>输出文件的组的信息。</td>
</tr>
<tr>
<td>-L</td>
<td>列出链接文件名而不是链接到的文件。</td>
</tr>
<tr>
<td>-N</td>
<td>不限制文件长度。</td>
</tr>
<tr>
<td>-Q</td>
<td>把输出的文件名用双引号括起来。</td>
</tr>
<tr>
<td>-R</td>
<td>列出所有子目录下的文件。</td>
</tr>
<tr>
<td>-S</td>
<td>以文件大小排序。</td>
</tr>
<tr>
<td>-X</td>
<td>以文件的扩展名(最后一个 . 后的字符)排序。</td>
</tr>
<tr>
<td>-1</td>
<td>一行只输出一个文件。</td>
</tr>
</tbody>
</table>
<hr>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>–colorno</td>
<td>不显示彩色文件名</td>
</tr>
<tr>
<td>–help</td>
<td>在标准输出上显示帮助信息。</td>
</tr>
<tr>
<td>–version</td>
<td>在标准输出上输出版本信息并退出。</td>
</tr>
</tbody>
</table>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li>最近修改的文件显示在最上面</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost /]# ls -t </div><div class="line">tmp root etc dev lib boot sys proc data home bin sbin usr var lost+found media mnt opt selinux srv misc</div></pre></td></tr></table></figure>
<ul>
<li>显示递归文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# ls -R</div><div class="line">.: anaconda-ks.cfg install.log install.log.syslog satools ./satools: black.txt freemem.sh iptables.sh lnmp.sh mysql php502_check.sh ssh_safe.sh</div></pre></td></tr></table></figure>
<ul>
<li>列出可读文件和文件夹详细信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost /]# ls -n</div><div class="line"></div><div class="line">total 254</div><div class="line">drwxr-xr-x   2 0 0  4096 Jun 12 04:03 bin</div><div class="line">drwxr-xr-x   4 0 0  1024 Jun 15 14:45 boot</div><div class="line">drwxr-xr-x   6 0 0  4096 Jun 12 10:26 data</div><div class="line">drwxr-xr-x  10 0 0  3520 Sep 26 15:38 dev</div><div class="line">drwxr-xr-x  75 0 0  4096 Oct 16 04:02 etc</div></pre></td></tr></table></figure>
<ul>
<li><p>ls命令和它的别名  <code>alias ls=&quot;ls -l&quot;</code></p>
<ul>
<li><p>我们可以通过不加任何参数的alias命令来看到目前系统中可用的所有alias设置，当然它们同时也可以unalias来取消。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># alias</div><div class="line">alias cp=&apos;cp -i&apos;</div><div class="line">alias l.=&apos;ls -d .* --color=auto&apos;</div><div class="line">alias ll=&apos;ls -l --color=auto&apos;</div><div class="line">alias ls=&apos;ls --color=auto&apos;</div><div class="line">alias mv=&apos;mv -i&apos;</div><div class="line">alias rm=&apos;rm -i&apos;</div><div class="line">alias which=&apos;alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>+ 删除一项之前定义的alias设置，只需用unalias命令即可。

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># unalias ls</div></pre></td></tr></table></figure>
</code></pre><ul>
<li>显示文件夹信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost /]# ls -ld /etc/ </div><div class="line">drwxr-xr-x 75 root root 4096 Oct 16 04:02 /etc/</div></pre></td></tr></table></figure>
<ul>
<li>计算当前目录下的文件数量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -|*|grep &quot;^-&quot;| wc -|</div></pre></td></tr></table></figure>
<ul>
<li>linux下文件颜色的含义</li>
</ul>
<table>
<thead>
<tr>
<th>颜色</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>绿色</td>
<td>代表可执行文件</td>
</tr>
<tr>
<td>红色</td>
<td>代表压缩文件</td>
</tr>
<tr>
<td>深蓝色</td>
<td>代表目录</td>
</tr>
<tr>
<td>浅蓝色</td>
<td>代表链接文件</td>
</tr>
<tr>
<td>灰色</td>
<td>代表其它的文件</td>
</tr>
</tbody>
</table>
<ul>
<li>列出当前目录下的所有文件（包括隐藏文件）的绝对路径， 对目录不做递归</li>
</ul>
<blockquote>
<p>命令： find $PWD -maxdepth 1 | xargs ls -ld</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost opt]# find $PWD -maxdepth 1 | xargs ls -ld</div><div class="line">drwxr-xr-x 8 root root 4096 10-11 03:43 /opt</div><div class="line">drwxr-xr-x 2 root root 4096 2012-03-08 /opt/log</div><div class="line">drwxr-xr-x 2 root root 4096 2012-03-08 /opt/script</div><div class="line">drwxr-xr-x 5 root root 4096 10-11 03:21 /opt/soft</div><div class="line">drwxr-xr-x 2 root root 4096 2012-03-08 /opt/src</div><div class="line">drwxr-xr-x 4 root root 4096 10-11 05:22 /opt/svndata</div><div class="line">drwxr-xr-x 4 root root 4096 10-09 00:45 /opt/web</div></pre></td></tr></table></figure>
<ul>
<li>递归列出当前目录下的所有文件（包括隐藏文件）的绝对路径</li>
</ul>
<blockquote>
<p>命令：  find $PWD | xargs ls -ld </p>
</blockquote>
<ul>
<li>指定文件时间输出格式</li>
</ul>
<blockquote>
<p>命令 ：ls -tl –time-style=full-iso</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost soft]# ls -tl --time-style=full-iso </div><div class="line">总计 350644</div><div class="line">drwxr-xr-x 16 1016 1016 4096 2012-10-11 03:25:58.000000000 +0800 subversion-1.6.1</div></pre></td></tr></table></figure>
<blockquote>
<p>命令 ：ls -ctl –time-style=long-iso</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost soft]# ls -ctl --time-style=long-iso</div><div class="line">总计 350644</div><div class="line">drwxr-xr-x 16 1016 1016      4096 2012-10-11 03:25 subversion-1.6.1</div></pre></td></tr></table></figure>
<ul>
<li>使用<code>ls -lh</code> 可以将文件大小显示为符合人类阅读习惯的格式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ lib]# ls -l -h</div><div class="line">total 168K</div><div class="line">drwxr-xr-x 2 root   root    4.0K Aug 18  2014 alternatives</div><div class="line">drwxr-xr-x 2 root   root    4.0K Jul 14  2008 bluetooth</div><div class="line">drwxr-xr-x 2 root   root    4.0K Aug  2  2012 cs</div><div class="line">drwx------ 2 apache apache  4.0K Sep 16  2014 dav</div><div class="line">drwxr-xr-x 2 root   root    4.0K Oct  2  2013 dbus</div><div class="line">drwxr-xr-x 2 root   root    4.0K Jan 23  2013 dhclient</div><div class="line">drwxr-x--- 2 root   root    4.0K Mar  6  2011 dhcpv6</div><div class="line">drwxr-xr-x 2 root   root    4.0K May 11  2011 games</div><div class="line">drwxr-xr-x 2 root   root    4.0K Jan  9  2013 hal</div><div class="line">drwxr-xr-x 8 root   root    4.0K Aug 18  2014 iscsi</div></pre></td></tr></table></figure>
<ul>
<li>列出文件并标记颜色分类</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx-1.2.1]# ls --color=auto </div><div class="line">auto CHANGES CHANGES.ru conf configure contrib html LICENSE Makefile man objs README src</div></pre></td></tr></table></figure>
<h2 id="ls-l-文件列表权限详解"><a href="#ls-l-文件列表权限详解" class="headerlink" title="ls -l 文件列表权限详解"></a><code>ls -l</code> 文件列表权限详解</h2><ul>
<li>使用 ls -l 命令 执行结果如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@iZ251fgdsaZ var]#ls -l</div><div class="line">-rwxrwxrwx  1 root root     1290 May 31 11:08 home.php</div><div class="line">-rwxrwxrwx  1 root root     5669 May 31 11:08 index.php</div><div class="line">drwxrwxrwx  5 root root     4096 Jun 27 17:02 install</div><div class="line">-rwxrwxrwx  1 root root     1025 May 31 11:08 member.php</div><div class="line">-rwxrwxrwx  1 root root     2462 May 31 11:08 misc.php</div><div class="line">-rwxrwxrwx  1 root root     1757 May 31 11:08 plugin.php</div><div class="line">-rwxrwxrwx  1 root root      988 May 31 11:08 portal.php</div><div class="line">-rwxrwxrwx  1 root root      582 May 31 11:08 robots.txt</div><div class="line">-rwxrwxrwx  1 root root     1161 May 31 11:08 search.php</div><div class="line">drwxrwxrwx 10 root root     4096 Jun 27 11:13 source</div><div class="line">drwxrwxrwx  6 root  adm     4096 Jun 11 22:41 tomcat9</div><div class="line">drwxrwxrwx  5 root root     4096 Jun 13 02:21 template</div></pre></td></tr></table></figure>
<ul>
<li>文件列表权限图解</li>
</ul>
<p><img src="http://7xjlkb.com1.z0.glb.clouddn.com/lsAuthority.png" alt="文件列表权限详解"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">第一列 ： “drwxr-x---”  表识文件的类型 和文件权限 </div><div class="line"></div><div class="line">第二列： “2”是纯数字 ，表示 文件链接个数</div><div class="line"></div><div class="line">第三列 ： “root” 表示文件的所有者 </div><div class="line"></div><div class="line">第四列：“adm” 表示为文件的所在群组 </div><div class="line"></div><div class="line">第五列：“4096”，表示为文件长度（大小）</div><div class="line"></div><div class="line">第六列：“2016-08-07 11:03”，表示文件最后更新（修改）时间</div><div class="line"></div><div class="line">第七列：“tomcat9” 表示文件的名称</div></pre></td></tr></table></figure>
<blockquote>
<p><code>drwxrwxrwx</code>第一列共有10个字符，第一个字符代表文件的类型，后面9个字符表示文件的权限</p>
</blockquote>
<ul>
<li><p><code>d rwx rwx rwx</code> </p>
</li>
<li><p><code>d</code>代表是目录， </p>
</li>
<li>第一个<code>rwx</code>  代表所有者的读、写、执行的权限</li>
<li>第二个<code>rwx</code>  代表用户组读、写、执行的权限</li>
<li>第三个<code>rwx</code>  代表其他用户读、写、执行的权限</li>
<li>如果没有权限的话，用<code>-</code>来代替，例如：<code>drwx-w-r--</code></li>
</ul>
<h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><p><img src="http://7xjlkb.com1.z0.glb.clouddn.com/permission.png" alt="文件列表权限详解"></p>
<ul>
<li>文件类型和文件权限 ，即为列表第一列内容：</li>
</ul>
<blockquote>
<p>“drwxr-x—” 含义：有两部分组成 ，一部分是第一列即为“d” ,表示文件类型（目录或文件夹），另一部分是“rwxr-x—” 表示文件权限，权限有分为三段：即为 “ rwx ”,“  r-x  ”和 “ —  ”分别表示 ，文件所有者的权限，文件所属组的权限 和其他用户对文件的权限。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">d ：目录   </div><div class="line">- ：文件   </div><div class="line">l ：链接   </div><div class="line">s ：socket   </div><div class="line">p ：named pipe   </div><div class="line">b ：block device   </div><div class="line">c  ：character device</div></pre></td></tr></table></figure>
<ul>
<li>文件权限 ：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">r :含义为 “可读”，用数字 4 表示   </div><div class="line">  </div><div class="line"> w:含义为 “可写”用数字 2 表示  </div><div class="line">  </div><div class="line"> X（小X）：含义为“可执行”用数字 1 表示  </div><div class="line">  </div><div class="line"> -：含义为“无权限”用数字0 表示  </div><div class="line">  </div><div class="line">X （大X）：含义为只有目标文件对某些用户是可执行的或该目标文件是目录时才追加x 属性。   </div><div class="line">s：含义为 在文件执行时把进程的属主或组ID置为该文件的文件属主。方式“u＋s”设置文件的用         户ID位，“g＋s”设置组ID位。</div></pre></td></tr></table></figure>
<h2 id="文件权限的修改"><a href="#文件权限的修改" class="headerlink" title="文件权限的修改"></a>文件权限的修改</h2><ul>
<li><p>命令：  chmod  文件权限 文件名称 [-R]</p>
<ul>
<li><p>(1) 直接给文件赋相应的权限即为 :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod   a+x  auth.log   #含义为 给 auth.log 文件赋予所有者可执行权限</div></pre></td></tr></table></figure>
</li>
<li><p>(2) 使用数字方式代替权限 ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 777 auth.log #含义为给auth.log文件赋予任何可读，可写，可执行权限</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>数字含义详见下表 </p>
</li>
</ul>
<table>
<thead>
<tr>
<th>所有者</th>
<th>群组</th>
<th>其他</th>
<th>三位代表权限的数字</th>
</tr>
</thead>
<tbody>
<tr>
<td>rwx</td>
<td>rwx</td>
<td>rwx</td>
<td>实际结果</td>
</tr>
<tr>
<td>521</td>
<td>521</td>
<td>521</td>
<td>777</td>
</tr>
<tr>
<td>421</td>
<td>401</td>
<td>401</td>
<td>705</td>
</tr>
</tbody>
</table>
<h2 id="文件所有者的更改"><a href="#文件所有者的更改" class="headerlink" title="文件所有者的更改"></a>文件所有者的更改</h2><ul>
<li>命令： chown  用户名  文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown MySQL auth.log #含义为 把 文件 auth.log 的所有者更改为 mysql</div></pre></td></tr></table></figure>
<h2 id="文件所在组的更改"><a href="#文件所在组的更改" class="headerlink" title="文件所在组的更改"></a>文件所在组的更改</h2><ul>
<li>命令 chgrp [-R]  群组名称  文件名称</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chgrp  -R  mysql  apache2  #含义为 ，把 目录apache2 的所在组更改为mysql</div></pre></td></tr></table></figure>
<h2 id="Linux-命令英文缩写"><a href="#Linux-命令英文缩写" class="headerlink" title="Linux 命令英文缩写"></a>Linux 命令英文缩写</h2><table>
<thead>
<tr>
<th>缩写</th>
<th>完整</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>ls</td>
<td>list</td>
<td>(列出目录内容)</td>
</tr>
<tr>
<td>cd</td>
<td>Change Directory</td>
<td>（改变目录）</td>
</tr>
<tr>
<td>su</td>
<td>switch user</td>
<td>切换用户</td>
</tr>
<tr>
<td>rpm</td>
<td>redhat package manager</td>
<td>红帽子打包管理器</td>
</tr>
<tr>
<td>pwd</td>
<td>print work directory</td>
<td>打印当前目录 显示出当前工作目录的绝对路径</td>
</tr>
<tr>
<td>ps</td>
<td>process status</td>
<td>(进程状态，类似于windows的任务管理器) 常用参数</td>
<td>－auxf</td>
</tr>
<tr>
<td>ps -auxf</td>
<td>显示进程状态</td>
</tr>
<tr>
<td>df</td>
<td>disk free</td>
<td>其功能是显示磁盘可用空间数目信息及空间结点信息。换句话说，就是报告在任何安装的设备或目录中，还剩多少自由的空间。</td>
</tr>
<tr>
<td>rpm</td>
<td>即RedHat Package Management</td>
<td>是RedHat的发明之一</td>
</tr>
<tr>
<td>rmdir</td>
<td>Remove Directory</td>
<td>（删除目录）</td>
</tr>
<tr>
<td>rm</td>
<td>Remove</td>
<td>（删除目录或文件）</td>
</tr>
<tr>
<td>cat</td>
<td>concatenate</td>
<td>连锁 cat file1 file2&gt;&gt;file3把文件1和文件2的内容联合起来放到file3中</td>
</tr>
<tr>
<td>insmod</td>
<td>install module</td>
<td>,载入模块</td>
</tr>
<tr>
<td>ln -s</td>
<td>link -soft</td>
<td>创建一个软链接，相当于创建一个快捷方式</td>
</tr>
<tr>
<td>mkdir</td>
<td>Make Directory</td>
<td>(创建目录</td>
</tr>
<tr>
<td>touch</td>
</tr>
<tr>
<td>man</td>
<td>Manual</td>
</tr>
<tr>
<td>pwd</td>
<td>Print working directory</td>
</tr>
<tr>
<td>su</td>
<td>Swith user</td>
</tr>
<tr>
<td>cd</td>
<td>Change directory</td>
</tr>
<tr>
<td>ls</td>
<td>List files</td>
</tr>
<tr>
<td>ps</td>
<td>Process Status</td>
</tr>
<tr>
<td>mkdir</td>
<td>Make directory</td>
</tr>
<tr>
<td>rmdir</td>
<td>Remove directory</td>
</tr>
<tr>
<td>mkfs</td>
<td>Make file system</td>
</tr>
<tr>
<td>fsck</td>
<td>File system check</td>
</tr>
<tr>
<td>cat</td>
<td>Concatenate</td>
</tr>
<tr>
<td>uname</td>
<td>Unix name</td>
</tr>
<tr>
<td>df</td>
<td>Disk free</td>
</tr>
<tr>
<td>du</td>
<td>Disk usage</td>
</tr>
<tr>
<td>lsmod</td>
<td>List modules</td>
</tr>
<tr>
<td>mv</td>
<td>Move file</td>
</tr>
<tr>
<td>rm</td>
<td>Remove file</td>
</tr>
<tr>
<td>cp</td>
<td>Copy file</td>
</tr>
<tr>
<td>ln</td>
<td>Link files</td>
</tr>
<tr>
<td>fg</td>
<td>Foreground</td>
</tr>
<tr>
<td>bg</td>
<td>Background</td>
</tr>
<tr>
<td>chown</td>
<td>Change owner</td>
</tr>
<tr>
<td>chgrp</td>
<td>Change group</td>
</tr>
<tr>
<td>chmod</td>
<td>Change mode</td>
</tr>
<tr>
<td>umount</td>
<td>Unmount</td>
</tr>
<tr>
<td>dd</td>
<td>本来应根据其功能描述“Convert an copy”命名为“cc”，但“cc”已经被用以代表“C Complier”，所以命名为“dd”</td>
</tr>
<tr>
<td>tar</td>
<td>Tape archive</td>
</tr>
<tr>
<td>ldd</td>
<td>List dynamic dependencies</td>
</tr>
<tr>
<td>insmod</td>
<td>Install module</td>
</tr>
<tr>
<td>rmmod</td>
<td>Remove module</td>
</tr>
<tr>
<td>lsmod</td>
<td>List module</td>
</tr>
<tr>
<td>文件结尾的”rc”（如.bashrc、.xinitrc等）</td>
<td>Resource configuration</td>
</tr>
<tr>
<td>Knnxxx / Snnxxx（位于rcx.d目录下）</td>
<td>K（Kill）；S(Service)；nn（执行顺序号）；xxx（服务标识）</td>
</tr>
<tr>
<td>.a（扩展名a）</td>
<td>Archive，static library</td>
</tr>
<tr>
<td>.so（扩展名so）</td>
<td>Shared object，dynamically linked library</td>
</tr>
<tr>
<td>.o（扩展名o）</td>
<td>Object file，complied result of C/C++ source file</td>
</tr>
<tr>
<td>RPM</td>
<td>Red hat package manager</td>
</tr>
<tr>
<td>dpkg</td>
<td>Debian package manager</td>
</tr>
<tr>
<td>apt</td>
<td>Advanced package tool（Debian或基于Debian的发行版中提供）</td>
</tr>
<tr>
<td>部分Linux命令缩</td>
</tr>
<tr>
<td>bin</td>
<td>BINaries</td>
<td>#下面的是一些二进制程序文件</td>
</tr>
<tr>
<td>/dev</td>
<td>DEVices</td>
<td>#下面的是一些硬件驱动</td>
</tr>
<tr>
<td>/etc</td>
<td>ETCetera</td>
<td>#目录存放着各种系统配置文件, 类似于windows下的system</td>
</tr>
<tr>
<td>/lib</td>
<td>LIBrary</td>
</tr>
<tr>
<td>/proc</td>
<td>PROCesses</td>
</tr>
<tr>
<td>/sbin</td>
<td>Superuser BINaries</td>
</tr>
<tr>
<td>/tmp</td>
<td>TeMPorary</td>
</tr>
<tr>
<td>/usr</td>
<td>Unix Shared Resources </td>
</tr>
<tr>
<td>/var</td>
<td>VARiable ?</td>
</tr>
<tr>
<td>/bootboot</td>
<td>#下面的是开机启动文件</td>
</tr>
<tr>
<td>FIFO</td>
<td>First In, First Out</td>
</tr>
<tr>
<td>GRUB</td>
<td>GRand Unified Bootloader</td>
</tr>
<tr>
<td>IFS</td>
<td>Internal Field Seperators</td>
</tr>
<tr>
<td>LILO</td>
<td>LInux LOader</td>
</tr>
<tr>
<td>MySQ</td>
<td>My是最初作者女儿的名字，SQL  Structured Query Language</td>
</tr>
<tr>
<td>PHP</td>
<td>Personal Home Page Tools  PHP Hypertext Preprocessor</td>
</tr>
<tr>
<td>PS</td>
<td>Prompt String</td>
</tr>
<tr>
<td>Perl</td>
<td>“Pratical Extraction and Report Language”  “Pathologically Eclectic Rubbish Lister”</td>
</tr>
<tr>
<td>Python</td>
<td>得名于电视剧Monty Python’s Flying Circus</td>
</tr>
<tr>
<td>Tcl</td>
<td>Tool Command Language</td>
</tr>
<tr>
<td>Tk</td>
<td>ToolKit</td>
</tr>
<tr>
<td>VT</td>
<td>Video Terminal</td>
</tr>
<tr>
<td>YaST</td>
<td>Yet Another Setup Tool</td>
</tr>
<tr>
<td>apache</td>
<td>“a patchy” server</td>
</tr>
<tr>
<td>apt</td>
<td>Advanced Packaging Tool</td>
</tr>
<tr>
<td>ar</td>
<td>archiver</td>
</tr>
<tr>
<td>as</td>
<td>assembler</td>
</tr>
<tr>
<td>awk</td>
<td>“Aho Weiberger and Kernighan” 三个作者的姓的第一个字母</td>
</tr>
<tr>
<td>bash</td>
<td>Bourne Again SHell</td>
</tr>
<tr>
<td>bc</td>
<td>Basic (Better) Calculator</td>
</tr>
<tr>
<td>bg</td>
<td>BackGround</td>
</tr>
<tr>
<td>biff</td>
<td>作者Heidi Stettner在U.C.Berkely养的一条狗,喜欢对邮递员汪汪叫。</td>
</tr>
<tr>
<td>cal</td>
<td>CALendar</td>
</tr>
<tr>
<td>cat</td>
<td>CATenate</td>
</tr>
<tr>
<td>cd</td>
<td>Change Directory</td>
</tr>
<tr>
<td>chgrp</td>
<td>CHange GRouP</td>
</tr>
<tr>
<td>chmod</td>
<td>CHange MODe</td>
</tr>
<tr>
<td>chown</td>
<td>CHange OWNer</td>
</tr>
<tr>
<td>chsh</td>
<td>CHange SHell</td>
</tr>
<tr>
<td>cmp</td>
<td>compare</td>
</tr>
<tr>
<td>cobra</td>
<td>Common Object Request Broker Architecture</td>
</tr>
<tr>
<td>comm</td>
<td>common</td>
</tr>
<tr>
<td>cp</td>
<td>CoPy</td>
</tr>
<tr>
<td>cpio</td>
<td>CoPy In and Out</td>
</tr>
<tr>
<td>cpp</td>
<td>C Pre Processor</td>
</tr>
<tr>
<td>cron</td>
<td>Chronos 希腊文时间</td>
</tr>
<tr>
<td>cups</td>
<td>Common Unix Printing System</td>
</tr>
<tr>
<td>cvs</td>
<td>Current Version System</td>
</tr>
<tr>
<td>daemon</td>
<td>Disk And Execution MONitor</td>
</tr>
<tr>
<td>dc</td>
<td>Desk Calculator</td>
</tr>
<tr>
<td>dd</td>
<td>Disk Dump</td>
</tr>
<tr>
<td>df</td>
<td>Disk Free</td>
</tr>
<tr>
<td>diff</td>
<td>DIFFerence</td>
</tr>
<tr>
<td>dmesg</td>
<td>diagnostic message</td>
</tr>
<tr>
<td>du</td>
<td>Disk Usage</td>
</tr>
<tr>
<td>ed</td>
<td>editor</td>
</tr>
<tr>
<td>egrep</td>
<td>Extended GREP</td>
</tr>
<tr>
<td>elf</td>
<td>Extensible Linking Format</td>
</tr>
<tr>
<td>elm</td>
<td>ELectronic Mail</td>
</tr>
<tr>
<td>emacs</td>
<td>Editor MACroS</td>
</tr>
<tr>
<td>eval</td>
<td>EVALuate</td>
</tr>
<tr>
<td>ex</td>
<td>EXtended</td>
</tr>
<tr>
<td>exec</td>
<td>EXECute</td>
</tr>
<tr>
<td>fd</td>
<td>file descriptors</td>
</tr>
<tr>
<td>fg</td>
<td>ForeGround</td>
</tr>
<tr>
<td>fgrep</td>
<td>Fixed GREP</td>
</tr>
<tr>
<td>fmt</td>
<td>format</td>
</tr>
<tr>
<td>fsck</td>
<td>File System ChecK</td>
</tr>
<tr>
<td>fstab</td>
<td>FileSystem TABle</td>
</tr>
<tr>
<td>fvwm</td>
<td>F<em>*</em> Virtual Window Manager</td>
</tr>
<tr>
<td>gawk</td>
<td>GNU AWK</td>
</tr>
<tr>
<td>gpg</td>
<td>GNU Privacy Guard</td>
</tr>
<tr>
<td>groff</td>
<td>GNU troff</td>
</tr>
<tr>
<td>hal</td>
<td>Hardware Abstraction Layer</td>
</tr>
<tr>
<td>joe</td>
<td>Joe’s Own Editor</td>
</tr>
<tr>
<td>ksh</td>
<td>Korn SHell</td>
</tr>
<tr>
<td>lame</td>
<td>Lame Ain’t an MP3 Encoder</td>
</tr>
<tr>
<td>lex</td>
<td>LEXical analyser</td>
</tr>
<tr>
<td>lisp</td>
<td>LISt Processing  Lots of Irritating Superfluous Parentheses</td>
</tr>
<tr>
<td>ln</td>
<td>LiNk</td>
</tr>
<tr>
<td>lpr</td>
<td>Line PRint</td>
</tr>
<tr>
<td>ls</td>
<td>list</td>
</tr>
<tr>
<td>lsof</td>
<td>LiSt Open Files</td>
</tr>
<tr>
<td>m4</td>
<td>Macro processor Version 4</td>
</tr>
<tr>
<td>man</td>
<td>MANual pages</td>
</tr>
<tr>
<td>mawk</td>
<td>Mike Brennan’s AWK</td>
</tr>
<tr>
<td>mc</td>
<td>Midnight Commander</td>
</tr>
<tr>
<td>mkfs</td>
<td>MaKe FileSystem</td>
</tr>
<tr>
<td>mknod</td>
<td>MaKe NODe</td>
</tr>
<tr>
<td>motd</td>
<td>Message of The Day</td>
</tr>
<tr>
<td>mozilla</td>
<td>MOsaic GodZILLa</td>
</tr>
<tr>
<td>mtab</td>
<td>Mount TABle</td>
</tr>
<tr>
<td>mv</td>
<td>MoVe</td>
</tr>
<tr>
<td>nano</td>
<td>Nano’s ANOther editor</td>
</tr>
<tr>
<td>nawk</td>
<td>New AWK</td>
</tr>
<tr>
<td>nl</td>
<td>Number of Lines</td>
</tr>
<tr>
<td>nm</td>
<td>names</td>
</tr>
<tr>
<td>nohup</td>
<td>No HangUP</td>
</tr>
<tr>
<td>nroff</td>
<td>New ROFF</td>
</tr>
<tr>
<td>od</td>
<td>Octal Dump</td>
</tr>
<tr>
<td>passwd</td>
<td>PASSWorD</td>
</tr>
<tr>
<td>pg</td>
<td>pager</td>
</tr>
<tr>
<td>pico</td>
<td>PIne’s message COmposition editor</td>
</tr>
<tr>
<td>pine</td>
<td>“Program for Internet News &amp; Email”  “Pine is not Elm”</td>
</tr>
<tr>
<td>ping</td>
<td>拟声 又  Packet InterNet Grouper</td>
</tr>
<tr>
<td>pirntcap</td>
<td>PRINTer CAPability</td>
</tr>
<tr>
<td>popd</td>
<td>POP Directory</td>
</tr>
<tr>
<td>pr</td>
<td>pre</td>
</tr>
<tr>
<td>printf</td>
<td>PRINT Formatted</td>
</tr>
<tr>
<td>ps</td>
<td>Processes Status</td>
</tr>
<tr>
<td>pty</td>
<td>pseudo tty</td>
</tr>
<tr>
<td>pushd</td>
<td>PUSH Directory</td>
</tr>
<tr>
<td>pwd</td>
<td>Print Working Directory</td>
</tr>
<tr>
<td>rc</td>
<td>runcom  run command, rc还是plan9的shell</td>
</tr>
<tr>
<td>rev</td>
<td>REVerse</td>
</tr>
<tr>
<td>rm</td>
<td>ReMove</td>
</tr>
<tr>
<td>rn</td>
<td>Read News</td>
</tr>
<tr>
<td>roff</td>
<td>RunOFF</td>
</tr>
<tr>
<td>rpm</td>
<td>RPM Package Manager  RedHat Package Manager</td>
</tr>
<tr>
<td>rsh, rlogin, rvim中的r</td>
<td>Remote</td>
</tr>
<tr>
<td>rxvt</td>
<td>ouR XVT</td>
</tr>
<tr>
<td>seamoneky</td>
<td>我</td>
</tr>
<tr>
<td>sed</td>
<td>Stream EDitor</td>
</tr>
<tr>
<td>seq</td>
<td>SEQuence</td>
</tr>
<tr>
<td>shar</td>
<td>SHell ARchive</td>
</tr>
<tr>
<td>slrn</td>
<td>S-Lang rn</td>
</tr>
<tr>
<td>ssh</td>
<td>Secure SHell</td>
</tr>
<tr>
<td>ssl</td>
<td>Secure Sockets Layer</td>
</tr>
<tr>
<td>stty</td>
<td>Set TTY</td>
</tr>
<tr>
<td>su</td>
<td>Substitute User</td>
</tr>
<tr>
<td>svn</td>
<td>SubVersioN</td>
</tr>
<tr>
<td>tar</td>
<td>Tape ARchive</td>
</tr>
<tr>
<td>tcsh</td>
<td>TENEX C shell</td>
</tr>
<tr>
<td>tee</td>
<td>T (T形水管接口)</td>
</tr>
<tr>
<td>telnet</td>
<td>TEminaL over Network</td>
</tr>
<tr>
<td>termcap</td>
<td>terminal capability</td>
</tr>
<tr>
<td>terminfo</td>
<td>terminal information</td>
</tr>
<tr>
<td>tex</td>
<td>τέχνη的缩写，希腊文art</td>
</tr>
<tr>
<td>tr</td>
<td>traslate</td>
</tr>
<tr>
<td>troff</td>
<td>Typesetter new ROFF</td>
</tr>
<tr>
<td>tsort</td>
<td>Topological SORT</td>
</tr>
<tr>
<td>tty</td>
<td>TeleTypewriter</td>
</tr>
<tr>
<td>twm</td>
<td>Tom’s Window Manager</td>
</tr>
<tr>
<td>tz</td>
<td>TimeZone</td>
</tr>
<tr>
<td>udev</td>
<td>Userspace DEV</td>
</tr>
<tr>
<td>ulimit</td>
<td>User’s LIMIT</td>
</tr>
<tr>
<td>umask</td>
<td>User’s MASK</td>
</tr>
<tr>
<td>uniq</td>
<td>UNIQue</td>
</tr>
<tr>
<td>vi</td>
<td>VIsual  Very Inconvenient</td>
</tr>
<tr>
<td>vim</td>
<td>Vi IMproved</td>
</tr>
<tr>
<td>wall</td>
<td>write all</td>
</tr>
<tr>
<td>wc</td>
<td>Word Count</td>
</tr>
<tr>
<td>wine</td>
<td>WINE Is Not an Emulator</td>
</tr>
<tr>
<td>xargs</td>
<td>eXtended ARGuments</td>
</tr>
<tr>
<td>xdm</td>
<td>X Display Manager</td>
</tr>
<tr>
<td>xlfd</td>
<td>X Logical Font Description</td>
</tr>
<tr>
<td>xmms</td>
<td>X Multimedia System</td>
</tr>
<tr>
<td>xrdb</td>
<td>X Resources DataBase</td>
</tr>
<tr>
<td>xwd</td>
<td>X Window Dump</td>
</tr>
<tr>
<td>yacc</td>
<td>yet another compiler compiler</td>
</tr>
<tr>
<td>Fish</td>
<td>the Friendly Interactive SHell</td>
</tr>
<tr>
<td>su</td>
<td>Switch User</td>
</tr>
<tr>
<td>MIME</td>
<td>Multipurpose Internet Mail Extensions</td>
</tr>
<tr>
<td>ECMA</td>
<td>European Computer Manufacturers Association</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[plantUML的使用]]></title>
      <url>/2016/07/05/160705_plantuml/</url>
      <content type="html"><![CDATA[<h2 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h2><p><img src="http://ww1.sinaimg.cn/large/610dc034jw1f566a296rpj20lc0sggoj.jpg" alt="就问你美不美"></p>
<a id="more"></a>
<hr>
<table>
<thead>
<tr>
<th>注释</th>
<th>符号</th>
<th>图释</th>
<th>箭头指向</th>
<th>关系</th>
<th>代码体现</th>
</tr>
</thead>
<tbody>
<tr>
<td>Extension Generalization<br>(<strong>泛化</strong>也就是<strong>继承</strong>)</td>
<td><code>&lt;l-</code>&nbsp;&nbsp;&nbsp;</td>
<td><img src="http://hi.csdn.net/attachment/201104/22/0_1303436788Qi60.gif" alt="image"></td>
<td>带三角箭头的实线，箭头指向父类</td>
<td>是一种继承关系,它指定了子类如何特化父类的所有特征和行为</td>
<td></td>
</tr>
<tr>
<td>Composition(聚合)</td>
<td><code>o--</code></td>
<td><img src="http://hi.csdn.net/attachment/201104/22/0_1303436811y36B.gif" alt="image"></td>
<td>带空心菱形的实心线，菱形指向整体</td>
<td>是整体与部分的关系</td>
<td>成员变量</td>
</tr>
<tr>
<td>Aggregation(组合)</td>
<td><code>*--</code></td>
<td><img src="http://hi.csdn.net/attachment/201104/22/0_1303436817mqXK.gif" alt="image"></td>
<td>带实心菱形的实线，菱形指向整体</td>
<td>是整体与部分的关系</td>
<td>成员变量</td>
</tr>
<tr>
<td>Realization(实现)</td>
<td><code>..l&gt;</code></td>
<td><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_47.gif" alt="image"></td>
<td>带三角箭头的虚线，箭头指向接口</td>
<td>是一种类与接口的关系，表示类是接口所有特征和行为的实现</td>
<td></td>
</tr>
<tr>
<td>Association(关联)</td>
<td><code>--&gt;</code></td>
<td><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_41.gif" alt="image"></td>
<td>带普通箭头的实心线，指向被拥有者</td>
<td>是一种拥有的关系,它使一个类知道另一个类的属性和方法</td>
<td>成员变量</td>
</tr>
<tr>
<td>Dependency(依赖)</td>
<td><code>..&gt;</code></td>
<td><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_129.gif" alt="image"></td>
<td>带箭头的虚线，指向被使用者</td>
<td>是一种使用的关系,所以要尽量不使用双向的互相依赖</td>
<td>局部变量、方法的参数或者对静态方法的调用</td>
</tr>
</tbody>
</table>
<p><img src="http://www.hubwiz.com/course/54f40b69e564e50cfccbad4c/img/relationships2.png" alt="image"></p>
<blockquote>
<p>各种关系的强弱顺序</p>
<ul>
<li>泛化(继承) = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖</li>
</ul>
</blockquote>
<hr>
<p><img src="http://hi.csdn.net/attachment/201202/29/0_1330497855hqk2.gif" alt="各种类图关系"></p>
<h2 id="关系上的标识"><a href="#关系上的标识" class="headerlink" title="关系上的标识"></a>关系上的标识</h2><h2 id="添加方法"><a href="#添加方法" class="headerlink" title="添加方法"></a>添加方法</h2><h2 id="定义可访问性"><a href="#定义可访问性" class="headerlink" title="定义可访问性"></a>定义可访问性</h2><table>
<thead>
<tr>
<th>符号</th>
<th style="text-align:center">字段图标</th>
<th style="text-align:center">方法图标</th>
<th>权限</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-</code></td>
<td style="text-align:center"><img src="http://zh.plantuml.com/PRIVATE_FIELD.png" alt="image"></td>
<td style="text-align:center"><img src="http://zh.plantuml.com/PRIVATE_METHOD.png" alt="image"></td>
<td>private</td>
</tr>
<tr>
<td><code>#</code></td>
<td style="text-align:center"><img src="http://zh.plantuml.com/PROTECTED_FIELD.png" alt="image"></td>
<td style="text-align:center"><img src="http://zh.plantuml.com/PROTECTED_METHOD.png" alt="image"></td>
<td>protected</td>
</tr>
<tr>
<td><code>~</code></td>
<td style="text-align:center"><img src="http://zh.plantuml.com/PACKAGE_PRIVATE_FIELD.png" alt="image"></td>
<td style="text-align:center"><img src="http://zh.plantuml.com/PACKAGE_PRIVATE_METHOD.png" alt="image"></td>
<td>package private</td>
</tr>
<tr>
<td><code>+</code></td>
<td style="text-align:center"><img src="http://zh.plantuml.com/PUBLIC_FIELD.png" alt="image"></td>
<td style="text-align:center"><img src="http://zh.plantuml.com/PUBLIC_METHOD.png" alt="image"></td>
<td>public</td>
</tr>
</tbody>
</table>
<ul>
<li>通常情况这样是不容易被理解的<blockquote>
<p><img src="http://s.plantuml.com/imgp/h0_classes_006.png" alt="image"></p>
</blockquote>
</li>
<li>我们可以设置不显示图片，以<code>-</code>、<code>#</code>、<code>~</code>、<code>+</code>来表是，加上这句话<code>skinparam classAttributeIconSize 0</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">skinparam classAttributeIconSize <span class="number">0</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</div><div class="line">    - String driver</div><div class="line">    + String oil</div><div class="line">    </div><div class="line">    + <span class="function">String <span class="title">say</span><span class="params">()</span></span></div><div class="line">    # String <span class="title">do</span><span class="params">()</span></div><div class="line">    ~ String <span class="title">eat</span><span class="params">()</span></div><div class="line">    - String <span class="title">lov</span><span class="params">()</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">class bmw implements Car&#123;</div><div class="line">    + <span class="function"><span class="keyword">private</span> <span class="title">drive</span><span class="params">()</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xjlkb.com1.z0.glb.clouddn.com/visibatily1.png" alt="image"><br><img src="http://7xjlkb.com1.z0.glb.clouddn.com/visibatily2.png" alt="image"></p>
<h2 id="高级类体"><a href="#高级类体" class="headerlink" title="高级类体"></a>高级类体</h2><ul>
<li>可以自己指定分隔符</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">abstract class CarFactory&#123;</div><div class="line"></div><div class="line">.. 此处是属性 ..</div><div class="line">    &#123;static&#125; String hello   :静态属性 下划线</div><div class="line"></div><div class="line">-- 此处是方法 --</div><div class="line">     - String say()</div><div class="line"></div><div class="line">==此处是抽象方法==</div><div class="line">    &#123;abstract&#125; void methods()   :抽象方法 斜体</div><div class="line">&#125;</div><div class="line"></div><div class="line">abstract class CarFactory2&#123;</div><div class="line">    &#123;static&#125; String hello   :静态属性 下划线</div><div class="line">    - String say()</div><div class="line">    &#123;abstract&#125; void methods()   :抽象方法 斜体</div><div class="line">&#125;</div><div class="line">abstract class CarFactory3&#123;</div><div class="line"></div><div class="line">    &#123;static&#125; String hello   :静态属性 下划线</div><div class="line">    - String say()</div><div class="line">    &#123;abstract&#125; void methods()   :抽象方法 斜体</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xjlkb.com1.z0.glb.clouddn.com/separate.png" alt="分隔符"></p>
<ul>
<li>代码可以看出来，如果属性不仅跟着类下方写的话，访问权限的图标就会由图片变成<strong><code>-</code></strong>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">abstract class CarFactory&lt;&lt;Car&gt;&gt;&#123;</div><div class="line">    &#123;abstract&#125; Car build()</div><div class="line">&#125;</div><div class="line">note left: 我不知道该说啥</div><div class="line"></div><div class="line">class CarBuilder</div><div class="line">note right : 我是一个车</div><div class="line">class CarBuilder&lt;&lt;Car&gt;&gt; &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Cars&#123;</div><div class="line">    String word()</div><div class="line">&#125;</div><div class="line">note top : &quot;hello &lt;/br&gt;&quot;</div><div class="line"></div><div class="line">annotation superwarnings</div><div class="line"></div><div class="line">enum Time&#123;</div><div class="line">    DAYS</div><div class="line">    HOURS</div><div class="line">&#125;</div><div class="line">/&apos;设置note的颜色&apos;/</div><div class="line">note top of CarBuilder #pink</div><div class="line">  In java, &lt;size:18&gt;every&lt;/size&gt; &lt;u&gt;class&lt;/u&gt;</div><div class="line">  &lt;b&gt;extends&lt;/b&gt;</div><div class="line">  &lt;i&gt;this&lt;/i&gt; one.</div><div class="line">end note</div></pre></td></tr></table></figure>
<p><img src="http://7xjlkb.com1.z0.glb.clouddn.com/umlnote2.png" alt="umlnote"></p>
<h2 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class Foo&lt;? extends Element&gt; &#123;</div><div class="line">  int size()</div><div class="line">&#125;</div><div class="line">Foo *- Element</div></pre></td></tr></table></figure>
<p><img src="http://s.plantuml.com/imgp/h0_classes_017.png" alt="image"></p>
<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">package &quot;Classic Collections&quot; #DDDDDD &#123;</div><div class="line">  Object &lt;|-- ArrayList</div><div class="line">&#125;</div><div class="line"></div><div class="line">package net.sourceforge.plantuml &#123;</div><div class="line">  Object &lt;|-- Demo1</div><div class="line">  Demo1 *- Demo2</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://s.plantuml.com/imgp/h0_classes_019.png" alt="image"></p>
<h2 id="包的样式"><a href="#包的样式" class="headerlink" title="包的样式"></a>包的样式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">scale 750 width</div><div class="line">package foo1 &lt;&lt;Node&gt;&gt; &#123;</div><div class="line">  class Class1</div><div class="line">&#125;</div><div class="line"></div><div class="line">package foo2 &lt;&lt;Rect&gt;&gt; &#123;</div><div class="line">  class Class2</div><div class="line">&#125;</div><div class="line"></div><div class="line">package foo3 &lt;&lt;Folder&gt;&gt; &#123;</div><div class="line">  class Class3</div><div class="line">&#125;</div><div class="line"></div><div class="line">package foo4 &lt;&lt;Frame&gt;&gt; &#123;</div><div class="line">  class Class4</div><div class="line">&#125;</div><div class="line"></div><div class="line">package foo5 &lt;&lt;Cloud&gt;&gt; &#123;</div><div class="line">  class Class5</div><div class="line">&#125;</div><div class="line"></div><div class="line">package foo6 &lt;&lt;Database&gt;&gt; &#123;</div><div class="line">  class Class6</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://s.plantuml.com/imgp/h0_classes_020.png" alt="image"></p>
<h2 id="类之间的关系-1"><a href="#类之间的关系-1" class="headerlink" title="类之间的关系"></a>类之间的关系</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class Student &#123;</div><div class="line">  Name</div><div class="line">&#125;</div><div class="line">Student &quot;0..*&quot; - &quot;1..*&quot; Course</div><div class="line">(Student, Course) .. Enrollment</div><div class="line"></div><div class="line">class Enrollment &#123;</div><div class="line">  drop()</div><div class="line">  cancel()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://s.plantuml.com/imgp/h0_classes_031.png" alt="image"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class Student &#123;</div><div class="line">  Name</div><div class="line">&#125;</div><div class="line">Student &quot;0..*&quot; -- &quot;1..*&quot; Course  //决定因素 就在于 是一个-还是--</div><div class="line">(Student, Course) . Enrollment</div><div class="line"></div><div class="line">class Enrollment &#123;</div><div class="line">  drop()</div><div class="line">  cancel()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://s.plantuml.com/imgp/h0_classes_032.png" alt="image"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux Shell 命令行及脚本编程]]></title>
      <url>/2016/07/03/160703_linuxShellLine/</url>
      <content type="html"><![CDATA[<h2 id="Linux-及-Linux-Shell-简介"><a href="#Linux-及-Linux-Shell-简介" class="headerlink" title="Linux 及 Linux Shell 简介"></a>Linux 及 Linux Shell 简介</h2><p><img src="http://ww3.sinaimg.cn/large/610dc034gw1f5pu0w0r56j20m80rsjuy.jpg" alt="image"></p>
<a id="more"></a>
<h3 id="1-1-5-Linux的理念"><a href="#1-1-5-Linux的理念" class="headerlink" title="1.1.5 Linux的理念"></a>1.1.5 Linux的理念</h3><ul>
<li>小即是美</li>
<li>让程序只做好一件事</li>
<li>可移植性比效率更重要</li>
<li>一切皆文件</li>
<li>使用<code>Shell</code>脚本来提高效率和可移植性</li>
<li>避免使用可定制性低下的用户界面</li>
<li>所有程序都是数据的过滤器</li>
</ul>
<h3 id="1-2-什么是Linux-Shell"><a href="#1-2-什么是Linux-Shell" class="headerlink" title="1.2 什么是Linux Shell"></a>1.2 什么是Linux Shell</h3><ul>
<li><code>Shell</code> 是一个用户程序，或是一个为用户与系统交互提供的环境。</li>
<li><code>Shell</code> 是一个执行从标准输入设备读入命令的语言解释程序。</li>
<li>当你登录活或打开控制台时<code>Shell</code>就会执行。</li>
<li><code>Shell</code> 不是系统内核的一部分，但是它使用系统内核执行程序，创建文件等。</li>
<li><code>Shell</code>进程会提供一个命令行提示符，普通用户用<code>$</code>作提示符，超级用户(<code>root</code>)用<code>#</code>作提示符。</li>
</ul>
<blockquote>
<p><code>Shell</code>编辑和回调命令</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>CTRL + W</td>
<td>删除光标位置钱的单词</td>
</tr>
<tr>
<td>CTRL + U</td>
<td>清空行</td>
</tr>
<tr>
<td>Tab</td>
<td>自动补全文件名的单词</td>
</tr>
<tr>
<td>CTRL + R</td>
<td>搜索先前使用的命令</td>
</tr>
<tr>
<td>CTRL + C</td>
<td>中止当前命令</td>
</tr>
<tr>
<td>CTRL + D</td>
<td>退出登录</td>
</tr>
<tr>
<td>ECS + T</td>
<td>调换光标钱的两个单词</td>
</tr>
<tr>
<td>上/下箭头</td>
<td>删除光标位置钱的单词</td>
</tr>
</tbody>
</table>
<blockquote>
<p>当用户准备结束登陆对话进程时，可以输入<code>logout</code>、<code>exit</code>或<code>CTRL + D</code>组合键结束登录。</p>
</blockquote>
<h3 id="1-3-Shell-的种类"><a href="#1-3-Shell-的种类" class="headerlink" title="1.3 Shell 的种类"></a>1.3 Shell 的种类</h3><ul>
<li><code>Shell</code> 有多种类型，最常用的有三种，<code>Bourne(sh)</code>、<code>C Shell</code>、<code>Korn Shell</code>。</li>
<li>使用 <code>cat /etc/shells</code>命令查看系统中所有可用的Shell。</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>cat   /etc/shells</td>
<td>查看系统中所有可用的Shell</td>
</tr>
<tr>
<td>grep root /etc/passwd</td>
<td>查看用户使用的哪种Shell</td>
</tr>
<tr>
<td>echo $SHELL</td>
<td>查看用户使用的哪种Shell</td>
</tr>
<tr>
<td>ps -p $$</td>
<td>查看用户使用的哪种Shell</td>
</tr>
</tbody>
</table>
<h3 id="1-5-Shell脚本是什么"><a href="#1-5-Shell脚本是什么" class="headerlink" title="1.5 Shell脚本是什么"></a>1.5 Shell脚本是什么</h3><ul>
<li><code>Shell</code> 脚本是<code>Linux/Unix</code>编程环境的重要组成部分。</li>
<li><code>Shell</code> 脚本一般有以下及部分组成。</li>
</ul>
<table>
<thead>
<tr>
<th>解释</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Shell关键字</td>
<td>例如：if…else、for do … done</td>
</tr>
<tr>
<td>Shell 命令</td>
<td>例如:export、echo、exit、pwd、return</td>
</tr>
<tr>
<td>Linux 命令</td>
<td>例如:date、rm、mkdir</td>
</tr>
<tr>
<td>文本处理功能</td>
<td>例如:awk、cut、sed、grep</td>
</tr>
<tr>
<td>函数</td>
<td>例如:通常函数吧一些常用的功能放在一起。例如，/etc/init.d 目录中的大部分或全部系统Shell脚本所使用的函数都包含在文件 /etc/init.d/functions中。</td>
</tr>
<tr>
<td>控制流语句</td>
<td>例如:例如 if…then…else 或 执行重复操作的Shell循环。</td>
</tr>
</tbody>
</table>
<h3 id="1-6-为什么使用Shell脚本"><a href="#1-6-为什么使用Shell脚本" class="headerlink" title="1.6 为什么使用Shell脚本"></a>1.6 为什么使用Shell脚本</h3><blockquote>
<p>使用<code>Shell</code>的简单原因</p>
</blockquote>
<ul>
<li>使用简单</li>
<li>节省时间</li>
<li>可以创建你自己的自动化工具和应用程序</li>
<li>使系统管理任务自动化</li>
<li>因为脚本经过很好的测试，所以使用脚本做类似配置服务或系统管理任务时，发生错误的机会将大大减少。</li>
</ul>
<hr>
<blockquote>
<p>我们经常使用的脚本实例有</p>
</blockquote>
<ul>
<li>监控你的<code>Linux</code>系统</li>
<li>备份数据和创建快照</li>
<li>创建邮件告警系统</li>
<li>查找耗尽系统资源的进程</li>
<li>查找是否所有的网络服务都正常运行等等。</li>
</ul>
<h3 id="1-7-创建你的第一个Shell-脚本"><a href="#1-7-创建你的第一个Shell-脚本" class="headerlink" title="1.7 创建你的第一个Shell 脚本"></a>1.7 创建你的第一个Shell 脚本</h3><ul>
<li>一个<code>Shell</code>脚本就是一个包含<code>ASCII</code>文本的文件。</li>
</ul>
<blockquote>
<p>如果你像成功的写一个<code>Shell</code>脚本，你需要做一下三件事情。</p>
<ul>
<li>写一个脚本</li>
<li>允许<code>Shell</code>执行它</li>
<li>把它放在<code>Shell</code>可以找到的地方</li>
</ul>
</blockquote>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash				(1)</div><div class="line"># My First Script		(2)</div><div class="line">ls -l .*				(3)</div></pre></td></tr></table></figure>
<ul>
<li>脚本的第一行是很重要的，他是一个告诉<code>Shell</code>使用什么程序解释器的特别指示。</li>
<li>上面例子中使用的是<code>/bin/bash</code>。如果使用其他脚本语言比如<code>Perl</code>、<code>awk</code>、<code>python</code>等也同样使用这个机制。</li>
<li>脚本的第二行是一个注释。每一行中出现在<code>#</code>符号后面的任何内容都将被<code>bash</code>忽略。</li>
<li>默认情况下，<code>Linux</code>是不允许文件执行的（权限不足）,使用下面命令赋予权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chmod 755 myscript</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>权限</th>
<th>注释</th>
</tr>
</thead>
<tbody>
<tr>
<td>777</td>
<td>全部权限</td>
</tr>
<tr>
<td>755</td>
<td>读写和执行的权限</td>
</tr>
<tr>
<td>700</td>
<td>脚本私有，只有你可以读写和执行</td>
</tr>
</tbody>
</table>
<ul>
<li>切换到你保存脚本的目录，执行脚本。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./ myscript</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="初识Linux-Shell"><a href="#初识Linux-Shell" class="headerlink" title="初识Linux Shell"></a>初识Linux Shell</h2><h3 id="2-1-Bash-Shell"><a href="#2-1-Bash-Shell" class="headerlink" title="2.1 Bash Shell"></a>2.1 Bash Shell</h3><h3 id="2-1-1-Bash-简介"><a href="#2-1-1-Bash-简介" class="headerlink" title="2.1.1 Bash 简介"></a>2.1.1 Bash 简介</h3><ul>
<li><code>Bash</code>是一个与<code>Bourne Shell</code>兼容的、执行从输入设备或文件读取命令的命令语言解释器。</li>
<li><code>Bash</code> 与原来的<code>Unix sh Shell</code>向后兼容，并且融合了一些有用的<code>Korn Shell</code> 和 <code>C Shell</code>的特性。它相对于<code>sh</code>在编程和交互式使用两方面都做了功能改进。</li>
<li><code>Bash</code>具有很好的一致性，它使用构建时发现编译平台特征的配置系统，因此可以构建在几乎任何一种<code>Unix</code>版本上。</li>
</ul>
<h3 id="2-1-2-Bash-提供的改进"><a href="#2-1-2-Bash-提供的改进" class="headerlink" title="2.1.2 Bash 提供的改进"></a>2.1.2 Bash 提供的改进</h3><ul>
<li><code>Bash</code> 语法是<code>Bourne Shell</code> 语法的一个改进版本。大多数情况下<code>Bourne Shel</code>l脚本可以被<code>Bash</code>正常地运行。</li>
</ul>
<h2 id="2-2-Shell-在Linux环境中的角色"><a href="#2-2-Shell-在Linux环境中的角色" class="headerlink" title="2.2 Shell 在Linux环境中的角色"></a>2.2 Shell 在Linux环境中的角色</h2><h3 id="2-2-1-与登录Shell相关的文件"><a href="#2-2-1-与登录Shell相关的文件" class="headerlink" title="2.2.1 与登录Shell相关的文件"></a>2.2.1 与登录Shell相关的文件</h3><ul>
<li>用户登录时<code>Bash</code>将会使用以下初始化文件和启动脚本。</li>
</ul>
<table>
<thead>
<tr>
<th>文件目录</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/etc/profile</code></td>
<td>系统级的初始化文件，定义了一些环境变量，由登录<code>Shell</code>调用执行</td>
</tr>
<tr>
<td><code>/etc/bash.bashrc</code> 、 <code>/etc/bashrc</code></td>
<td>其文件名根据不同的<code>Linux</code>发行版本而异，每个交互式Shell的系统级的启动脚本，定义了一些函数和别名</td>
</tr>
<tr>
<td><code>/etc/bash.logout</code></td>
<td>系统级的登录<code>Shell</code>清理脚本，当登录<code>Shell</code>退出时执行，部分<code>Linux</code>发行版默认没有此文件</td>
</tr>
<tr>
<td><code>$HOME/.bash_profile</code>、<code>$HOME/.bash_login</code>、<code>$HOME/.profile</code></td>
<td>用户个人初始化脚本，由登录Shell调用执行。这三个脚本只有一个会被执行，按照此顺序查找，第一个才能在的将被执行。</td>
</tr>
<tr>
<td><code>$Home/.bashrc</code></td>
<td>用户个人的每个交互式<code>Shell</code>的启动脚本</td>
</tr>
<tr>
<td><code>$HOME/.bash_logout</code></td>
<td>用户个人的登录<code>Shell</code>清理脚本，当登录<code>Shell</code>退出时执行</td>
</tr>
<tr>
<td><code>$HOME/.inputrc</code></td>
<td>用户个人的由<code>readline</code>使用的启动脚本，定义了处理某些情况下的键盘映射</td>
</tr>
</tbody>
</table>
<h3 id="2-2-2-Bash-启动脚本"><a href="#2-2-2-Bash-启动脚本" class="headerlink" title="2.2.2 Bash 启动脚本"></a>2.2.2 Bash 启动脚本</h3><ul>
<li>在用户登录时自动执行的脚本主要用来设置一些环境变量，例如设置<code>JAVA_HOME</code>的路径。</li>
</ul>
<table>
<thead>
<tr>
<th>目录</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/etc/profile</code></td>
<td>当用户在运行级别3登录系统时首先运行</td>
</tr>
<tr>
<td><code>/etc/profile.d</code></td>
<td>当<code>/etc/profile</code>运行时，会调用该目录下的脚本</td>
</tr>
<tr>
<td><code>$HOME/.bash_profile</code>、<code>$HOME/.bash_login</code>和<code>$HOME/.profile</code></td>
<td>在<code>/etc/profile</code>运行后第一个存在的被运行</td>
</tr>
<tr>
<td><code>$HOME/.bashrc</code></td>
<td>上述脚本的第一个运行后即调用此脚本</td>
</tr>
<tr>
<td><code>/etc/bashrc</code></td>
<td>将被<code>$HOME/.bashrc</code>调用运行</td>
</tr>
<tr>
<td><code>/etc/profile.d</code></td>
<td>此目录下的脚本将被<code>/etc/bashrc</code>或<code>/etc/bash.bashrc</code>调用运行</td>
</tr>
</tbody>
</table>
<blockquote>
<p><code>Bash</code>启动脚本主要设置的环境有</p>
</blockquote>
<ul>
<li>设置环境变量<code>PATH</code>和<code>PSI</code></li>
<li>通过变量<code>EDITOR</code>设置默认的文本编辑器</li>
<li>设置默认的<code>umask</code>（文件或目录的权限属性）</li>
<li>覆盖活移除不想要的变量或别名</li>
<li>设置别名</li>
<li>加载函数</li>
</ul>
<h3 id="2-2-3-定制自己的Bash登录脚本"><a href="#2-2-3-定制自己的Bash登录脚本" class="headerlink" title="2.2.3 定制自己的Bash登录脚本"></a>2.2.3 定制自己的Bash登录脚本</h3><h3 id="2-2-4-Bash-退出脚本"><a href="#2-2-4-Bash-退出脚本" class="headerlink" title="2.2.4 Bash 退出脚本"></a>2.2.4 Bash 退出脚本</h3><blockquote>
<p>当登录<code>Shell</code>退出时，如果<code>$HOME/.bash_logout</code>脚本存在的话，Bash会读取并执行脚本的内容，此脚本的主要用途：</p>
</blockquote>
<ul>
<li>使用<code>clear</code>命令清理你的屏幕终端输出</li>
<li>移除一些临时文件</li>
<li>自动运行一些命令或脚本等</li>
</ul>
<h3 id="2-2-5-定制自己的Bash-退出脚本"><a href="#2-2-5-定制自己的Bash-退出脚本" class="headerlink" title="2.2.5 定制自己的Bash 退出脚本"></a>2.2.5 定制自己的Bash 退出脚本</h3><h3 id="2-2-6-有效的登录Shell路径"><a href="#2-2-6-有效的登录Shell路径" class="headerlink" title="2.2.6 有效的登录Shell路径"></a>2.2.6 有效的登录<code>Shell</code>路径</h3><ul>
<li><code>/etc/shells</code> 是一个包含有效的登录<code>Shell</code>全路径名的文本文件，这个文件会被<code>chsh</code>命令（变更你的登录Shell）所使用也可被其他程序查询使用。比如<code>ftp</code>服务，查看<code>etc/shells</code>的内容。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/shells</div><div class="line">out:</div><div class="line">/bin/sh</div><div class="line">/bin/bash</div><div class="line">/bin/nologin</div><div class="line">/bin/tcsh</div><div class="line">/bin/cs</div><div class="line">/bin/ksh</div></pre></td></tr></table></figure>
<blockquote>
<p>你也可以使用which命令显示shell的全路径</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ which bash</div><div class="line">out:	</div><div class="line">/bin/bash</div></pre></td></tr></table></figure>
<h2 id="2-3-SHell中的变量"><a href="#2-3-SHell中的变量" class="headerlink" title="2.3 SHell中的变量"></a>2.3 SHell中的变量</h2><h3 id="2-3-1-Shell-中变量的类型"><a href="#2-3-1-Shell-中变量的类型" class="headerlink" title="2.3.1 Shell 中变量的类型"></a>2.3.1 Shell 中变量的类型</h3><ul>
<li>Shell中有两种变量的类型：系统变量（环境变量）和用户自定义的变量（本地变量或Shell变量）</li>
<li>系统变量由<code>Linux Bash Shell</code> 创建和维护的变量，你可以通过修改系统变量，如<code>PS1</code>、<code>PATH</code>、<code>LANG</code>、<code>HISTSIZE</code>、<code>ISPLAY</code>等，配置<code>Shell</code>的样式</li>
<li>常用的系统变量（环境变量）</li>
</ul>
<table>
<thead>
<tr>
<th>系统变量</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>BASH_VERSION</code></td>
<td>保存<code>bash</code>实例的版本</td>
</tr>
<tr>
<td><code>DISPLAY</code></td>
<td>设置<code>X display</code>名字</td>
</tr>
<tr>
<td><code>EDITOR</code></td>
<td>设置默认的文本编辑器</td>
</tr>
<tr>
<td><code>HISTFILE</code></td>
<td>保存命令历史的文件名</td>
</tr>
<tr>
<td><code>HISTFILESIZE</code></td>
<td>命令历史文件所能包含的最大行数</td>
</tr>
<tr>
<td><code>HISTSIZE</code></td>
<td>记录在命令历史中的命令数</td>
</tr>
<tr>
<td><code>HOME</code></td>
<td>当前用户的主目录</td>
</tr>
<tr>
<td><code>HOSTNAME</code></td>
<td>你的计算机的主机名</td>
</tr>
<tr>
<td><code>IFS</code></td>
<td>定义<code>Shell</code>的内部字段分隔符，一般是空格符、制表符和换行符</td>
</tr>
<tr>
<td><code>PATH</code></td>
<td>搜索命令的路径。它是以冒号分隔的目录列表。<code>Linux</code>下的标准命令之所以能在<code>Shell</code>命令行下的任何路径直接使用，就是因为这些标准命令所在的目录的路径定义在了<code>PATH</code>变量中，<code>Shell</code>会在<code>PATH</code>环境变量指定的全部路径中搜索任何匹配的可执行文件</td>
</tr>
<tr>
<td><code>PS1</code></td>
<td>你的提示符设定</td>
</tr>
<tr>
<td><code>PWD</code></td>
<td>当前工作目录。由<code>cd</code>命令设置</td>
</tr>
<tr>
<td><code>SHELL</code></td>
<td>设置登录<code>Shell</code>的路径</td>
</tr>
<tr>
<td><code>TERM</code></td>
<td>设置你的登录终端的类型</td>
</tr>
<tr>
<td><code>TMOUT</code></td>
<td>用于<code>Shell</code>内建命令<code>read</code>的默认超时时间。单位为秒。在交互式的<code>Shell</code>中，此变量的值作为发出命令后等待用户输入的秒数，如果没有输入用户将会自动退出</td>
</tr>
</tbody>
</table>
<ul>
<li>你可以添加上述变量到你账号的home目录下的初始化文件中，比如<code>~/.bash_profile</code>文件。这样每次登录系统时，这些变量会自动设置成你需要的值。</li>
<li>使用<code>env</code>或者<code>printenv</code>查看当前<code>Shell</code>的所有系统变量。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ env</div><div class="line">或者</div><div class="line">$ printenv</div><div class="line">out:</div><div class="line">USER=BENNY</div><div class="line">LOGNAME=BENNY</div><div class="line">HOME=/home/usr</div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="2-3-2-如何自定义变量和给变量赋值"><a href="#2-3-2-如何自定义变量和给变量赋值" class="headerlink" title="2.3.2 如何自定义变量和给变量赋值"></a>2.3.2 如何自定义变量和给变量赋值</h3><ul>
<li>在<code>Shell</code>中创建和设置变量是很简单的，其语法如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">varName=varValue</div></pre></td></tr></table></figure>
<blockquote>
<p>使用<code>=</code>给变量赋值，输入的次序是：<code>变量名</code>、<code>赋值操作符</code>、<code>赋予的值</code>。<br>赋值操作符<strong><code>=</code></strong>的周围<strong>不要有任何空格</strong>,比如下面的变量定义将会得到<code>command not found</code>的错误。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">varName=  varValue</div><div class="line">varName  =varValue</div><div class="line">varName=  varValue</div></pre></td></tr></table></figure>
<ul>
<li>可以将任意字符集合复制给一个变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ username=&quot;benny&quot;</div></pre></td></tr></table></figure>
<ul>
<li>或者</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ username=benny</div></pre></td></tr></table></figure>
<ul>
<li>将一个数字复制给变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ var=1</div></pre></td></tr></table></figure>
<ul>
<li>需要注意的是Shell的默认复制是字符串赋值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ var=$var+1</div><div class="line">$ echo $var</div><div class="line">out:</div><div class="line">1+1</div></pre></td></tr></table></figure>
<ul>
<li>在<code>Bash</code>中，要将算数表达式的数值给一个变量，可以使用<strong><code>let</code></strong>命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ let var=2+1</div><div class="line">$ echo $var</div><div class="line">out:</div><div class="line">3</div></pre></td></tr></table></figure>
<ul>
<li>将一个变量的值直接复制给另一个变量，如下所示：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ a=3</div><div class="line">$ b=$a</div><div class="line">$ echo $b</div><div class="line">out:</div><div class="line">3</div></pre></td></tr></table></figure>
<ul>
<li>将命令的执行结果复制给变量，如下所示：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ var=$(pwd)</div><div class="line">$ echo $var</div><div class="line">out：</div><div class="line">/home/benny</div></pre></td></tr></table></figure>
<ul>
<li>将<code>Bash</code>的内置命令<code>read</code>读入的内容复制给变量：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ echo -n &quot;Enter var:&quot;; read var</div><div class="line">Enter var:	此处需要你自己输入（比如输入520）</div><div class="line">$ echo $var</div><div class="line">out:</div><div class="line">520</div></pre></td></tr></table></figure>
<h3 id="2-3-3-变量命名规则"><a href="#2-3-3-变量命名规则" class="headerlink" title="2.3.3 变量命名规则"></a>2.3.3 变量命名规则</h3><ul>
<li>变量名必须以<strong>字母</strong>或<strong>下划线</strong>字符<strong><code>_</code></strong>开头，后面跟字母、数字或下划线字符，第一个字符不能为数字。不要使用<strong><code>？</code></strong> <strong><code>、</code></strong> <strong><code>*</code></strong>和其他特殊字符命名你的变量。</li>
<li>变量名是大小写敏感的，比如定义几个变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ echo $var</div><div class="line">out:	123</div><div class="line">$ echo $Var</div><div class="line">out:	1</div><div class="line">$ echo $vAR</div><div class="line">out:	2</div><div class="line">$ echo $VAR</div><div class="line">out:	3</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-3-4-实例：使用echo和printf-打印变量的值"><a href="#2-3-4-实例：使用echo和printf-打印变量的值" class="headerlink" title="2.3.4 实例：使用echo和printf 打印变量的值"></a>2.3.4 实例：使用echo和printf 打印变量的值</h3><ul>
<li>使用echo命令显示变量值，还可以使用printf命令显示变量值。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ var=123</div><div class="line">$ printf &quot;%s\n&quot; $var</div><div class="line">out:</div><div class="line">123</div></pre></td></tr></table></figure>
<ul>
<li>printf 命令的语法格式如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">printf &lt;FORMAT&gt; &lt;ARGUMENTS...&gt;</div></pre></td></tr></table></figure>
<ul>
<li>一个典型的    <code>printf</code>命令调用如下所示：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">printf &quot;FirstName&quot; : %s\nLastName:%s&quot;  &quot;$FIRSTNAME&quot;  &quot;LASTNAME&quot;</div></pre></td></tr></table></figure>
<ul>
<li><code>$FIRSTNAME</code>是格式规范，而后面的两个变量则是作为参数传入。格式用字符串中的<code>%s</code>是指示打印参数的格式类型的分类符，这些分类符有不同的名字。</li>
<li>分类符表</li>
<li>参考书中<code>page</code>20</li>
<li>转义字符表</li>
<li>参考书中<code>page</code>20</li>
<li>与<code>printf</code>命令不同，<code>echo</code>命令没有提供格式化选项，因此<code>echo</code>命令比<code>printf</code>命令简单易用</li>
<li><code>echo</code>命令也提供转义字符的功能，可以是用转义字符与<code>printf</code>命令中的基本相同，但需使用<code>-e</code>选项激活转义字符功能。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ var=10</div><div class="line">$ echo &quot;the number is $var&quot;</div><div class="line">out:</div><div class="line">the number is 10</div><div class="line">$ echo -e &quot;Username: $USER\tHome directory:$HOME\n&quot;</div><div class="line">out:</div><div class="line">Username:benny Home directory: /home/beny</div></pre></td></tr></table></figure>
<ul>
<li>有时，你需要使用<strong><code>${}</code></strong>避免一些歧义</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ LOGDIR=&quot;/var/log/&quot;</div><div class="line">$ echo &quot;the log file is $LOGDIRmessage&quot;</div><div class="line">out:</div><div class="line">the log file is</div></pre></td></tr></table></figure>
<ul>
<li>Bash将尝试找一个LOGDIRmessages的变量，而不是$LOGDIR,为了避免这种歧义，我们需要使用${}语法，如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo &quot;the log file is $&#123;LOGDIR&#125;messages&quot;</div><div class="line">the log file is /var/log/messages</div></pre></td></tr></table></figure>
<h3 id="2-3-5-变量的引用"><a href="#2-3-5-变量的引用" class="headerlink" title="2.3.5 变量的引用"></a>2.3.5 变量的引用</h3><ul>
<li>引用一个变量的时候，最好使用双引号将变量名括起来。例如：`”$cariable”‘</li>
<li>这样可以防止被引用的变量值中的特殊字符（除：$、<code>&#39;</code>和<code>\</code>）被解释为其他错误含义。</li>
<li>使用双引号可以防止变量中的值中由多个单词租车发给你的字符串分离，一个双引号括起来的变量使它自身编程一个单一词组，即使值中包含空格。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ var]# for var in $list</div><div class="line">&gt; do </div><div class="line">&gt; echo &quot;$var&quot;</div><div class="line">&gt; done</div><div class="line"></div><div class="line">one</div><div class="line">two</div><div class="line">three</div><div class="line"></div><div class="line">[root@iZ251k7t70aZ var]# for var in &quot;$list&quot;</div><div class="line">&gt; do echo &quot;$var&quot;</div><div class="line">&gt; done</div><div class="line"></div><div class="line">one two three</div></pre></td></tr></table></figure>
<ul>
<li><code>注意：</code> 单引号的操作类似与双引号，但是它不允许引用变量，因为在单引号中字符<code>&#39;$&#39;</code>的特殊含义将会失效。每个特殊的字符，除了字符<code>&#39;</code>，都将按字面含义解释。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ var]# var=123</div><div class="line">[root@iZ251k7t70aZ var]# echo &apos;$var&apos;</div><div class="line">$var</div><div class="line">[root@iZ251k7t70aZ var]# echo &quot;$var&quot;</div><div class="line">123</div></pre></td></tr></table></figure>
<h3 id="2-3-6-export"><a href="#2-3-6-export" class="headerlink" title="2.3.6 export"></a>2.3.6 export</h3><ul>
<li>使用<code>export</code>命令可以将变量被子<code>Shell</code>引用，可以使用<code>export</code>命令将变量进行输出</li>
</ul>
<blockquote>
<p>命令：export [-fnp] [变量或函数名称]=[变量设置值] </p>
</blockquote>
<ul>
<li><code>-f</code>表示<code>export</code>的一个函数；<code>-n</code>表示将<code>export</code>属性从指定变量多函数上移除   <code>p</code>表示打印当前Shell所有输出的变量，与单独执行<code>export</code>命令结果相同</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[root@iZ251k7t70aZ var]# echo $$</div><div class="line">17691</div><div class="line">[root@iZ251k7t70aZ var]# java_home=/usr/local</div><div class="line">[root@iZ251k7t70aZ var]# echo $java_home</div><div class="line">/usr/local</div><div class="line">[root@iZ251k7t70aZ var]# bash</div><div class="line">[root@iZ251k7t70aZ var]# echo $$</div><div class="line">17738</div><div class="line">[root@iZ251k7t70aZ var]# echo $java_home</div><div class="line"></div><div class="line">[root@iZ251k7t70aZ var]# exit</div><div class="line">exit</div><div class="line">[root@iZ251k7t70aZ var]# export java_home</div><div class="line">[root@iZ251k7t70aZ var]# bash</div><div class="line">[root@iZ251k7t70aZ var]# echo $$</div><div class="line">17750</div><div class="line">[root@iZ251k7t70aZ var]# echo $java_home</div><div class="line">/usr/local</div><div class="line">[root@iZ251k7t70aZ var]# bash</div><div class="line">[root@iZ251k7t70aZ var]# echo $$</div><div class="line">17762</div><div class="line">[root@iZ251k7t70aZ var]# echo $java_home </div><div class="line">/usr/local</div><div class="line">[root@iZ251k7t70aZ var]#</div></pre></td></tr></table></figure>
<blockquote>
<p>系统变量会自动输出到后续命令的执行环境</p>
</blockquote>
<hr>
<h3 id="2-3-7-如何删除变量"><a href="#2-3-7-如何删除变量" class="headerlink" title="2.3.7　如何删除变量"></a>2.3.7　如何删除变量</h3><ul>
<li><code>bash</code>下使用<code>unset</code>命令来删除相应的变量或函数。unsert命令会自动</li>
</ul>
<blockquote>
<p>命令： unset [-fv] [变量或函数名称]</p>
</blockquote>
<ul>
<li><code>-f</code>选项表示删除一个已定义的函数；<code>-v</code>选项表示删除一个变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ var]# echo $java_home</div><div class="line">/usr/local</div><div class="line">[root@iZ251k7t70aZ var]# unset java_home</div><div class="line">[root@iZ251k7t70aZ var]# echo $java_home</div></pre></td></tr></table></figure>
<blockquote>
<p>使用<code>unset</code>命令不能删除一个只读的变量，否则将会出现类似如下的错误：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ var]# readonly java_home=/usr/local</div><div class="line">[root@iZ251k7t70aZ var]# echo $java_home</div><div class="line">/usr/local</div><div class="line">[root@iZ251k7t70aZ var]# unset java_home</div><div class="line">bash: unset: java_home: cannot unset: readonly variable</div></pre></td></tr></table></figure>
<h3 id="2-3-8-如何检查变量是否存在"><a href="#2-3-8-如何检查变量是否存在" class="headerlink" title="2.3.8 如何检查变量是否存在"></a>2.3.8 如何检查变量是否存在</h3><blockquote>
<p>命令：${ varName? ERROR : The Varibale is not defined}</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ var]# JAVA_HOME=/usr/local</div><div class="line">[root@iZ251k7t70aZ var]# echo $&#123;JAVA_HOME?ERROR:The variable is not defined&#125;</div><div class="line">/usr/local</div><div class="line">[root@iZ251k7t70aZ var]# unset JAVA_HOME</div><div class="line">[root@iZ251k7t70aZ var]# echo $&#123;JAVA_HOME?ERROR:The variable is not defined&#125;</div><div class="line">bash: JAVA_HOME: ERROR:The variable is not defined</div><div class="line">[root@iZ251k7t70aZ var]#</div></pre></td></tr></table></figure>
<h2 id="2-4-Shell环境进阶"><a href="#2-4-Shell环境进阶" class="headerlink" title="2.4 Shell环境进阶"></a>2.4 Shell环境进阶</h2><h3 id="2-4-1-回调历史命令"><a href="#2-4-1-回调历史命令" class="headerlink" title="2.4.1 回调历史命令"></a>2.4.1 回调历史命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ var]# history</div><div class="line">   44  ls</div><div class="line">   45  ./startup.sh</div><div class="line">   46  cd /usr</div><div class="line">   47  ls</div><div class="line">   48  cd local/</div><div class="line">   49  ls</div><div class="line">   50  c dtom</div><div class="line">   51  cd tomcat7/</div></pre></td></tr></table></figure>
<ul>
<li>在命令提示符下，可以通过<code>CTRL + R</code> 组合键输入相应的关键字可以搜索命令</li>
<li>在<code>Shell</code>命令提示符下，可以简单的输入!!，来重复执行上一条执行过的命令</li>
<li>你还可以回调最近一次执行的以指定字符开头的命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ var]# ls</div><div class="line">account  cache  cvs  db  empty  games  lib  local  lock  log  mail  nis  opt  preserve  racoon  run  spool  tmp  www  yp</div><div class="line">[root@iZ251k7t70aZ var]# !l</div><div class="line">ls</div><div class="line">account  cache  cvs  db  empty  games  lib  local  lock  log  mail  nis  opt  preserve  racoon  run  spool  tmp  www  yp</div></pre></td></tr></table></figure>
<ul>
<li>你可以使用由history命令列出的列表的行号来重新调用响应的命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ var]# history</div><div class="line"> 1052  ls -l</div><div class="line"> 1053  clear</div><div class="line"> 1054  ls</div><div class="line"> 1055  ls</div><div class="line"> 1056  clear</div><div class="line"> 1057  history</div><div class="line">[root@iZ251k7t70aZ var]# !1055</div><div class="line">ls</div><div class="line">account  cache  cvs  db  empty  games  lib  local  lock  log  mail  nis  opt  preserve  racoon  run  spool  tmp  www  yp</div><div class="line">[root@iZ251k7t70aZ var]#</div></pre></td></tr></table></figure>
<h3 id="2-4-2-Shell中的拓展"><a href="#2-4-2-Shell中的拓展" class="headerlink" title="2.4.2 Shell中的拓展"></a>2.4.2 Shell中的拓展</h3><ul>
<li><p><code>Shell</code>中的拓展有<strong>8</strong>中，分别是</p>
<ul>
<li>大括号拓展</li>
<li>波浪号拓展</li>
<li>参数和变量拓展</li>
<li>命令替换</li>
<li>算数拓展</li>
<li>进程替换</li>
<li>单词拆分</li>
<li>文件名拓展</li>
</ul>
</li>
<li><p>大括号拓展</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ var]# echo a&#123;b,c,d&#125;e</div><div class="line">abe ace ade</div><div class="line">[root@iZ251k7t70aZ var]# echo &#123;a..z&#125;</div><div class="line">a b c d e f g h i j k l m n o p q r s t u v w x y z</div><div class="line">[root@iZ251k7t70aZ var]# echo &#123;0..10&#125;</div><div class="line">0 1 2 3 4 5 6 7 8 9 10</div><div class="line">[root@iZ251k7t70aZ var]# echo &#123;5..-3&#125;</div><div class="line">5 4 3 2 1 0 -1 -2 -3</div><div class="line">[root@iZ251k7t70aZ var]# echo &#123;g..a&#125;</div><div class="line">g f e d c b a</div><div class="line">[root@iZ251k7t70aZ var]# </div><div class="line">[root@iZ251k7t70aZ var]# echo &#123;a..c&#125;&#123;1..3&#125;</div><div class="line">a1 a2 a3 b1 b2 b3 c1 c2 c3</div><div class="line">[root@iZ251k7t70aZ var]# echo a&#123;&#123;b,c,d&#125;a,&#123;e,f,g&#125;b,h&#125;i</div><div class="line">abai acai adai aebi afbi agbi ahi</div><div class="line">[root@iZ251k7t70aZ var]#</div></pre></td></tr></table></figure>
<ul>
<li>大括号可以拓展许多命令配合使用，使你的命令更简化</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 在当前文件夹下创建dir1 dir2 dir3</div><div class="line">[root@iZ251k7t70aZ local]# ls</div><div class="line">aegis  bin  etc  filedirectroy  games  include  lib  lib64  libexec  mvnreporsitory  mysql  pic  sbin  share  src  tomcat7</div><div class="line">[root@iZ251k7t70aZ local]# mkdir &#123;dir1,dir2,dir3&#125;</div><div class="line">[root@iZ251k7t70aZ local]# ls</div><div class="line">aegis  bin  dir1  dir2  dir3  etc  filedirectroy  games  include  lib  lib64  libexec  mvnreporsitory  mysql  pic  sbin  share  src  tomcat7</div><div class="line">[root@iZ251k7t70aZ local]# </div><div class="line"></div><div class="line"># 在当前文件夹下创建 dir1 dir2 dir3</div><div class="line">[root@iZ251k7t70aZ usr]# mkdir / &#123;dir1,dir2&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>Bash</code>4.0中还提供给了一些大括号的新功能，比如在序列表达式中指定一个增量<code>&lt;INCR&gt;</code></li>
</ul>
<blockquote>
<p>语法如下: {<start>..<end>..<incr>}</incr></end></start></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo &#123;1..10..2&#125;</div><div class="line">1   3   5   7   9</div></pre></td></tr></table></figure>
<ul>
<li>波浪号扩展可以用来指代你自己的主目录，或其他人的主目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ benny]# cd ~             #进入自己的主目录</div><div class="line">[root@iZ251k7t70aZ ~]# pwd</div><div class="line">/root</div><div class="line">[root@iZ251k7t70aZ ~]# cd ~benny            #进入benny的主目录</div><div class="line">[root@iZ251k7t70aZ benny]# pwd</div><div class="line">/home/benny</div><div class="line">[root@iZ251k7t70aZ benny]#</div></pre></td></tr></table></figure>
<ul>
<li><p><code>Bash</code>支持一下三种方式来实现文件名拓展</p>
<ul>
<li><code>*</code>    匹配任何字符串，包括空字符串</li>
<li><code>？</code>   匹配任意单个字符</li>
<li><code>[...]</code>匹配方括号内的任意字符</li>
</ul>
</li>
<li><p>列出所有以字母a或b开头的配置文件</p>
</li>
</ul>
<blockquote>
<p>ls /etc/[ab]*.conf</p>
</blockquote>
<h2 id="创建和使用别名"><a href="#创建和使用别名" class="headerlink" title="创建和使用别名"></a>创建和使用别名</h2><ul>
<li>在Linux系统环境下，我们通常需要使用命令行来处理一些任务，并且会很频繁的使用某些命令语句，为了节省时间，我们可以在文件<code>~/.bashrc</code>中为这些命令语句创建别名。</li>
</ul>
<blockquote>
<p>一旦你修改了<code>~/.bashrc</code>文件，你必须重新启动<code>Shell</code>后，新的设置才会生效。</p>
</blockquote>
<ul>
<li>语法如下：</li>
</ul>
<blockquote>
<p> alias name=’command’</p>
</blockquote>
<pre><code>+ name 用户自定义的用于别名的任意简短字符
+ command  任意linux命令
</code></pre><ul>
<li>打开当前目录下最后被修改的文件</li>
</ul>
<blockquote>
<p>alias Vim=’vim -ls -t | head -1’’</p>
</blockquote>
<ul>
<li>找出当前目录下，5个最大的文件</li>
</ul>
<blockquote>
<p>alias findbig=’find . -type f -exec ls -s {} \;’ | sort -n -r | head -5’</p>
</blockquote>
<ul>
<li><p>列出当前目录下所有文件，包括隐藏文件，并附加指示符和颜色表识</p>
<blockquote>
<p>  alias ls=’ls -aF –color==always’</p>
</blockquote>
</li>
<li><p>清楚全部历史命令记录和屏幕</p>
<blockquote>
<p>alias hcl=’history -c; clear’</p>
</blockquote>
</li>
<li><p>查看磁盘控件使用情况</p>
<blockquote>
<p>alias dus=’df -h’</p>
</blockquote>
</li>
<li><p>切换到不同目录</p>
<blockquote>
<p>alias ..=’cd ..’<br>alias …=’cd ../..’</p>
</blockquote>
</li>
<li><p><code>alias</code>命令查看所有别名</p>
</li>
<li><p>查看一个特定的别名</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ /]# alias dus=&apos;df -h&apos;</div><div class="line">[root@iZ251k7t70aZ /]# dus</div><div class="line">Filesystem            Size  Used Avail Use% Mounted on</div><div class="line">/dev/hda1              20G  7.7G   11G  42% /</div><div class="line">tmpfs                 501M     0  501M   0% /dev/shm</div><div class="line">[root@iZ251k7t70aZ /]# alias dus</div><div class="line">alias dus=&apos;df -h&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>当你想调用实际的命令而暂时停止使用别名</p>
<blockquote>
<p>$ \aliasname</p>
</blockquote>
</li>
<li><p>删除一个别名 <code>unalias</code></p>
<blockquote>
<p>unalias dus</p>
</blockquote>
</li>
<li><p>删除所有别名</p>
<blockquote>
<p>unalias -a</p>
</blockquote>
</li>
</ul>
<h2 id="2-4-4-修改Bash提示符"><a href="#2-4-4-修改Bash提示符" class="headerlink" title="2.4.4 修改Bash提示符"></a>2.4.4 修改<code>Bash</code>提示符</h2><blockquote>
<p>此处没懂</p>
</blockquote>
<h2 id="2-4-5-设置Shell选项"><a href="#2-4-5-设置Shell选项" class="headerlink" title="2.4.5 设置Shell选项"></a>2.4.5 设置<code>Shell</code>选项</h2><ul>
<li><code>set</code>可以设置的<code>Bash</code>选项</li>
</ul>
<blockquote>
<p>语法： set(选项)(参数)</p>
</blockquote>
<table>
<thead>
<tr>
<th>选项</th>
<th>注释</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a：</td>
<td>标示已修改的变量，以供输出至环境变量。</td>
</tr>
<tr>
<td>-b：</td>
<td>使被中止的后台程序立刻回报执行状态。</td>
</tr>
<tr>
<td>-C：</td>
<td>转向所产生的文件无法覆盖已存在的文件。</td>
</tr>
<tr>
<td>-d：</td>
<td>Shell预设会用杂凑表记忆使用过的指令，以加速指令的执行。使用-d参数可取消。</td>
</tr>
<tr>
<td>-e：</td>
<td>若指令传回值不等于0，则立即退出shell。</td>
</tr>
<tr>
<td>-f：</td>
<td>取消使用通配符。</td>
</tr>
<tr>
<td>-h：</td>
<td>自动记录函数的所在位置。</td>
</tr>
<tr>
<td>-H</td>
<td>Shell：可利用”!”加&lt;指令编号&gt;的方式来执行history中记录的指令。</td>
</tr>
<tr>
<td>-k：</td>
<td>指令所给的参数都会被视为此指令的环境变量。</td>
</tr>
<tr>
<td>-l：</td>
<td>记录for循环的变量名称。</td>
</tr>
<tr>
<td>-m：</td>
<td>使用监视模式。</td>
</tr>
<tr>
<td>-n：</td>
<td>只读取指令，而不实际执行。</td>
</tr>
<tr>
<td>-p：</td>
<td>启动优先顺序模式。</td>
</tr>
<tr>
<td>-P：</td>
<td>启动-P参数后，执行指令时，会以实际的文件或目录来取代符号连接。</td>
</tr>
<tr>
<td>-t：</td>
<td>执行完随后的指令，即退出shell。</td>
</tr>
<tr>
<td>-u：</td>
<td>当执行时使用到未定义过的变量，则显示错误信息。</td>
</tr>
<tr>
<td>-v：</td>
<td>显示shell所读取的输入值。</td>
</tr>
<tr>
<td>-x：</td>
<td>执行指令后，会先显示该指令及所下的参数。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>参数</th>
<th>状态</th>
<th>注释</th>
</tr>
</thead>
<tbody>
<tr>
<td>allexport</td>
<td>off</td>
<td>从设置开始标记所有新的和修改过的用于输出的变量                          </td>
</tr>
<tr>
<td>braceexpand</td>
<td>on</td>
<td>允许符号扩展,默认选项  </td>
</tr>
<tr>
<td>emacs</td>
<td>on</td>
<td>在进行命令编辑的时候,使用内建的emacs编辑器, 默认选项</td>
</tr>
<tr>
<td>errexit</td>
<td>off</td>
<td>如果一个命令返回一个非0退出状态值(失败),就退出.</td>
</tr>
<tr>
<td>errtrace</td>
<td>off</td>
</tr>
<tr>
<td>functrace</td>
<td>off</td>
</tr>
<tr>
<td>hashall</td>
<td>on</td>
</tr>
<tr>
<td>histexpand</td>
<td>on</td>
<td>在做临时替换的时候允许使用!和!! 默认选项</td>
</tr>
<tr>
<td>history</td>
<td>on</td>
<td>允许命令行历史,默认选项</td>
</tr>
<tr>
<td>ignoreeof</td>
<td>off</td>
<td>禁止coontrol-D的方式退出shell，必须输入exit。</td>
</tr>
<tr>
<td>interactive-comments</td>
<td>on</td>
<td>在交互式模式下， #用来表示注解</td>
</tr>
<tr>
<td>keyword</td>
<td>off</td>
<td>命令把关键字参数放在环境中</td>
</tr>
<tr>
<td>monitor</td>
<td>on</td>
<td>允许作业控制</td>
</tr>
<tr>
<td>noclobber</td>
<td>off</td>
<td>保护文件在使用重新动向的时候不被覆盖</td>
</tr>
<tr>
<td>noexec</td>
<td>off</td>
<td>在脚本状态下读取命令但是不执行，主要为了检查语法结构。</td>
</tr>
<tr>
<td>nolog</td>
<td>off</td>
</tr>
<tr>
<td>noglob</td>
<td>off</td>
<td>禁止路径名扩展，即关闭通配符     </td>
</tr>
<tr>
<td>notify</td>
<td>off</td>
<td>在后台作业以后通知客户</td>
</tr>
<tr>
<td>nounset</td>
<td>off</td>
<td>在扩展一个没有的设置的变量的时候，    显示错误的信息     </td>
</tr>
<tr>
<td>onecmd</td>
<td>off</td>
<td>在读取并执行一个新的命令后退出       </td>
</tr>
<tr>
<td>physical</td>
<td>off</td>
<td>如果被设置，则在使用pwd和cd命令时不使用符号连接的路径 而是物理路径</td>
</tr>
<tr>
<td>pipefail</td>
<td>off</td>
<td>限制错误。还可以使用trap来截获信号</td>
</tr>
<tr>
<td>posix</td>
<td>off</td>
<td>改变shell行为以便符合POSIX要求</td>
</tr>
<tr>
<td>privileged</td>
<td>off</td>
<td>一旦被设置，shell不再读取.profile文件和env文件 shell函数也不继承任何环境</td>
</tr>
<tr>
<td>verbose</td>
<td>off</td>
<td>为调试打开verbose模式</td>
</tr>
<tr>
<td>vi</td>
<td>off</td>
<td>在命令行编辑的时候使用内置的vi编辑器</td>
</tr>
<tr>
<td>xtrace</td>
<td>off</td>
<td>打开调试回响模式</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>开启</strong>一个<code>Bash</code>命令,关闭<code>Ctrl+d</code></li>
</ul>
<blockquote>
<p>set -o ignoreeof</p>
</blockquote>
<ul>
<li><strong>关闭</strong>一个<code>Bash</code>选项</li>
</ul>
<blockquote>
<p>set +o ignoreeof</p>
</blockquote>
<ul>
<li>查看由<code>Bash</code>内只命令<code>shopt</code>控制的<code>Bash</code>选项及其状态</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>状态</th>
</tr>
</thead>
<tbody>
<tr>
<td>cdable_vars</td>
<td>off</td>
</tr>
<tr>
<td>cdspell</td>
<td>off</td>
</tr>
<tr>
<td>checkhash</td>
<td>off</td>
</tr>
<tr>
<td>checkwinsize</td>
<td>on</td>
</tr>
<tr>
<td>cmdhist</td>
<td>on</td>
</tr>
<tr>
<td>dotglob</td>
<td>off</td>
</tr>
<tr>
<td>execfail</td>
<td>off</td>
</tr>
<tr>
<td>expand_aliases</td>
<td>on</td>
</tr>
<tr>
<td>extdebug</td>
<td>off</td>
</tr>
<tr>
<td>extglob</td>
<td>off</td>
</tr>
<tr>
<td>extquote</td>
<td>on</td>
</tr>
<tr>
<td>failglob</td>
<td>off</td>
</tr>
<tr>
<td>force_fignore</td>
<td>on</td>
</tr>
<tr>
<td>gnu_errfmt</td>
<td>off</td>
</tr>
<tr>
<td>histappend</td>
<td>off</td>
</tr>
<tr>
<td>histreedit</td>
<td>off</td>
</tr>
<tr>
<td>histverify</td>
<td>off</td>
</tr>
<tr>
<td>hostcomplete</td>
<td>on</td>
</tr>
<tr>
<td>huponexit</td>
<td>off</td>
</tr>
<tr>
<td>interactive_comments</td>
<td>on</td>
</tr>
<tr>
<td>lithist</td>
<td>off</td>
</tr>
<tr>
<td>login_shell</td>
<td>on</td>
</tr>
<tr>
<td>mailwarn</td>
<td>off</td>
</tr>
<tr>
<td>no_empty_cmd_completion</td>
<td>off</td>
</tr>
<tr>
<td>nocaseglob</td>
<td>off</td>
</tr>
<tr>
<td>nocasematch</td>
<td>off</td>
</tr>
<tr>
<td>nullglob</td>
<td>off</td>
</tr>
<tr>
<td>progcomp</td>
<td>on</td>
</tr>
<tr>
<td>promptvars</td>
<td>on</td>
</tr>
<tr>
<td>restricted_shell</td>
<td>off</td>
</tr>
<tr>
<td>shift_verbose</td>
<td>off</td>
</tr>
<tr>
<td>sourcepath</td>
<td>on</td>
</tr>
<tr>
<td>xpg_echo</td>
<td>off</td>
</tr>
</tbody>
</table>
<ul>
<li>使用<code>shopt</code>命令开启和关闭<code>Bash</code>选项的语法如下</li>
</ul>
<blockquote>
<p>shopt -s feature-name     # 开启一个Bash选项</p>
<p>shopt -u feature-name     # 关闭一个bash选项</p>
</blockquote>
<ul>
<li><code>shopt</code>命令，<code>cdspell</code>选项，用于检测<code>cd</code>命令中目录名字的拼写错误并纠正。错误检查包括调换的字符，缺少的字符，和重复的字符。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ ~]# cd /var/lid</div><div class="line">-bash: cd: /var/lid: No such file or directory</div><div class="line">[root@iZ251k7t70aZ ~]# shopt -s cdspell</div><div class="line">[root@iZ251k7t70aZ ~]# cd /var/lid</div><div class="line">/var/lib</div><div class="line">[root@iZ251k7t70aZ lib]# cd /var/lid</div><div class="line">/var/lib</div><div class="line">[root@iZ251k7t70aZ lib]# pwd</div><div class="line">/var/lib</div></pre></td></tr></table></figure>
<blockquote>
<p>选项<code>cdspell</code>只在交互式<code>Shell</code>中有效</p>
</blockquote>
<ul>
<li>你可以使用shopt和set为你定制一个Bash环境，编辑你的<code>~/.bashrc</code>文件，可以添加如下命令：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 纠正目录拼写</div><div class="line">shopt -q -s cdspell</div><div class="line"></div><div class="line"># 当终端创建口大小改变时，确保显示得到更新</div><div class="line">shopt -q -s extglob</div><div class="line"></div><div class="line">#开启扩展模式匹配特性</div><div class="line">shopt -q -s extglob</div><div class="line"></div><div class="line"># 退出时追加而不是重启命令历史</div><div class="line">shopt -s histpapperd</div><div class="line"></div><div class="line"># 使Bash尝试保存历史记录中多行命令的所有行</div><div class="line">shopt -q -s cmdhist</div><div class="line"></div><div class="line"># 得到后天任务结束的及时通知</div><div class="line">set -o notify</div></pre></td></tr></table></figure>
<h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><ul>
<li>使用declare命令定义一个新的环境变量”mylove”，并且将其值设置为”java”，输入如下命令：</li>
</ul>
<blockquote>
<p>declare mylove=’Visual C++’ #定义新环境变量</p>
</blockquote>
<ul>
<li>再使用set命令将新定义的变量输出为环境变量，输入如下命令：</li>
</ul>
<blockquote>
<p>set -a mylove #设置为环境变量</p>
</blockquote>
<ul>
<li>执行该命令后，将会新添加对应的环境变量。用户可以使用env命令和grep命令分别显示和搜索环境变量”mylove”，输入命令如下：</li>
</ul>
<blockquote>
<p>env | grep mylove #显示环境变量值</p>
<p>你可以定制系统范围的<code>Bash</code>环境，默认情况下，文件<code>/etc/profile</code>作为Bash的系统范围用户参数文件，而在<code>CentOS</code>,<code>Fedora</code>和<code>Redhat</code>下推荐的方法是使用目录<code>/etc/profle.d</code>中的文件。</p>
</blockquote>
<h2 id="3-常用Shell（Bash）命令"><a href="#3-常用Shell（Bash）命令" class="headerlink" title="3 常用Shell（Bash）命令"></a>3 常用<code>Shell（Bash）</code>命令</h2><h2 id="4-Shell-命令进阶"><a href="#4-Shell-命令进阶" class="headerlink" title="4 Shell 命令进阶"></a>4 <code>Shell</code> 命令进阶</h2><h2 id="5-Shell-编程基础"><a href="#5-Shell-编程基础" class="headerlink" title="5 Shell 编程基础"></a>5 <code>Shell</code> 编程基础</h2><h3 id="5-1-Shell-脚本的第一行-quot-quot-Shebang"><a href="#5-1-Shell-脚本的第一行-quot-quot-Shebang" class="headerlink" title="5.1 Shell 脚本的第一行 &quot;#!&quot; (Shebang)"></a>5.1 <code>Shell</code> 脚本的第一行 <code>&quot;#!&quot; (Shebang)</code></h3><ul>
<li><code>#!</code>（Shebang）是一个有<code>#</code> <code>!</code>构成的字符序列，出现在脚本文件第一行的前两个字符，用于指示一个解释程序。</li>
<li>语法格式：</li>
</ul>
<blockquote>
<p><code>#！INTERPRETER [OPTION]...</code><br>INTERPRETER必须是一个程序的绝对路径</p>
</blockquote>
<ul>
<li>当一个内容经以<code>#!</code>开头的脚本作为一个程序运行时，程序加载器会将脚本第一行的<code>#!</code>之后的内容解析为一个解释程序，然互殴用这个指定的解释程序替代其运行，并将脚本的路径作为第一个参数传递给解释程序。</li>
<li>例如一个脚本的路径名为<code>path/to/script</code> 并且它的内容如下行开头</li>
</ul>
<blockquote>
<p><code>#!/bin/sh</code>
　</p>
<ul>
<li>程序加载器被指示用解释程序<code>/bin/bash</code>替代其运行，并将路径<code>path/to/script</code>作为第一个参数传递给解释程序<code>/bin/bash</code></li>
<li>几乎所有的<code>Bash</code>脚本的内容都是以<code>/bin/bash</code>开头，并确保<code>Bash</code>将作为脚本的解释程序</li>
<li>如果没有指定<code>#!</code>，则会默认用<code>/bin/sh</code>作为解释程序，但还是推荐你将<code>Bash</code>脚本的第一行设为<code>#!/bin/bash</code></li>
</ul>
</blockquote>
<p>5.2 <code>Shell</code> 中的注释 </p>
<ul>
<li>在<code>Shell</code>脚本中，<code>#</code>是注释表示符。</li>
<li>在<code>Shell</code>脚本中, 还可以使用Bash的HERE DOCUMENT 特性添加多行的注释内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">echo &quot;下面是注释&quot;</div><div class="line"></div><div class="line">&lt;&lt;COMMENT</div><div class="line">    comment line 1</div><div class="line">    comment line 2</div><div class="line">    comment line 3</div><div class="line">COMMENT</div><div class="line"></div><div class="line">echo &quot;上面是注释&quot;</div></pre></td></tr></table></figure>
<h3 id="5-3-设置脚本的权限和执行脚本"><a href="#5-3-设置脚本的权限和执行脚本" class="headerlink" title="5.3 设置脚本的权限和执行脚本"></a>5.3 设置脚本的权限和执行脚本</h3><ul>
<li>在运行一个<code>Shell</code>脚本之前，确保<code>Shell</code>脚本文件具有可执行的权限，否则会报错<code>permission denied</code></li>
<li>给脚本添加执行权限</li>
</ul>
<blockquote>
<p><code>chmod u+x ./multicomments.sh</code></p>
</blockquote>
<ul>
<li>给所有用户执行脚本的权限</li>
</ul>
<blockquote>
<p><code>chmod +x ./multicomments.sh</code></p>
</blockquote>
<ul>
<li><p>运行一个<code>Shell</code>脚本，使用<code>绝对路径</code>或<code>相对路径</code>两种方式都可以。</p>
</li>
<li><p>(1)绝对路径</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ /home/benny/scripts/helloworld.sh</div><div class="line">hello world!</div></pre></td></tr></table></figure>
<ul>
<li>(2)相对路径</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cd /home/benny</div><div class="line">$ ./scripts/hellowrold.sh</div><div class="line">hello world!</div></pre></td></tr></table></figure>
<ul>
<li>如果想像运行一个命令一样运行一个脚本，即不需要指定绝对路径或相对路径只需要输入脚本名称即可。</li>
<li>要实现这一目的，<strong>需要将脚本所在目录的路径添加到你的<code>PATH</code>环境变量中</strong>，那么就可以在任何路径下直接运行目录<code>PATH</code>环境变量中。</li>
<li>例如：将目录路径<code>home/benny/scripts</code>加入<code>PATH</code>环境变量中，就可以在任何路径下直接运行目录<code>home/benny/scripts</code>下的<code>Shell</code>脚本。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$   export PATH=$PATH:/home/benny/scripts</div><div class="line">$   cd /tmp</div><div class="line">$   hellowrold.sh</div><div class="line">out :  hello world</div></pre></td></tr></table></figure>
<blockquote>
<p>通过<code>export</code>命令添加的<code>PATH</code>变量会在终端关闭后消失，所以建议通过编辑<code>/etc/profile</code>来改<code>PATH</code>环境变量,也可以改根目录下的<code>.bashrc</code>（即：<code>~/.bashrc</code>）</p>
</blockquote>
<h2 id="5-4-Shell变量进阶"><a href="#5-4-Shell变量进阶" class="headerlink" title="5.4 Shell变量进阶"></a>5.4 <code>Shell</code>变量进阶</h2><h3 id="5-4-1-Bash中的参数拓展"><a href="#5-4-1-Bash中的参数拓展" class="headerlink" title="5.4.1 Bash中的参数拓展"></a>5.4.1 Bash中的参数拓展</h3><h3 id="5-4-2-Bash的内部变量"><a href="#5-4-2-Bash的内部变量" class="headerlink" title="5.4.2 Bash的内部变量"></a>5.4.2 Bash的内部变量</h3><ul>
<li><p>Bath的内部变量会影响Bash脚本的行为。</p>
</li>
<li><p><code>$BATH</code> 用于引用Bash实例的全路径名</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo $BATH</div><div class="line">/bin/bash</div></pre></td></tr></table></figure>
<ul>
<li><code>$HOME</code> 当前用户的home目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ ~]# echo &quot;your home directory is $HOME&quot;</div><div class="line">your home directory is /root</div></pre></td></tr></table></figure>
<ul>
<li><code>$IFS</code> 是内部字段分隔符的缩写。此变量决定当Bath解析字符串时将怎样识别字段，或单词分界线。</li>
<li>变量<code>$IFS</code> 的默认值是空格（空格、制表符和换行），但可以被修改。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ ~]# set x y z    #使用set命令，将x，y，z赋予位置参数1,2,3</div><div class="line">[root@iZ251k7t70aZ ~]# IFS=&quot;:;-&quot;    #指定Bash的内部字段分隔符</div><div class="line">[root@iZ251k7t70aZ ~]# echo &quot;$*&quot;    #拓展特殊参数*</div><div class="line">x:y:z</div></pre></td></tr></table></figure>
<ul>
<li><p><code>$SECONDS</code>变量，脚本已经运行的秒数</p>
</li>
<li><p><code>$TMOUT</code>变量，如果<code>$TMOUT</code>变量指定了一个非零的值，此值就会被内部指令<code>read</code>作为默认的超市秒数，在一个交互式的Shell中$TMOUT的值被作为命令行提示符等待输入的秒数，如果在指定的秒数内没有输入，Bash将自动被终结。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">echo &quot;开始执行脚本&quot;</div><div class="line">set -o nounset</div><div class="line">TMOUT=3</div><div class="line"></div><div class="line">echo &quot;Are you sure (y/n)&quot;</div><div class="line">read input</div><div class="line"></div><div class="line">if [&quot;$input&quot; == &quot;y&quot;]</div><div class="line">then</div><div class="line">        echo &quot;Continue ....&quot;</div><div class="line">else</div><div class="line">        echo &quot;Exit!&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<ul>
<li><code>UID</code>当前用户账号标识码（<code>ID</code>号）与<code>/etc/passwd</code>中记录的相同，此变量记录的是当前账户的真实<code>ID</code>,即使该账户通过<code>su</code>命令已经临时获得了另一个账号的权限，<code>$UID</code>是一个只读变量，不接受从命令行或脚本的修改。</li>
<li>使用<code>$UID</code>变量来判断当前账号是否为<code>root</code></li>
</ul>
<h3 id="5-4-3-Bash-中的位置参数和特殊参数"><a href="#5-4-3-Bash-中的位置参数和特殊参数" class="headerlink" title="5.4.3 Bash 中的位置参数和特殊参数"></a>5.4.3 Bash 中的位置参数和特殊参数</h3><ul>
<li><code>Bash</code>中的位置参数事由除<code>0</code>以外的一个或多个数字表示的参数。</li>
<li>位置参数事由<code>Shell</code>和<code>Shell</code>的函数呗引用时有<code>Shel</code>或<code>Shell</code>函数的参数赋值，并且可以使用Bash的内部命令<code>set</code>来重新赋值，位置参数可以被引用为<code>${N}</code>,或当N只含有一个数字时被引为<code>$N</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ myscript]# set 123 four five</div><div class="line">[root@iZ251k7t70aZ myscript]# echo &quot;$1 $2 $3 $4&quot;</div><div class="line">123 four five</div></pre></td></tr></table></figure>
<ul>
<li>多于一个数字的位置参数在拓展时必须放在大括号中，比如<code>${10}</code></li>
<li>位置参数不能用过赋值语句来赋值，只能通过<code>Bash</code>的命令<code>set</code>和<code>shift</code>来设置和取消他们，当<code>shell</code>函数运行时候，位置参数会被临时替换。</li>
</ul>
<ul>
<li>bash 对一些参数的处理比较特殊，<strong>这些参数只能被引用，但不能修改他们的值</strong>，这些特殊参数分别是<code>*</code>、<code>@</code>、 <code>#</code>、 <code>?</code>、 <code>-</code>、<code>$</code>、<code>!</code>、<code>0</code>、<code>_</code></li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>释义</th>
<th>更多</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*</code></td>
<td>拓展为从1开始的所有位置参数</td>
<td></td>
</tr>
<tr>
<td><code>@</code></td>
<td>也将拓展为从1开始的所有位置参数</td>
</tr>
<tr>
<td><code>#</code></td>
<td>拓展为位置参数的个数</td>
</tr>
<tr>
<td><code>?</code></td>
<td>拓展为最近一个在前台执行的命令的退出状态</td>
</tr>
<tr>
<td><code>-</code></td>
<td>拓展为当前的选项标志</td>
</tr>
<tr>
<td><code>$</code></td>
<td>拓展为当前Shell的进程号</td>
</tr>
<tr>
<td><code>!</code></td>
<td>拓展为最近一次执行的后台命令的进程号</td>
</tr>
<tr>
<td><code>0</code></td>
<td>拓展为Shell或Shell脚本的名称</td>
</tr>
<tr>
<td><code>_</code></td>
<td>在Shell启动时，它被设置为开始运行的shell或者Sehll脚本中</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>参数</th>
<th>释义</th>
<th>更多</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$0</code></td>
<td>这个程式的执行名字</td>
</tr>
<tr>
<td><code>$n</code></td>
<td>这个程式的第n个参数值，n=1..9</td>
</tr>
<tr>
<td><code>$*</code></td>
<td>这个程式的所有参数,此选项参数可超过9个。</td>
</tr>
<tr>
<td><code>$#</code></td>
<td>这个程式的参数个数</td>
</tr>
<tr>
<td><code>$$</code></td>
<td>这个程式的PID(脚本运行的当前进程ID号)</td>
</tr>
<tr>
<td><code>$!</code></td>
<td>执行上一个背景指令的PID(后台运行的最后一个进程的进程ID号)</td>
</tr>
<tr>
<td><code>$?</code></td>
<td>执行上一个指令的返回值 (显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误)</td>
</tr>
<tr>
<td><code>$-</code></td>
<td>显示shell使用的当前选项，与set命令功能相同</td>
</tr>
<tr>
<td><code>$@</code></td>
<td>跟$*类似，但是可以当作数组用</td>
</tr>
</tbody>
</table>
<h2 id="5-4-4-使用declare命令指定变量的类型"><a href="#5-4-4-使用declare命令指定变量的类型" class="headerlink" title="5.4.4 使用declare命令指定变量的类型"></a>5.4.4 使用<code>declare</code>命令指定变量的类型</h2><ul>
<li><p><code>declare</code>命令是Bash的内部命令，用于声明变量和修改变量的属性，与Bash的另一个内部命令typeset的用法和用途完全相同</p>
</li>
<li><p><code>-r</code> 选项，declare命令将吧指定的变量定义为只读变量，这些变量将不能再赋予新值或被清除</p>
</li>
<li><p>-i 选项，declare命令将吧指定的变量定义为整数型变量，赋予整形变量的任何类型的值都将被换成整数 </p>
</li>
<li>-x 选项，declare命令将吧指定的变量通过环境输出到后续命令</li>
<li>-p 选项，declare命令将显示指定变量的属性和值</li>
</ul>
<blockquote>
<p>有时一个任务或命令会运行很长时间，如果不能确定这个任务什么时候才能结束，这是最好就是把它放到后台运行，然后一旦退出系统，这个任务将被终止</p>
</blockquote>
<ul>
<li><code>nohup</code> 命令能让运行的命令或脚本在你退出系统后继续在后台运行。</li>
<li>语法如下：</li>
</ul>
<blockquote>
<p>nohup COMMAND [ARG]… &amp;</p>
</blockquote>
<ul>
<li>COMMAND：Shell脚本或命令的名称</li>
<li>[ARG]：脚本或命令的参数</li>
<li>&amp;：nohup命令不能自动地将任务放在后台运行，你必须明确地在nohup命令的末尾添加操作控制符 <code>&amp;</code></li>
</ul>
<blockquote>
<p>使用nohup命令运行一个脚本script.sh</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ nohup sh script.sh &amp;</div><div class="line">[1] 12496</div><div class="line">$  nohup : appending output to &apos;nohup.out&apos;</div></pre></td></tr></table></figure>
<ul>
<li>其中<code>[1]</code>是任务编号，<code>12496</code>是任务的进程号，最后一句表示当前脚本运行输出的内容都将被写入到但钱目录下的文件 nohup.out中。</li>
<li>当你退出系统后在重新登陆，你仍会看到脚本script.sh在后台运行。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ps -ef | grep 12496</div><div class="line">out:benny 12496 1 0 18:15? 00:00:00 sh script.sh</div></pre></td></tr></table></figure>
<p>5.4.5 Bash 中的数组变量</p>
<ul>
<li>声明一个数组的语法：</li>
</ul>
<blockquote>
<p>ARRAYNAME[INDEX]=value</p>
</blockquote>
<ul>
<li>INDEX手机一正数，或是一个值为正数的算数表达式</li>
<li>显式的声明一个数组变量使使用Bash的内部命令declare</li>
</ul>
<blockquote>
<p>$ declare -a ARRAYNAME</p>
</blockquote>
<ul>
<li>带有一个索引编号的声明也是可以接受的，但索引编号将被忽略，数组的属性可以使用Bash的内部命令declare和readonly指定，这些属性将被应用到数组的所有变量。</li>
<li>定一个数组变量</li>
</ul>
<blockquote>
<p>$ declare -a linux={‘java’,’php’,’javascript’}</p>
</blockquote>
<ul>
<li>数组变量还可以使用复合赋值的格式</li>
</ul>
<blockquote>
<p>$ ARRAYNAME={value1,value2,value3…valueN}</p>
</blockquote>
<ul>
<li>若要引用数中某一项的内容，必须使用<code>{}</code>，<strong>如果索引编号是<code>@</code>或<code>*</code>,那么数组的所有成员都将被使用</strong>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$   echo $&#123;linux[@]&#125;</div><div class="line"></div><div class="line">out: java php javascript</div><div class="line"></div><div class="line">$   arr1=(one two three)</div><div class="line">$   echo $&#123;arr1[0]&#125; $&#123;arr1[1]&#125; $&#123;arr1[2]&#125; </div><div class="line"></div><div class="line">out: one two three</div><div class="line"></div><div class="line">$   echo $&#123;arr1[*]&#125;</div><div class="line"></div><div class="line">out: one two three</div><div class="line"></div><div class="line">$   echo $&#123;arr1[@]&#125;</div><div class="line"></div><div class="line">out: one two three</div><div class="line"></div><div class="line">$   arr1[3]=four</div><div class="line">$   echo $&#123;arr1[@]&#125;</div><div class="line"></div><div class="line">out:one two three four</div><div class="line"></div><div class="line">$   echo $arr1</div><div class="line"></div><div class="line">out:one</div></pre></td></tr></table></figure>
<ul>
<li><strong>如果引用数组时，不指定索引编号，则引用的将是数组中的第一元素，即使用索引编号为0</strong></li>
<li>使用<code>unset</code>命令可以<strong>删除一个数组或数组中的成员变量</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$   unset arr1[2]</div><div class="line">$   echo $&#123;arr1[@]&#125;</div><div class="line"></div><div class="line">out: one two four</div><div class="line"></div><div class="line">$   unset arr1</div><div class="line">$   echo $&#123;arr1[@]&#125;</div><div class="line"></div><div class="line">out:</div></pre></td></tr></table></figure>
<h2 id="5-5-Shell-算术运算"><a href="#5-5-Shell-算术运算" class="headerlink" title="5.5 Shell 算术运算"></a>5.5 Shell 算术运算</h2><h3 id="5-5-1-Bash的算数运算符"><a href="#5-5-1-Bash的算数运算符" class="headerlink" title="5.5.1 Bash的算数运算符"></a>5.5.1 Bash的算数运算符</h3><h3 id="5-5-2-数字常量"><a href="#5-5-2-数字常量" class="headerlink" title="5.5.2 数字常量"></a>5.5.2 数字常量</h3><h3 id="5-5-3-使用算数拓展和let进行算数运算"><a href="#5-5-3-使用算数拓展和let进行算数运算" class="headerlink" title="5.5.3 使用算数拓展和let进行算数运算"></a>5.5.3 使用算数拓展和let进行算数运算</h3><h3 id="5-5-4-使用expr命令"><a href="#5-5-4-使用expr命令" class="headerlink" title="5.5.4 使用expr命令"></a>5.5.4 使用<code>expr</code>命令</h3><h2 id="5-6-退出脚本"><a href="#5-6-退出脚本" class="headerlink" title="5.6 退出脚本"></a>5.6 退出脚本</h2><h3 id="5-6-1-退出状态码"><a href="#5-6-1-退出状态码" class="headerlink" title="5.6.1 退出状态码"></a>5.6.1 退出状态码</h3><ul>
<li>每一个命令都会返回一个退出状态</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">状态值</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>0</code></td>
<td><strong>表示运行成功，程序执行未遇到任何问题</strong></td>
</tr>
<tr>
<td style="text-align:center"><code>1 ~ 125</code></td>
<td>表示运行失败，脚本命令、系统命令错误或参数传递错误</td>
</tr>
<tr>
<td style="text-align:center"><code>126</code></td>
<td>找到了该命令但无法执行</td>
</tr>
<tr>
<td style="text-align:center"><code>127</code></td>
<td>未找到要运行的命令</td>
</tr>
<tr>
<td style="text-align:center"><code>&gt; 128</code></td>
<td>命令被系统强行结束</td>
</tr>
</tbody>
</table>
<ul>
<li><code>Shell</code>脚本和它里面的函数也会返回一个退出状态码。</li>
<li><strong>可以通过检查<code>Bash</code>的特殊变量<code>$?</code>来查看上一条命令的退出状态码</strong>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ usr]# ls</div><div class="line">a  b  bin  etc  games  include  java  kerberos  lib  lib64  libexec  local  sbin  share  src  tmp  X11R6</div><div class="line">[root@iZ251k7t70aZ usr]# echo $?</div><div class="line">0</div><div class="line">[root@iZ251k7t70aZ usr]# ls /benny</div><div class="line">ls: /benny: No such file or directory</div><div class="line">[root@iZ251k7t70aZ usr]# echo $?</div><div class="line">2</div><div class="line">[root@iZ251k7t70aZ usr]#</div></pre></td></tr></table></figure>
<h3 id="5-6-2-使用exit-命令"><a href="#5-6-2-使用exit-命令" class="headerlink" title="5.6.2 使用exit 命令"></a>5.6.2 使用<code>exit</code> 命令</h3><ul>
<li>语法如下：退出并且返回退出状态码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$    exit  N</div></pre></td></tr></table></figure>
<ul>
<li>退出状态码<code>N</code>可以被其他命令或脚本用来采取他们自己的行为，如果退出状态码<code>N</code>被省略，则将把最后一条运行的命令的退出状态作为脚本的退出状态码。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">cd $SOME_DIR</div><div class="line"></div><div class="line">if [ $? -eq 0 ]; then</div><div class="line">    rm -rf *</div><div class="line">else</div><div class="line">    echo &apos;Cannot change directory!&apos;</div><div class="line">    </div><div class="line">exit 1</div><div class="line">fi</div></pre></td></tr></table></figure>
<ul>
<li>上述例子，检查<code>csd</code>命令的退出状态，如果其不为0，将打印一个错误消息，并使用<code>exit</code>命令终结脚本运行，返回退出状态码1。</li>
<li><code>linux shell</code> 命令中判断对文件和文件夹的判断，判断表达式</li>
</ul>
<p><code>[ ]</code> 部分是判断表达式，<br><code>-d</code> 表示判断是否是目录(<code>directory</code>)<br><code>&amp;&amp;</code> 是“逻辑与”操作符（这个与C语法类似啊），只有&amp;&amp;前面的判断成立（返回逻辑真），后面的语句才会得到执行。<br>总之，含义就是：<br>若/root/Desktop/为目录，就执行 chmod 777 /root/Desktop/download.desktop<br>若/root/Desktop/不是目录（不存在该目录），就执行 chmod 777 /root/桌面/download.desktop<br>其实就是处理 Desktop 是英文和中文两种情况。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">BAK=/data</div><div class="line">TAPE=/dev/st0</div><div class="line">echo &quot;Trying to backup $&#123;BAK&#125; direcotry to type device $&#123;TAPE&#125;&quot;</div><div class="line"></div><div class="line">[! -d $BAK] &amp;&amp;&#123;echo &quot;Source backup directory $BAK not found&quot;&#125;</div><div class="line"></div><div class="line">if [$? -ne 0]</div><div class="line"></div><div class="line">then echo &quot;An Error occurred while making a type backup&quot;</div><div class="line">exit 3</div><div class="line">fi</div><div class="line">exit 0 #如果备份成功，则返回0</div></pre></td></tr></table></figure>
<p><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong>   [里面的参数 还有待继续学习]</p>
<h2 id="5-7-调试脚本"><a href="#5-7-调试脚本" class="headerlink" title="5.7 调试脚本"></a>5.7 调试脚本</h2><ul>
<li>常用的脚本调试方法是<code>Bash</code> 的<code>-x</code> 选项启动一个子<code>Shell</code></li>
<li>它将以调试模式运行，使<code>Shell</code>在执行脚本的过程中把实际执行的每一个命令显示出来，并且在每一个命令行的行首显示一个 <code>+</code>号</li>
<li><code>+</code>号后面显示的是经过了参数拓展之后的命令行的内容，有助于分析是什么命令。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ myscript]# ./param.sh </div><div class="line">this is /bin/bash</div><div class="line">Linux iZ251k7t70aZ 2.6.18-371.11.1.el5 #1 SMP Wed Jul 23 15:12:55 EDT 2014 x86_64 x86_64 x86_64 GNU/Linux</div><div class="line">[root@iZ251k7t70aZ myscript]# bash -x param.sh </div><div class="line">+ echo &apos;this is /bin/bash&apos;</div><div class="line">this is /bin/bash</div><div class="line">+ uname -a</div><div class="line">Linux iZ251k7t70aZ 2.6.18-371.11.1.el5 #1 SMP Wed Jul 23 15:12:55 EDT 2014 x86_64 x86_64 x86_64 GNU/Linux</div></pre></td></tr></table></figure>
<ul>
<li>Bash 中还有一个 <code>-v</code> 选项，该选项激活详细输出模式</li>
<li>在此模式，由<code>Bash</code>读入的脚本的每一个命令行豆浆在执行前被输出。</li>
<li><strong> 通常情况下，将<code>-v</code>选项和<code>-x</code>选项同时使用</strong> </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ myscript]# bash -xv param.sh </div><div class="line">#!/bin/bash</div><div class="line">echo &quot;this is /bin/bash&quot;</div><div class="line">+ echo &apos;this is /bin/bash&apos;</div><div class="line">this is /bin/bash</div><div class="line">uname -a</div><div class="line">+ uname -a</div><div class="line">Linux iZ251k7t70aZ 2.6.18-371.11.1.el5 #1 SMP Wed Jul 23 15:12:55 EDT 2014 x86_64 x86_64 x86_64 GNU/Linux</div><div class="line">[root@iZ251k7t70aZ myscript]#</div></pre></td></tr></table></figure>
<ul>
<li><code>-x</code>选项虽然使用起来比较方便，但它输出的调试信息仅限于参数拓展后的每一条执行命令以及行首的一个<code>+</code>号，但却没有代码行的行号这样的重要信息。</li>
<li>可以通过<code>Bash</code>的一些内部环境变量来增加<code>-x</code>选项的输出信息</li>
</ul>
<table>
<thead>
<tr>
<th>内部环境变量</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$LINENO</code></td>
<td>表示Shell脚本的当前行号</td>
</tr>
<tr>
<td><code>$FUNCNAME</code></td>
<td>它是一个包含了当前在执行调用栈中的所有Shell函数名称的数组变量。${FUNCNAME[0]}代表正在执行的Shell函数的名称，${FUNCNAME[1]则代表调用函数${FUNCNAME[1]则代表调用函数${FUNCNAME[0]}的函数的名字，一次类推</td>
</tr>
<tr>
<td>$PS4</td>
<td>使用<code>Bash</code>的<code>-x</code>选项时，每一条执行的命令的行首会显示<code>+</code>号，而这个<code>+</code>号其实就是变量<code>$PS4</code>的默认值</td>
</tr>
</tbody>
</table>
<ul>
<li>利用变量<code>$PS4</code>的这一特性，结合上述另两个Bash内部变量，通过重新定义变量$PS4就可以增强<code>-x</code>选项的输出信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  export  PS4=&apos;+&#123;$LINENO:$&#123;FUNCNAME[0]&#125;&#125;&apos;</div></pre></td></tr></table></figure>
<ul>
<li>然后使用Bash -xv 选项来调试脚本</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ myscript]# export PS4=&apos;+&#123;$LINENO:$&#123;FUNCNAME[0]&#125;&#125;&apos;</div><div class="line">[root@iZ251k7t70aZ myscript]# bash -xv param.sh </div><div class="line">#!/bin/bash</div><div class="line">echo &quot;this is /bin/bash&quot;</div><div class="line">+&#123;2:&#125;echo &apos;this is /bin/bash&apos;</div><div class="line">this is /bin/bash</div><div class="line">uname -a</div><div class="line">+&#123;3:&#125;uname -a</div><div class="line">Linux iZ251k7t70aZ 2.6.18-371.11.1.el5 #1 SMP Wed Jul 23 15:12:55 EDT 2014 x86_64 x86_64 x86_64 GNU/Linux</div><div class="line">[root@iZ251k7t70aZ myscript]#</div></pre></td></tr></table></figure>
<ul>
<li><p>Bash 中执行选项<code>-n</code>，用于测试Shell脚本中是否存在语法错误。</p>
</li>
<li><p>Bash 的内置变量总结</p>
</li>
</ul>
<h2 id="5-8-Shell脚本编程风格"><a href="#5-8-Shell脚本编程风格" class="headerlink" title="5.8 Shell脚本编程风格"></a>5.8 Shell脚本编程风格</h2><ul>
<li>每个代码行不多于80个字符</li>
<li>保持一直的缩进深度，程序结构的缩进应与逻辑嵌套深度一致</li>
<li>每一个代码块之间留一个空行，可以提高脚本的可读性</li>
<li>每个脚本文件都必须要有一个文件头注释，任何一个不简短而不显而易见的函数都需要注释</li>
<li>文件头提供文件名和他的内容等一些信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#</div><div class="line">#=====================================</div><div class="line">#</div><div class="line">#				 FILE: param.sh</div><div class="line">#</div><div class="line">#				USAGE: ./param.sh</div><div class="line">#</div><div class="line">#		  DESCRIPTION: Read the Bash variable $SECONDS</div><div class="line">#</div><div class="line">#			  OPTIONS: ----</div><div class="line">#</div><div class="line">#	      REQUIREMENTS：----</div><div class="line">#</div><div class="line">#			   	 BUGS:---</div><div class="line">#</div><div class="line">#				NOTES:---</div><div class="line">#</div><div class="line">#			ORGANIZATION:---</div><div class="line">#</div><div class="line">#			 CREATETED:---</div><div class="line">#</div><div class="line">#			  REVISION:---</div></pre></td></tr></table></figure>
<h2 id="6-1-Shell的条件执行–条件测试"><a href="#6-1-Shell的条件执行–条件测试" class="headerlink" title="6.1 Shell的条件执行–条件测试"></a>6.1 Shell的条件执行–条件测试</h2><h3 id="6-1-1-使用test命令"><a href="#6-1-1-使用test命令" class="headerlink" title="6.1.1 使用test命令"></a>6.1.1 使用test命令</h3><ul>
<li>Shell脚本可以使用条件逻辑，使脚本可以根据参数，Shell变量或是其他条件的值采取不同的行动。</li>
<li>test命令运行你做各种测试并每当测试成功或失败时设置它的退出状态码为<code>0</code>（<code>表示真</code>）或<code>1</code>（<code>表示假</code>）</li>
<li><p><code>test</code>命令可以用于：</p>
<ul>
<li>文件属性测试</li>
<li>字符串测试</li>
<li>算术测试</li>
</ul>
</li>
<li><p>test命令的语法如下：</p>
</li>
</ul>
<blockquote>
<p>test EXPRESSION   ||    [<code>空格</code>EXPRESSION<code>空格</code>]</p>
<p>[  <code>EXPRESSION</code> ]<strong> 注意： 表达式前后需要有空格</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ myscript]# test -d &quot;$HOME&quot;; echo $?</div><div class="line">0</div><div class="line">[root@iZ251k7t70aZ myscript]# test -d &quot;$HOMEs&quot;; echo $?</div><div class="line">1</div><div class="line">[root@iZ251k7t70aZ myscript]# [ &quot;abc&quot; != &quot;def&quot;]; echo $?</div><div class="line">-bash: [: missing `]&apos;</div><div class="line">2</div><div class="line">[root@iZ251k7t70aZ myscript]# [&quot;abc&quot; != &quot;def&quot; ]; echo $?</div><div class="line">-bash: [abc: command not found</div><div class="line">127</div><div class="line">[root@iZ251k7t70aZ myscript]# [ &quot;abc&quot; != &quot;def&quot; ]; echo $?</div><div class="line">0</div><div class="line">[root@iZ251k7t70aZ myscript]# test 8 -gt 3 &amp;&amp; echo TRUE || echo False</div><div class="line">TRUE</div><div class="line">[root@iZ251k7t70aZ myscript]# test -8 -gt 3 &amp;&amp; echo TRUE || echo False</div><div class="line">False</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述符</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>-e</td>
<td>文件存在</td>
</tr>
<tr>
<td><del>-a</del></td>
<td><del>文件存在，这个选项的效果与-e相同. 但是它已经被”弃用”了, 并且不鼓励使用.</del></td>
</tr>
<tr>
<td>-f</td>
<td>表示这个文件是一个一般文件(并不是目录或者设备文件)</td>
</tr>
<tr>
<td>-s</td>
<td>文件大小不为零</td>
</tr>
<tr>
<td>-d</td>
<td>表示这是一个目录</td>
</tr>
<tr>
<td>-b</td>
<td>表示这是一个块设备(软盘, 光驱, 等等.)</td>
</tr>
<tr>
<td>-c</td>
<td>表示这是一个字符设备(键盘, modem, 声卡, 等等.)</td>
</tr>
<tr>
<td>-p</td>
<td>这个文件是一个管道</td>
</tr>
<tr>
<td>-h</td>
<td>这是一个符号链接</td>
</tr>
<tr>
<td>-L</td>
<td>这是一个符号链接</td>
</tr>
<tr>
<td>-S</td>
<td>表示这是一个socket</td>
</tr>
<tr>
<td>-t</td>
<td>文件(描述符)被关联到一个终端设备上这个测试选项一般被用来检测脚本中的stdin([ -t 0 ]) 或者stdout([ -t 1 ])是否来自于一个终端.</td>
</tr>
<tr>
<td>-r</td>
<td>文件是否具有可读权限(指的是正在运行这个测试命令的用户是否具有读权限)</td>
</tr>
<tr>
<td>-w</td>
<td>文件是否具有可写权限(指的是正在运行这个测试命令的用户是否具有写权限)</td>
</tr>
<tr>
<td>-x</td>
<td>文件是否具有可执行权限(指的是正在运行这个测试命令的用户是否具有可执行权限)</td>
</tr>
<tr>
<td>-g</td>
<td>set-group-id(sgid)标记被设置到文件或目录上，如果目录具有sgid标记的话, 那么在这个目录下所创建的文件将属于拥有这个目录的用户组, 而不必是创建这个文件的用户组. 这个特性对于在一个工作组中共享目录非常有用.</td>
</tr>
<tr>
<td>-u</td>
<td>set-user-id (suid)标记被设置到文件上，如果一个root用户所拥有的二进制可执行文件设置了set-user-id标记位的话, 那么普通用户也会以root权限来运行这个文件. [1] 这对于需要访问系统硬件的执行程序(比如pppd和cdrecord)非常有用. 如果没有suid标志的话, 这些二进制执行程序是不能够被非root用户调用的.</td>
</tr>
<tr>
<td>-O</td>
<td>判断你是否是文件的拥有者</td>
</tr>
<tr>
<td>-G</td>
<td>文件的group-id是否与你的相同</td>
</tr>
<tr>
<td>-N</td>
<td>从文件上一次被读取到现在为止, 文件是否被修改过</td>
</tr>
<tr>
<td>f1 <code>-nt</code> f2</td>
<td>文件f1比文件f2新</td>
</tr>
<tr>
<td>f1 <code>-ot</code> f2</td>
<td>文件f1比文件f2旧</td>
</tr>
<tr>
<td>f1 <code>-ef</code> f2</td>
<td>文件f1和文件f2是相同文件的硬链接</td>
</tr>
<tr>
<td>!</td>
<td>“非” – 反转上边所有测试的结果(如果没给出条件, 那么返回真).</td>
</tr>
</tbody>
</table>
<ul>
<li>检查名命令文件<code>/bin/cp</code>是否存在，如果存在则打印找到此文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ myscript]# test -e /bin/cp &amp;&amp; &quot;the command $_ found &quot; || &quot;the command $_ not found&quot;</div><div class="line">-bash: the command /bin/cp found : No such file or directory</div><div class="line"></div><div class="line">[root@iZ251k7t70aZ myscript]# [ -d /local ] &amp;&amp; echo &quot;真&quot; || echo &quot;假&quot;</div><div class="line">真</div></pre></td></tr></table></figure>
<blockquote>
<p>上述命令语句中的<code>$_</code>表示前一个执行的命令中的额最后一个参数。</p>
</blockquote>
<ul>
<li>字符串测试操作符表</li>
</ul>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-z 《String》</td>
<td>如果《String》为空则为真</td>
</tr>
<tr>
<td>-n 《String》</td>
<td>如果《String》不为空则为真</td>
</tr>
<tr>
<td>《String1》=《String2》</td>
<td>如果《String1》与《String2》相同则为真</td>
</tr>
<tr>
<td>《String1》！=《String2》</td>
<td>如果《String1》与《String2》不相同则为真</td>
</tr>
<tr>
<td>《String1》&lt;《String2》</td>
<td>如果《String1》的字典顺序排在《String2》之前则为真</td>
</tr>
<tr>
<td>《String1》&gt;《String2》</td>
<td>如果《String1》的字典顺序排在《String2》之后则为真</td>
</tr>
</tbody>
</table>
<ul>
<li>算术测试操作符表</li>
</ul>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-eq</td>
<td>等于,如:if [ “$a” -eq “$b” ] </td>
</tr>
<tr>
<td>-ne</td>
<td>不等于,如:if [ “$a” -ne “$b” ] </td>
</tr>
<tr>
<td>-gt</td>
<td>大于,如:if [ “$a” -gt “$b” ] </td>
</tr>
<tr>
<td>-ge</td>
<td>大于等于,如:if [ “$a” -ge “$b” ] </td>
</tr>
<tr>
<td>-lt</td>
<td>小于,如:if [ “$a” -lt “$b” ] </td>
</tr>
<tr>
<td>-le</td>
<td>小于等于,如:if [ “$a” -le “$b” ] </td>
</tr>
<tr>
<td>&lt;</td>
<td>小于(需要双括号),如:((“$a” &lt; “$b”)) </td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于(需要双括号),如:((“$a” &lt;= “$b”)) </td>
</tr>
<tr>
<td>&gt;</td>
<td>大于(需要双括号),如:((“$a” &gt; “$b”)) </td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于(需要双括号),如:((“$a” &gt;= “$b”)) </td>
</tr>
</tbody>
</table>
<h3 id="6-1-2-if结构的语法格式"><a href="#6-1-2-if结构的语法格式" class="headerlink" title="6.1.2 if结构的语法格式"></a>6.1.2 if结构的语法格式</h3><ul>
<li><code>if</code>语句的基本语法：</li>
</ul>
<blockquote>
<p>if TEST-COMMANDS ; then CONSEQUENT-COMMANDS ;  fi<br>或<br>if TEST-COMMANDS ; then<br>  CONSEQUENT-COMMANDS<br>fi<br>或<br>if TEST-COMMANDS<br>then<br>  CONSEQUENT-COMMANDS<br>fi</p>
</blockquote>
<h3 id="6-1-3-if…else…fi"><a href="#6-1-3-if…else…fi" class="headerlink" title="6.1.3 if…else…fi"></a>6.1.3 if…else…fi</h3><ul>
<li>if…else…fi的语法基本结构</li>
</ul>
<blockquote>
<p>if TEST-COMMANDS<br>then<br>       CONSEQUENT-COMMANDS<br>else<br>        CONSEQUENT-COMMANDS<br>fi</p>
</blockquote>
<h3 id="6-1-5-多级的if…elif…else…fi"><a href="#6-1-5-多级的if…elif…else…fi" class="headerlink" title="6.1.5 多级的if…elif…else…fi"></a>6.1.5 多级的if…elif…else…fi</h3><ul>
<li>if…elif…else…fi语法结构：</li>
</ul>
<blockquote>
<p>if TEST-COMMANDS<br>then<br>   CONSEQUENT-COMMANDS<br>elif TEST-COMMANDS<br>then<br>   CONSEQUENT-COMMANDS<br>elif TEST-COMMANDS<br>then<br>   CONSEQUENT-COMMANDS<br>else<br>   CONSEQUENT-COMMANDS<br>fi</p>
</blockquote>
<h2 id="6-2-条件执行"><a href="#6-2-条件执行" class="headerlink" title="6.2 条件执行"></a>6.2 条件执行</h2><h3 id="6-2-1-逻辑与-amp-amp"><a href="#6-2-1-逻辑与-amp-amp" class="headerlink" title="6.2.1 逻辑与&amp;&amp;"></a>6.2.1 逻辑与<code>&amp;&amp;</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if [ on $var ] &amp;&amp; [ -e $var ]</div><div class="line">then </div><div class="line">	echo &quot;...&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<ul>
<li><strong>在<code>test</code>命令中我们可以使用<code>-a</code> 选项来表示逻辑与。</strong></li>
<li>将上述命令改写：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if [ -n $var -a -e $var ]</div><div class="line">then </div><div class="line">	echo &quot;...&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<h3 id="6-2-2-逻辑或"><a href="#6-2-2-逻辑或" class="headerlink" title="6.2.2 逻辑或||"></a>6.2.2 逻辑或<code>||</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NOW=&apos;data +%a&apos;</div><div class="line">if [ &quot;$NOW&quot; = &quot;MON&quot; ] || [ &quot;$NOW&quot; = &quot;SAT&quot; ] </div><div class="line">then </div><div class="line">	echo &quot;...&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<ul>
<li>上述脚本中我们使用<code>&quot;[[ ]]&quot;</code> 代替<code>&quot;[]&quot;</code>，那么次脚本会简介一些</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NOW=&apos;data +%a&apos;</div><div class="line">if [[ $NOW = &quot;MON&quot; || $NOW = &quot;SAT&quot; ]]</div><div class="line">then </div><div class="line">	echo &quot;...&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<ul>
<li><strong>与<code>test</code>命令的<code>-a</code>选项类似，我们可以使用<code>test</code>命令的<code>-o</code>选项来表示逻辑或</strong></li>
<li>将上述命令改写成：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 定义变量NOW,并将计算得到的今天是星期几赋值给变量NOW</div><div class="line">NOW=&apos;data +%a&apos;</div><div class="line">if [ &quot;$NOW&quot; = &quot;MON&quot; -o &quot;$NOW&quot; = &quot;$SAT&quot; ]</div><div class="line">then </div><div class="line">	echo &quot;...&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<h3 id="6-2-3-逻辑非-“-”"><a href="#6-2-3-逻辑非-“-”" class="headerlink" title="6.2.3 逻辑非 “!”"></a>6.2.3 逻辑非 “!”</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">if [! -d /home/benny]</div><div class="line">then </div><div class="line">	mkdir /home/benny</div><div class="line">else</div><div class="line">	echo &quot;the directory is exist&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<h2 id="6-3-case语句实例"><a href="#6-3-case语句实例" class="headerlink" title="6.3 case语句实例"></a>6.3 case语句实例</h2><ul>
<li>case语句是多级的if…then…else…fi语句很好的替代方式。</li>
<li>它可以让一个条件与多个模式相比较，而且case语句的结构的读写比较方便</li>
<li>case语句的语法实例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">case EXPRESSION in </div><div class="line">	PATTERN 1 )</div><div class="line">			CONSEQUENT-COMMANDS</div><div class="line">;;</div><div class="line">	PATTERN 2 )</div><div class="line">			CONSEQUENT-COMMANDS</div><div class="line">;;</div><div class="line">	</div><div class="line">	PATTERN N )</div><div class="line">			CONSEQUENT-COMAANDS</div><div class="line">;;</div><div class="line">esac</div></pre></td></tr></table></figure>
<blockquote>
<p><code>case</code>语句结构一定要以<code>&quot;esac&quot;</code>结尾，每一个命令列表都以两个<code>&quot;;;&quot;</code>为终结，只有最后一个命里该列表的<code>&quot;;;&quot;</code>可以被省略。</p>
</blockquote>
<ul>
<li>通过一个<code>Linux</code>下信号处理的脚本来学习<code>case</code>语句的使用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"># ===============================</div><div class="line">#	FILE： killsignal.sh</div><div class="line">#	USAGE: ./killsignal.sh</div><div class="line"># 	DESCRIPTION:</div><div class="line"># 	AUTHOR:	benny</div><div class="line">#	CREATED: 10/24/2013</div><div class="line"># ===============================</div><div class="line">if [ $# -lt 2]</div><div class="line">then </div><div class="line">	echo &quot;...&quot;</div><div class="line">	exit</div><div class="line">fi</div><div class="line"></div><div class="line">case &quot;$1&quot; in</div><div class="line">	1)</div><div class="line">		echo &quot;...&quot;</div><div class="line">;;</div><div class="line">	2)</div><div class="line">	kill -SIGHUP $2</div><div class="line">;;</div><div class="line">	*)</div><div class="line">	echo &quot;前面的都没有匹配，则匹配此选项&quot;</div><div class="line">esac</div></pre></td></tr></table></figure>
<ul>
<li><strong>多重模式匹配的case语句的脚本实例：</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"># ===============================</div><div class="line">#	FILE： killsignal.sh</div><div class="line">#	USAGE: ./killsignal.sh</div><div class="line"># 	DESCRIPTION:</div><div class="line"># 	AUTHOR:	benny</div><div class="line">#	CREATED: 10/24/2013</div><div class="line"># =============================== </div><div class="line">NOW=&apos;date +%a&apos;</div><div class="line"></div><div class="line">case $NOW in</div><div class="line">	# 若今天为星期一</div><div class="line">	Mon)</div><div class="line">		echo &quot;FULL Backup&quot;</div><div class="line">;;</div><div class="line"></div><div class="line">	#若今天为星期二、星期三、星期四</div><div class="line">	Tue | Wed | Thu )</div><div class="line">	echo &quot;Partial backup&quot;</div><div class="line">;;</div><div class="line">	# 若今天为星期六、星期天</div><div class="line">	Sat | Sun)</div><div class="line">	echo &quot;no backup&quot;</div><div class="line">;;</div><div class="line">	*)</div><div class="line">	echo &quot;notihing&quot;</div><div class="line">;;</div><div class="line"></div><div class="line">exac</div></pre></td></tr></table></figure>
<h2 id="7-1-for循环"><a href="#7-1-for循环" class="headerlink" title="7.1 for循环"></a>7.1 for循环</h2><ul>
<li>首先，循环条件中使用的变量必须是已经初始化的，然后在循环中开始执行</li>
<li>在每一次循环开始时，进行一次测试</li>
<li>重复的执行一个代码块</li>
</ul>
<h3 id="7-1-1-for循环语法"><a href="#7-1-1-for循环语法" class="headerlink" title="7.1.1 for循环语法"></a>7.1.1 for循环语法</h3><ul>
<li>语法结构</li>
<li>for循环的基本语法结构如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">for VAR in item1 item2 ... itemN</div><div class="line">do</div><div class="line">	command1</div><div class="line">	command2</div><div class="line">	...</div><div class="line">	commandN</div><div class="line">done</div></pre></td></tr></table></figure>
<ul>
<li>for循环变量的内容的语法：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">for VAR in $fileName</div><div class="line">do</div><div class="line">	command1</div><div class="line">	command2</div><div class="line">	...</div><div class="line">	commandN</div><div class="line">done</div></pre></td></tr></table></figure>
<ul>
<li>for循环命令替换语法：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">for var in $(Linux-command-name) </div><div class="line"># 或者使用 for VAR in &apos;Linux-command-name&apos;</div><div class="line">do</div><div class="line">	command1</div><div class="line">	command2</div><div class="line">	...</div><div class="line">	commandN</div><div class="line">done</div></pre></td></tr></table></figure>
<ul>
<li>在for循环中，每次指定列表中的（item1…itemN） 新值被赋值给变量VAR后，for循环都会执行一次，它将重复的执行do和done之间的所有语句，知道条件不满足时为止。</li>
<li>这些值通常都是<ul>
<li>字符串</li>
<li>数字</li>
<li>命令行参数</li>
<li>文件名</li>
<li>Linux命令的输出</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#=====================================</div><div class="line">#	FILE： killsignal.sh</div><div class="line">#	USAGE: ./killsignal.sh</div><div class="line"># 	DESCRIPTION:	简单的使用for循环脚本</div><div class="line"># 	AUTHOR:	benny</div><div class="line">#	CREATED: 10/24/2013</div><div class="line">#==========================</div><div class="line"></div><div class="line">for i in 1 2 3  # 从1~3循环</div><div class="line">do</div><div class="line">	echo &quot;the for loop is run $i times&quot;</div><div class="line">done</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#=====================================</div><div class="line">#	FILE： killsignal.sh</div><div class="line">#	USAGE: ./killsignal.sh</div><div class="line"># 	DESCRIPTION:	使用变量内容的for循环脚本实例</div><div class="line"># 	AUTHOR:	benny</div><div class="line">#	CREATED: 10/24/2013</div><div class="line">#==========================</div><div class="line"></div><div class="line">filenames=&quot;/etc/yp.conf /etc/nsswitch.conf /etc/auto.master&quot;</div><div class="line"></div><div class="line">for file in $filenames</div><div class="line">do</div><div class="line">	[ -f $file ] &amp;&amp;  echo &quot;the file $file was found &quot; || echo &quot;the file is not found&quot;</div><div class="line">done</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#=====================================</div><div class="line">#	FILE： killsignal.sh</div><div class="line">#	USAGE: ./killsignal.sh</div><div class="line"># 	DESCRIPTION:	使用变量内容的for循环脚本实例</div><div class="line"># 	AUTHOR:	benny</div><div class="line">#	CREATED: 10/24/2013</div><div class="line">#==========================</div><div class="line">echo &quot;Printing file list in /tmp diretroy:&quot;</div><div class="line">for file in &apos;ls /etm/*&apos;</div><div class="line">do </div><div class="line">	echo $file</div><div class="line">done</div></pre></td></tr></table></figure>
<ul>
<li>for循环还有三项表达式语法：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">for ((  EXP1； EXP2; #XP3 ))</div><div class="line">do</div><div class="line">	command1</div><div class="line">	command2</div><div class="line">	...</div><div class="line">	commandN</div><div class="line">done</div></pre></td></tr></table></figure>
<ul>
<li>EXP1 初始化表达式</li>
<li>EXP2 循环测试活条件</li>
<li>EXP3 计算表达式</li>
</ul>
<h2 id="7-2-while-循环"><a href="#7-2-while-循环" class="headerlink" title="7.2 while 循环"></a>7.2 while 循环</h2><h3 id="7-2-1-while-循环语法"><a href="#7-2-1-while-循环语法" class="headerlink" title="7.2.1 while 循环语法"></a>7.2.1 while 循环语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">while [ Condition ]</div><div class="line">do</div><div class="line">	Command1</div><div class="line">	Command2</div><div class="line">	...</div><div class="line">	CommandN	</div><div class="line">done</div></pre></td></tr></table></figure>
<ul>
<li>while循环示例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#=====================================</div><div class="line">#	FILE： killsignal.sh</div><div class="line">#	USAGE: ./killsignal.sh</div><div class="line"># 	DESCRIPTION:	简单的使用while循环</div><div class="line"># 	AUTHOR:	benny</div><div class="line">#	CREATED: 10/24/2013</div><div class="line">#==========================</div><div class="line"></div><div class="line">var=1</div><div class="line">while [ $var -lt 3 ]</div><div class="line">do</div><div class="line">	echo &quot;the for loop is run $var times&quot;</div><div class="line">	var=$((var+1))</div><div class="line">done</div></pre></td></tr></table></figure>
<h3 id="7-2-2-无限while循环"><a href="#7-2-2-无限while循环" class="headerlink" title="7.2.2 无限while循环"></a>7.2.2 无限while循环</h3><ul>
<li>定义一个无限while循环可以使用如下3种命令：<ul>
<li>true 命令 —— 不做任何事，表示成功，返回退出状态码0</li>
</ul>
</li>
<li>语法格式：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">while :</div><div class="line">do</div><div class="line">	echo	&quot;...&quot;</div><div class="line">done</div><div class="line"># 或</div><div class="line">while true</div><div class="line">do</div><div class="line">	echo	&quot;...&quot;</div><div class="line">done</div><div class="line"># 或</div></pre></td></tr></table></figure>
<ul>
<li>菜单驱动程序，持续运行知道用户按下”4”为止</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">while :</div><div class="line">do</div><div class="line">	clear	# 清理终端屏幕</div><div class="line">	echo &quot;=============&quot;</div><div class="line">	echo &quot; MAIN - MENU &quot;</div><div class="line">	echo &quot;=============&quot;</div><div class="line">	</div><div class="line">	read -p &quot;Enter your choice[ 1 - 4 ]:&quot; choice  # 从标准输入中读取用户的输入，并赋值给变量choice</div><div class="line">	case $choice in</div><div class="line">	1)</div><div class="line">	echo &quot;Today is $(date + %Y-%m-%d)&quot;</div><div class="line">	;;</div><div class="line">	2)</div><div class="line">	uname -a  # 打印系统信息</div><div class="line">	;;</div><div class="line">	3)</div><div class="line">	w</div><div class="line">	read -p &quot;Press [Enter] key to continue...&quot; readEnterKey</div><div class="line">	;;</div><div class="line">	4)</div><div class="line">	echo &quot;buy&quot;</div><div class="line">	exit 0</div><div class="line">	;;</div><div class="line">	*)</div><div class="line">	echo &quot;Error : Invalid option&quot;</div><div class="line">	read -p &quot;Presdss key to continue....&quot; readEnterKey</div><div class="line">	;;</div><div class="line">	exac</div></pre></td></tr></table></figure>
<h2 id="7-3-until-循环语句实例"><a href="#7-3-until-循环语句实例" class="headerlink" title="7.3 until 循环语句实例"></a>7.3 until 循环语句实例</h2><ul>
<li>until循环与while循环类似，也同样基于一个条件，但until循环的判断条件正好与while循环的判断条件相反，<strong>until循环在条件为假的条件下才会持续的运行</strong>。一旦条件被满足，即为真，就会退出循环。</li>
<li>语法如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">until  [ COMMANDS ]</div><div class="line">do </div><div class="line">	command1</div><div class="line">	command2</div><div class="line">	...</div><div class="line">	commandN</div><div class="line">done</div></pre></td></tr></table></figure>
<ul>
<li>until循环与while循环相比：<ul>
<li>until 循环执行直到返回0状态</li>
<li>while 循环执行直到返回非0状态</li>
<li>until循环总是执行至少一次</li>
</ul>
</li>
</ul>
<h2 id="7-4-select-循环语句"><a href="#7-4-select-循环语句" class="headerlink" title="7.4 select 循环语句"></a>7.4 select 循环语句</h2><ul>
<li>语法格式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">select VAR in LIST</div><div class="line">do </div><div class="line">	command1</div><div class="line">	command2</div><div class="line">	...</div><div class="line">	commandN</div><div class="line">done</div></pre></td></tr></table></figure>
<ul>
<li><p>select循环有以下特点</p>
<ul>
<li>select语句使用Bash内部变量PS3的值作为它的提示符之一</li>
<li>打印到屏幕上的列表LIST中的每一项会在前面加上一个数字编号</li>
<li>当用户输入的数字与某一个数字编号一致时，列表中的相应的项即被赋予变量VAR</li>
<li>如果用户输入的内容为空，将重新显示列表LIST中的项和提示符信息</li>
<li>可以通过添加一个退出选项，或按CTRL+C 或 CTRL+D组合键退出select循环</li>
</ul>
</li>
<li><p>脚本实例</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">PS3=&quot;Run command:&quot;</div><div class="line"></div><div class="line">select choice in date w hostname &quot;uname -a &quot; Exit //指定select循环列表</div><div class="line">do</div><div class="line">	case $choice in</div><div class="line">		date)</div><div class="line">			echo &quot;==============&quot;</div><div class="line">			echo &quot;Current System date and time:&quot;</div><div class="line">			ehco &quot;================&quot;</div><div class="line">			;;</div><div class="line">		w)</div><div class="line">			echo &quot;==============&quot;</div><div class="line">			echo &quot;who is log on:&quot;</div><div class="line">			ehco &quot;================&quot;</div><div class="line">			;;</div><div class="line">		hostname)</div><div class="line">			echo &quot;==============&quot;</div><div class="line">			echo &quot;Hostname :&quot;</div><div class="line">			ehco &quot;================&quot;</div><div class="line">		;;</div><div class="line">		&quot;uname -a&quot;)</div><div class="line">			echo &quot;==============&quot;</div><div class="line">			echo &quot;System information&quot;</div><div class="line">			ehco &quot;================&quot;</div><div class="line">		;;</div><div class="line">		Exit)</div><div class="line">		echo &quot;Bye!&quot;</div><div class="line">		exit 0</div><div class="line">		;;</div><div class="line">	esac</div><div class="line">done</div></pre></td></tr></table></figure>
<h2 id="7-5-循环控制"><a href="#7-5-循环控制" class="headerlink" title="7.5 循环控制"></a>7.5 循环控制</h2><h3 id="7-5-1-break-语句"><a href="#7-5-1-break-语句" class="headerlink" title="7.5.1 break 语句"></a>7.5.1 break 语句</h3><ul>
<li>break 语句用于从for、while、until、select循环中退出、停止循环的执行</li>
<li>语法如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">break [n]</div></pre></td></tr></table></figure>
<ul>
<li>n 代表嵌套循环的层级，如果指定了n，break将推出n级嵌套循环。</li>
<li>如果没有指定n或n不大于等于1，则退出状态码为0，否则退出状态码为n</li>
<li><strong>此实例需要查看</strong></li>
</ul>
<h3 id="7-5-2-continue-语句"><a href="#7-5-2-continue-语句" class="headerlink" title="7.5.2 continue 语句"></a>7.5.2 continue 语句</h3><ul>
<li>continue 语句用于跳过循环体中剩余的命令直接跳转到循环体的顶部，而重新开始循环的下一次重复。</li>
<li>continue语句可以应用于for、while或until循环</li>
<li>语法如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">continue [n]</div></pre></td></tr></table></figure>
<h2 id="第8章-Shell函数"><a href="#第8章-Shell函数" class="headerlink" title="第8章 Shell函数"></a>第8章 Shell函数</h2><h2 id="8-1-函数的定义"><a href="#8-1-函数的定义" class="headerlink" title="8.1 函数的定义"></a>8.1 函数的定义</h2><ul>
<li>函数语法：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 函数名</div><div class="line">function_name()&#123;</div><div class="line">    # 函数体 ，在函数中执行的命令行</div><div class="line">    commands...</div><div class="line">     # 参数返回，return语句是可选的</div><div class="line">     #如果没有return语句，则以函数最后一条命令的运行结果作为返回值</div><div class="line">     #如果使用return语句，则return后跟数值n（数值范围：0~255）</div><div class="line">    [ return ini; ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>或者如果你愿意，可以在函数名字前面加上关键字<code>function</code> </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function function_name()&#123;</div><div class="line">    commands...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>如果有<code>function</code>关键字，则可以省略圆括号<code>&quot;()&quot;</code>。函数体，也叫做符合命令块，是包含在<code>{}</code>之间的命令列表。</p>
</li>
<li><p><strong>在一行内定义一个函数，此时，函数体内的个命令之间必须使用分号<code>;</code>隔开，语法如下</strong></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function name &#123; commands1; commands2;commandsN; &#125;</div><div class="line"></div><div class="line">或者</div><div class="line"></div><div class="line">name() &#123;  commands1; commands2;commandsN;  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>可以使用内部命令<code>unset</code>的’-f’选线过来取消函数的定义</li>
</ul>
<blockquote>
<p>通常情况下，函数体外的大括号与函数体之间必须用空白符（空格、回车或制表符等）换行符分开，因为大括号{}是保留字，但只有<code>{</code>或<code>}</code>与其中间的命令列表呗加空格或者其它Shell元字符（比如 ， 或； 或|等）分隔时，才能被识别为保留字</p>
</blockquote>
<h2 id="8-2-函数的参数，变量与返回值"><a href="#8-2-函数的参数，变量与返回值" class="headerlink" title="8.2 函数的参数，变量与返回值"></a>8.2 函数的参数，变量与返回值</h2><h3 id="8-2-1-向函数传递参数"><a href="#8-2-1-向函数传递参数" class="headerlink" title="8.2.1 向函数传递参数"></a>8.2.1 向函数传递参数</h3><ul>
<li>Shell函数有自己的命令行参数，函数使用特殊变量$1,$2,…,$n来范文传递给它的参数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">name()&#123;</div><div class="line">    arg1=$1</div><div class="line">    arg1=$2</div><div class="line">    arg1=$3</div><div class="line">    command on $arg1</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>使用如下语法来调用函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name foo bar</div></pre></td></tr></table></figure>
<ul>
<li><p>上面的函数中</p>
<ul>
<li>name = 函数名</li>
<li>foo  = 参数1 传递给函数的第一个参数（位置参数$1）</li>
<li>bar  = 参数2 传递给函数的第二个参数（位置参数$2）</li>
</ul>
</li>
<li><p>示例</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#=====================================</div><div class="line">#	FILE： passed.sh</div><div class="line">#	USAGE: ./passed.sh</div><div class="line"># 	DESCRIPTION:	</div><div class="line"># 	AUTHOR:	benny</div><div class="line">#	CREATED: 10/24/2013</div><div class="line">#==========================</div><div class="line"></div><div class="line"># 定义函数passed</div><div class="line">passwed()&#123;</div><div class="line">    </div><div class="line">    # 定义变量a，将此传递给函数passed()的第一个参数赋值给此变量</div><div class="line">    a=$1</div><div class="line">    # 打印特殊函数0的值，即脚本名称</div><div class="line">    echo &quot;passed()： \$0 is $0 &quot; </div><div class="line">    </div><div class="line">    # 打印位置参数1的值，即指定给函数的第一个参数</div><div class="line">    echo &quot;passed() ： \$1 is $1&quot;</div><div class="line">    echo &quot;passed() ： \$a is $a&quot;</div><div class="line">    </div><div class="line">    # 打印传递给函数passed的参数个数</div><div class="line">    echo &quot;passed() ： total args is $#&quot;</div><div class="line">      </div><div class="line">    # 打印传递给函数passed()的所有函数</div><div class="line">    echo &quot;passed() ： total args is $@&quot;</div><div class="line">   # 打印传递给函数passed()的所有函数</div><div class="line">    echo &quot;passed() ： total args is $*&quot;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">echo &quot;**** calling passed() first time *****&quot;</div><div class="line"></div><div class="line"># 调用函数passwd()并指定一个参数&apos;one&apos;</div><div class="line">passed one</div><div class="line"></div><div class="line">echo &quot;**** calling passed() second time *****&quot;</div><div class="line">passed one two three</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">out:</div><div class="line">**** calling passed() first time *****</div><div class="line">passed()： $0 is ./passed.sh </div><div class="line">passed() ： $1 is one</div><div class="line">passed() ： $a is one</div><div class="line">passed() ： total args is 1</div><div class="line">passed() ： total args is one</div><div class="line">passed() ： total args is one</div><div class="line">**** calling passed() second time *****</div><div class="line">passed()： $0 is ./passed.sh </div><div class="line">passed() ： $1 is one</div><div class="line">passed() ： $a is one</div><div class="line">passed() ： total args is 3</div><div class="line">passed() ： total args is one two three</div><div class="line">passed() ： total args is one two three</div></pre></td></tr></table></figure>
<ul>
<li><p>在Shell函数中：</p>
<ul>
<li>所有函数参数都可以通过$1,$2,…,$N来访问</li>
<li><code>$0</code> 指代Shell脚本的名字</li>
<li><code>$*</code> <code>$@</code> 保存传递给函数所有的参数</li>
<li><code>$#</code> 保存村递给函数的位置参数的个数</li>
</ul>
</li>
<li><p>8.2.2 本地变量</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#!/bin/bash</div><div class="line">#=====================================</div><div class="line">#	FILE： fvar.sh</div><div class="line">#	USAGE: ./fvar.sh</div><div class="line"># 	DESCRIPTION:	本地变量</div><div class="line"># 	AUTHOR:	benny</div><div class="line">#	CREATED: 10/24/2013</div><div class="line">#==========================</div><div class="line"># 定义函数create_logFile</div><div class="line">create_logFile()&#123;</div><div class="line">    #修改变量d的名字</div><div class="line">    d=$1</div><div class="line">    echo &quot;create_logFile : d is set to $d&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 定义变量d</div><div class="line">d=/tmp/diskUsage.log</div><div class="line"></div><div class="line">echo &quot;Before calling create_logFile d is set to $d&quot;</div><div class="line"></div><div class="line"># 调用函数create_logFile并指定一个参数</div><div class="line"></div><div class="line">create_logFile &quot;/home /benny/diskUsage.log&quot;</div><div class="line">echo &quot;After calling create_logFile d is set to $d&quot;</div><div class="line"></div><div class="line"></div><div class="line">out:</div><div class="line">[root@iZ251k7t70aZ myscript]# ./fvar.sh </div><div class="line">Before calling create_logFile d is set to /tmp/diskUsage.log</div><div class="line">create_logFile : d is set to /home /benny/diskUsage.log</div><div class="line">After calling create_logFile d is set to /home /benny/diskUsage.log</div></pre></td></tr></table></figure>
<ul>
<li>通常情况下，我们可以使用local命令来创建一个本地变量</li>
<li>语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">local var=value</div><div class="line">local varName</div><div class="line"></div><div class="line">或者</div><div class="line"></div><div class="line">function name()&#123;</div><div class="line"></div><div class="line">    # 定义一个本独变量var</div><div class="line">    local var=$1</div><div class="line">    command1 on $var</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>local命令只能在函数内部使用</li>
<li>local命令将变量名的可见范围控制在函数内部</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line"># 定义全变量d</div><div class="line">d=/tmp/diskUsage.log</div><div class="line"></div><div class="line">#定义函数create_logFile</div><div class="line">function create_logFile()&#123;</div><div class="line">        # 定义本地变量，这个变量制度及此函数可见</div><div class="line">        local d=$1</div><div class="line">echo &quot;create_logFIle（）： d is set to $d&quot;</div><div class="line">&#125;</div><div class="line">echo &quot;Before caling create_logFIle d is set to $d&quot;</div><div class="line"></div><div class="line"># 调用函数create_logFile() 并指定一个参数</div><div class="line">create_logFile &quot;/home/benny/diskUsage.log&quot;</div><div class="line"></div><div class="line">echo &quot;After calling create_log_file() d is set to $d&quot;</div><div class="line">~                                                       </div><div class="line"></div><div class="line">out:</div><div class="line">[root@iZ251k7t70aZ myscript]# ./localfvar.sh </div><div class="line">Before caling create_logFIle d is set to /tmp/diskUsage.log</div><div class="line">create_logFIle（）： d is set to /home/benny/diskUsage.log</div><div class="line">After calling create_log_file() d is set to /tmp/diskUsage.log</div></pre></td></tr></table></figure>
<h2 id="8-2-3-使用return命令"><a href="#8-2-3-使用return命令" class="headerlink" title="8.2.3 使用return命令"></a>8.2.3 使用<code>return</code>命令</h2><ul>
<li>如果函数理由<code>Shell</code>内置命令<code>return</code>，则函数执行到<code>return</code>语句时结束，并且返回到Shell脚本中调用函数位置的下一个命令。</li>
<li>如果return带有一个数值型参数，则这个参数就是函数的返回值，返回值的最大值是<code>255</code>；否则函数的返回值就是函数体内最后一个执行的命令的返回状态</li>
<li>示例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ myscript]# vi checkpid.sh </div><div class="line">#!/bin/bash</div><div class="line">checkpid()&#123;</div><div class="line"># 定义本地变量</div><div class="line">local  i</div><div class="line"># 使用for循环遍历传递给此函数的所有参数</div><div class="line">for i in $*</div><div class="line">do</div><div class="line"></div><div class="line"># 如果目录/proc/$i存在，则执行此函数返回</div><div class="line"># 在一般的Linux系统中，如果进程正在运行，则在/proc目录下会存在一个以进程号命名的子目录</div><div class="line"></div><div class="line">[ -d &quot;/proc/$i&quot; ] &amp;&amp; return  0</div><div class="line">done</div><div class="line"></div><div class="line"># 返回1</div><div class="line">return 1</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">checkpid $pid1 $pis2 $pid3</div><div class="line"></div><div class="line">if [ $? == 0  ]</div><div class="line">then</div><div class="line">    echo &quot;the one of them is running&quot;</div><div class="line">else</div><div class="line">    echo &quot;These Pids are not running&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">out:</div><div class="line">[root@iZ251k7t70aZ myscript]# ./checkpid.sh </div><div class="line">These Pids are not running</div></pre></td></tr></table></figure>
<ul>
<li>上述中的<code>if</code>判断语句也可以改成，因为返回值是<code>0</code>或<code>1</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">checkpid $pid1 $pis2 $pid3</div><div class="line"></div><div class="line">if [ $? == 0  ]</div><div class="line">then</div><div class="line">    echo &quot;the one of them is running&quot;</div><div class="line">else    </div><div class="line">    echo &quot;These Pids are not running&quot;</div><div class="line">fi</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">改成</div><div class="line"></div><div class="line">if （checkpid $pid1 $pis2 $pid3） ; then</div><div class="line">    echo &quot;the one of them is running&quot;</div><div class="line">else</div><div class="line">    echo &quot;These Pids are not running&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<h2 id="8-3-函数的调用"><a href="#8-3-函数的调用" class="headerlink" title="8.3 函数的调用"></a>8.3 函数的调用</h2><h3 id="8-3-1-在Shell命令行调用函数"><a href="#8-3-1-在Shell命令行调用函数" class="headerlink" title="8.3.1 在Shell命令行调用函数"></a>8.3.1 在Shell命令行调用函数</h3><ul>
<li>在命令行中，可以通过直接输入函数的名字，来调用或引用函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$   funciton_name</div></pre></td></tr></table></figure>
<ul>
<li>定义yDay()函数来显示昨天的日期</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ myscript]# yDay() &#123; date --date=&apos;1 day ago&apos;; &#125;</div></pre></td></tr></table></figure>
<ul>
<li>引用函数dDay()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ myscript]# yDay</div><div class="line">Wed Jul 13 15:09:44 CST 2016</div></pre></td></tr></table></figure>
<h3 id="8-3-2-在脚本中调用函数"><a href="#8-3-2-在脚本中调用函数" class="headerlink" title="8.3.2 在脚本中调用函数"></a>8.3.2 在脚本中调用函数</h3><ul>
<li>要在脚本中调用该函数<ul>
<li>首先要创建函数</li>
<li><strong>确保函数位于调用此函数的语句之前</strong></li>
</ul>
</li>
<li>示例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#!/bin/bash</div><div class="line"></div><div class="line"># 定义变量TEST</div><div class="line">TEST=&quot; /tmp/fileName&quot;</div><div class="line"></div><div class="line"># 调用delete_file; 失败</div><div class="line">delete_file</div><div class="line"></div><div class="line">#定义函数delete_file</div><div class="line">delete_file()&#123;</div><div class="line">echo &quot;Deleting file....&quot;</div><div class="line"></div><div class="line">out:</div><div class="line">[root@iZ251k7t70aZ myscript]# ./dfile.sh </div><div class="line">./dfile.sh: line 7: delete_file: command not found</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>出错的原因是因为脚本的执行顺序是从上而下运行</li>
<li>调用了未定义的方法</li>
<li>为了避免出现这样的问题，<strong>要在脚本的开头定义和编写函数</strong></li>
<li>改写一下上面的脚本</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#!/bin/bash</div><div class="line"></div><div class="line"># 定义函数delete_file</div><div class="line">function delete_file()&#123;</div><div class="line">echo    &quot;Delteting ....&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"># 定义变量TEST</div><div class="line">TEST=&quot; /tmp/fileName&quot;</div><div class="line"></div><div class="line"># 调用delete_file; </div><div class="line">delete_file</div></pre></td></tr></table></figure>
<h3 id="8-3-3-从函数文件中调用函数"><a href="#8-3-3-从函数文件中调用函数" class="headerlink" title="8.3.3 从函数文件中调用函数"></a>8.3.3 从函数文件中调用函数</h3><ul>
<li>你可以把所有的函数存储到一个文件中</li>
<li>你可以把所有订单而函数加载到当前脚本或者是命令行</li>
<li>加载函数文件中所有函数的语法如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$   . /path/to/your/functions.sh</div><div class="line"></div><div class="line">或者</div><div class="line"></div><div class="line">$   . functions.sh</div></pre></td></tr></table></figure>
<ul>
<li>示例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#!/bin/bash</div><div class="line">#====================</div><div class="line">#       FILE: functions.sh</div><div class="line">#       USAGE:./functions.sh</div><div class="line">#       DESCRIPTION:</div><div class="line">#====================</div><div class="line"></div><div class="line"># 定义变量</div><div class="line">declare -r TRUE=0</div><div class="line">declare -r FLASE=1</div><div class="line">declare -r PASSWD_FILE=/etc/passwd</div><div class="line"></div><div class="line">################################</div><div class="line">#用途： 将字符串转换成小写</div><div class="line">#参数：</div><div class="line">#       $1 -&gt; 要转换为小写的字符串</div><div class="line">################################</div><div class="line"></div><div class="line">function to_lower()&#123;</div><div class="line"></div><div class="line"># 定义本地变量str</div><div class="line">local str=&quot;$@&quot;</div><div class="line"></div><div class="line"># 定义本地变量output</div><div class="line">local output</div><div class="line"></div><div class="line"># 将变量str的值转换为小写后赋值给变量output</div><div class="line">output=$(tr &apos;[A_Z]&apos; &apos;[a-z]&apos;&lt;&lt;&lt;&quot;&#123;str&#125;&quot;)</div><div class="line">echo $output</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>加载一个函数文件到脚本中</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ myscript]# vi functiondemo.sh </div><div class="line"></div><div class="line">#!/bin/bash</div><div class="line">#============================</div><div class="line">#       FILE: functionDemo.sh</div><div class="line">#       AUTHOR: benny</div><div class="line">#       DESCRIPTION: 加载函数文件到脚本</div><div class="line">#       USAGE:  ./funcionDemo.sh</div><div class="line">#============================</div><div class="line"></div><div class="line"># 加载函数文件  functions.sh</div><div class="line"># 这里的路径需要根据你的手机环境做改动</div><div class="line">. /usr/local/myscript/functions.sh</div><div class="line"></div><div class="line"># 定义本地变量</div><div class="line"># var1 是没有被function.sh使用个</div><div class="line">var1=&quot;The manabharata is the longst and , arguably, one of the greatest epicpoems in any language&quot;</div><div class="line"></div><div class="line"># 调用函数is_root 执行成功或失败，会分别打印不同的信息</div><div class="line">is_root &amp;&amp; echo &quot;you are logged in as root&quot; || echo &quot;you are not logged in as root&quot;</div><div class="line"></div><div class="line"># 调用函数is_user_exists</div><div class="line">is_user_exists &quot;benny&quot; &amp;&amp; e &quot;Account found&quot; || echo &quot;Account not found&quot;</div><div class="line"></div><div class="line"># 打印变量的值</div><div class="line">echo -e &quot;*** orignal quote : \n$&#123;var1&#125;&quot;</div><div class="line"></div><div class="line"># 调用函数to_lower()</div><div class="line"># 将$var1 作为参数传递给to_lower()</div><div class="line"># 将echo内使用命令替换</div><div class="line">echo -e &quot;*** Lowercase version : \n$&#123;to_lower $(var1)&#125;&quot;</div></pre></td></tr></table></figure>
<h3 id="8-3-4-递归函数调用"><a href="#8-3-4-递归函数调用" class="headerlink" title="8.3.4 递归函数调用"></a>8.3.4 递归函数调用</h3><ul>
<li>递归函数是重复调用其自身的函数，并且没有递归调用次数的限制</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">factorial()&#123;</div><div class="line">    </div><div class="line">    # 定义本地变量</div><div class="line">    local i=$1</div><div class="line">    # 定义本地变量f</div><div class="line">    local f</div><div class="line">    # 声明变量i为整数</div><div class="line">    declare -i f</div><div class="line">    </div><div class="line">    # factorial被调用直到$f的值&lt;=2</div><div class="line">    # 开始递归</div><div class="line">    </div><div class="line">    [ $i -le 2 ] &amp;&amp; echo $i || &#123;f=$((i-1));f=$(factorial $f);f=$(( f * i ));echo $f; &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"># 显示函数的用户</div><div class="line">[ $# -eq 0 ] &amp;&amp; &#123; echo &quot;Usage : $0 number &quot;;exit 1; &#125;</div><div class="line"></div><div class="line"># 调用函数factorial</div><div class="line">factorial $1</div></pre></td></tr></table></figure>
<ul>
<li><strong>在Bash下，递归函数执行速度慢，应尽可能避免使用递归函数。</strong></li>
</ul>
<h3 id="将函数放在后台运行"><a href="#将函数放在后台运行" class="headerlink" title="将函数放在后台运行"></a>将函数放在后台运行</h3><ul>
<li><code>&amp;</code><strong>操作符可以将命令放在后台运行并释放你的终端，同样也可以将函数放在后台运行</strong></li>
<li>语法规则</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 定义函数name</div><div class="line">name()&#123;</div><div class="line">    echo &quot;Do something&quot;</div><div class="line">    sleep 1</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 将函数放在后台运行</div><div class="line"></div><div class="line">    name &amp;</div><div class="line"></div><div class="line"># 继续执行其他命令</div><div class="line">    commmands...</div></pre></td></tr></table></figure>
<ul>
<li>示例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line"># prigress.sh 当进行备份时显示进度</div><div class="line"></div><div class="line"># 定义函数progress</div><div class="line">progress()&#123;</div><div class="line">    </div><div class="line">    echo -n &quot;$0: please wait ....&quot;</div><div class="line">    while true</div><div class="line">    do</div><div class="line">    echo -n &quot;.&quot;</div><div class="line">    # 休眠5秒</div><div class="line">    sleep 5</div><div class="line">    done</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"># 定义函数dobackup</div><div class="line">dobackup()&#123;</div><div class="line">    # 运行备份命令</div><div class="line">    tar zcvf /dev/st0 /home &gt;/dev/null 2&gt;&amp;1</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"># 将函数放在后台运行</div><div class="line">progress &amp;</div><div class="line"></div><div class="line"># 保存函数 progress() 运行的进程号</div><div class="line"># 需要使用PID来结束此函数</div><div class="line">MYSELF=$!</div><div class="line"></div><div class="line">echo &quot;$MYSELF&quot;</div><div class="line"></div><div class="line"># 开始备份</div><div class="line"># 转移控制到函数dobackup</div><div class="line">dobackup</div><div class="line"></div><div class="line"># 杀死进程</div><div class="line">kill $MYSELF &gt;/dev/null 2&gt;&amp;1</div><div class="line">echo -n &quot;...done&quot;</div><div class="line">echo</div></pre></td></tr></table></figure>
<ul>
<li>shell中可能经常能看到：<code>&gt;/dev/null 2&gt;&amp;1</code><ul>
<li>命令的结果可以通过<code>%&gt;</code>的形式来定义输出</li>
<li><code>/dev/null</code> 代表空设备文件</li>
<li><code>&gt;</code> 代表重定向到哪里，例如：<code>echo &quot;123&quot; &gt; /home/123.txt</code></li>
<li><code>1</code> 表示<code>stdout</code>标准输出，系统默认值是<code>1</code>，所以<code>&gt;/dev/null</code>等同于<code>1&gt;/dev/null</code></li>
<li><code>1</code> 表示<code>stderr</code>标准错误</li>
<li><code>&amp;</code> 表示等同于的意思，<code>2&gt;&amp;1</code>，表示<code>2</code>的输出重定向等同于<code>1</code></li>
<li><code>1&gt;/dev/null</code> 首先表示标准输出重定向到空设备文件，也就是不输出任何信息到终端，说白了就是不显示任何信息。</li>
<li><code>2&gt;&amp;1</code> 接着，标准错误输出重定向等同于标准输出，因为之前标准输出已经重定向到了空设备文件，所以标准错误输出也重定向到空设备文件。</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[代码整洁之道]]></title>
      <url>/2016/07/02/160706_clean_code/</url>
      <content type="html"><![CDATA[<h2 id="本书结构"><a href="#本书结构" class="headerlink" title="本书结构"></a>本书结构</h2><p><img src="http://ww3.sinaimg.cn/large/610dc034jw1f5byokn81tj20dw0hiwfe.jpg" alt="就问你美不美"></p>
<a id="more"></a>
<hr>
<p><img src="http://7xjlkb.com1.z0.glb.clouddn.com/cleancode.png" alt="代码整洁之道"></p>
<hr>
<h2 id="有意义的命名"><a href="#有意义的命名" class="headerlink" title="有意义的命名"></a>有意义的命名</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><h3 id="2-2-名副其实"><a href="#2-2-名副其实" class="headerlink" title="2.2 名副其实"></a>2.2 名副其实</h3><ul>
<li>变量和函数或类的名称应该已经答复了大问题，他该告诉你，他为什么会存在，他做什么事，应该怎么用。</li>
<li>如果<code>名称</code>需要注释来补充，那就不算是名副其实。<blockquote>
<p>以下的代码不能让人一目了然</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;<span class="keyword">int</span>[]&gt; flaggedCells = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">int</span>[]&gt;();   (<span class="number">1</span>)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] cell : gameBoard)&#123;</div><div class="line">    <span class="keyword">if</span>(cell[STATUS_VALUE] == FLAGGED)&#123;...&#125;           (<span class="number">2</span>)  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<blockquote>
<p>可以更进一步，修改成：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;Cell&gt; flaggedCells = <span class="keyword">new</span> ArrayList&lt;Cell&gt;();</div><div class="line"><span class="keyword">for</span>(Cell cell : gameBoard )&#123;</div><div class="line">    <span class="keyword">if</span>(cell.isFlagged())&#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p>主要有两点：</p>
<ul>
<li>(1)、将int[]的List换成Cell的List</li>
<li>(2)、将状态判断提取成一个函数<code>isFlagged</code></li>
</ul>
</blockquote>
<h3 id="2-3-避免误导"><a href="#2-3-避免误导" class="headerlink" title="2.3 避免误导"></a>2.3 避免误导</h3><ul>
<li>程序员必须避免留下掩藏代码本意的错误线索，应当避免使用与本意相悖的词。</li>
<li>不要使用<code>hp</code>、<code>aix</code>、<code>sco</code>作为变量名，因为他们都是UNIX平台或类UNIX平台的专有名词。</li>
<li>不要使用account<code>List</code> 来指称一组账号，除非他真的是List类型。</li>
<li>不要使用不同之处较小的名称。例如：<code>XYZControllerForEfficientHandingOfStrings</code>和<code>XYZControllerForEfficientStorageOfStrings</code><blockquote>
<p>误导性名称是最可怕的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (O == <span class="number">1</span>) &#123; </div><div class="line">    a == <span class="number">0l</span>;    </div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    l = <span class="number">01</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h3 id="2-4-做有意义的区分"><a href="#2-4-做有意义的区分" class="headerlink" title="2.4 做有意义的区分"></a>2.4 做有意义的区分</h3><ul>
<li>以数字系列命名(a1、a2、…aN)是依意命名的对立面。这样的名称纯属误导————完全没有提供正确的信息；没有提供导向作者意图的线索。<blockquote>
<p>例如一下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyChars</span><span class="params">(<span class="keyword">char</span> a1[], <span class="keyword">char</span> a2[])</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; a1.length; i++)&#123;</div><div class="line">        a2[i] == a1[i];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<blockquote>
<p><strong>如果将参数名改为<code>source</code>和<code>destination</code>，这个函数就会好很多。</strong></p>
</blockquote>
<ul>
<li>废话是另一种没意义的区分。假如你有一个<code>Product</code>类。如果还有一个<code>ProductInfo</code>类和<code>ProductData</code>类，<br>虽然他们名称不同，但意思却无区别。info和Data就像a、an、the一样是意义含混的废话。</li>
<li>废话都是冗余。<code>Variable</code>一词永远都不要出现在变量名中。<code>Table</code>一词永远不要出现在表明中。<br>nameString会比name好么？难道Name会是浮点数么？<blockquote>
<p>看下面这种情况：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getActiveAccount();</div><div class="line">getActiveAccounts();</div><div class="line">getActiveAccountInfo();</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<blockquote>
<p>　程序员怎么能知道调用哪个呢？如果缺少明确约定，变量 <code>moneyAmount</code> 与 <code>money</code> 没有区别，<br> <code>customerInfo</code> 与 <code>customer</code> 没有区别，<code>accountData</code>与<code>account</code>没有区别，<br> 要区分名称就要以读者能鉴别不同之处的方式来区分。</p>
</blockquote>
<h3 id="2-5-使用读的出来的名称"><a href="#2-5-使用读的出来的名称" class="headerlink" title="2.5 使用读的出来的名称"></a>2.5 使用读的出来的名称</h3><ul>
<li>总结下来就是一句，不要自造词，引号使用恰当的英语单词。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DtaRcrd102P</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> Date genymdhms;</div><div class="line">    <span class="keyword">private</span> Date modymdhms;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String pszqint = <span class="string">"102"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在看看下面的代码：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> Date generationTimstamp;</div><div class="line">    <span class="keyword">private</span> Date modificationTimestamp;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String recordId = <span class="string">"102"</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这样应该不会发生，生成时间戳被设置成明天了，应该不会了吧。</p>
</blockquote>
<h3 id="2-6-使用可搜索的名称"><a href="#2-6-使用可搜索的名称" class="headerlink" title="2.6 使用可搜索的名称"></a>2.6 使用可搜索的名称</h3><ul>
<li>不要使用单字母如<code>e</code>或者单数字如<code>3</code>来作为变量名，它是英文中最常用的字母，在每个程序、每段代码中都有可能出现。</li>
<li><strong>名称长短与其作用域大小相对应</strong>，比如你就3行代码，你就没必要起很长的变量名，你都可以搜索的到。</li>
</ul>
<h3 id="2-7-避免使用编码"><a href="#2-7-避免使用编码" class="headerlink" title="2.7 避免使用编码"></a>2.7 避免使用编码</h3><h4 id="2-7-1-匈牙利语标记法"><a href="#2-7-1-匈牙利语标记法" class="headerlink" title="2.7.1 匈牙利语标记法"></a>2.7.1 匈牙利语标记法</h4><ul>
<li><code>Fortran</code>语言要求首字符体现出类型。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  类型变化时，名称并不变化。</span></div><div class="line">PhoneNumber phoneString;</div></pre></td></tr></table></figure>
<h4 id="2-7-2-成员前缀"><a href="#2-7-2-成员前缀" class="headerlink" title="2.7.2 成员前缀"></a>2.7.2 成员前缀</h4><ul>
<li>不必使用m_前缀来标明成员变量。</li>
</ul>
<hr>
<pre><code>private String m_dsc;
</code></pre><blockquote>
<p>远不如使用：</p>
</blockquote>
<pre><code>private String description;
</code></pre><blockquote>
<p>人们很快会无视前缀(或后缀)，只看到名称中有意义的部分。代码读的越多严重就越没有前缀。</p>
</blockquote>
<h4 id="2-7-3-接口和实现"><a href="#2-7-3-接口和实现" class="headerlink" title="2.7.3 接口和实现"></a>2.7.3 接口和实现</h4><ul>
<li>一个创建形状的抽象工厂，该工厂是个接口，要用具体类来实现。你如何来命名。</li>
<li><code>IShapeFactory</code> 或者是 <code>ShapeFactory</code></li>
<li>我喜欢不加修饰的接口，不喜欢 <del>IShapeFactory</del>，前导字母I被滥用到了说好听点是干扰，说难听点根本就是废话的程度。</li>
</ul>
<h3 id="2-8避免思维映射"><a href="#2-8避免思维映射" class="headerlink" title="2.8避免思维映射"></a>2.8避免思维映射</h3><ul>
<li>一个专业的程序员知道，明确才是王道，专业程序员能善用其能，编写其他人能理解的代码。</li>
</ul>
<h3 id="2-9类名"><a href="#2-9类名" class="headerlink" title="2.9类名"></a>2.9类名</h3><ul>
<li>类名和对象名应该是名词或名词短语，如 <code>Customer</code>、<code>WikiPage</code>、 <code>Account</code>、 <code>AddressParser</code> 。避免使用 <del>Manager</del>、<del>Processor</del> 、<del>Data</del> 和 <del>Info</del> 这样的类名。</li>
<li><strong><em>类名不应该是动词</em></strong>。</li>
</ul>
<h3 id="2-10-方法名"><a href="#2-10-方法名" class="headerlink" title="2.10 方法名"></a>2.10 方法名</h3><ul>
<li>方法名应该是动词或动词短语，如 <code>postPayment</code>、<code>deletePage</code>、<code>save</code> 。属性访问器、修改器和断言应该根据其值命名，并根据<em><em>Javabean</em></em>标准加上 <code>get</code> <code>set</code> 和 <code>is</code> 前缀。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String name = employee.getName();</div><div class="line">customer.setName(&quot;Benny&quot;);</div><div class="line">if ( payCheck.isPosted() )&#123; ... &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<blockquote>
<p><strong>重载构造器</strong>，使用描述了参数的静态工厂方法命名，例如：</p>
</blockquote>
<hr>
<pre><code>Complex fulcrumPoint = Complex.FromReadNumber(23.0);
</code></pre><hr>
<blockquote>
<p>通常好于：</p>
</blockquote>
<hr>
<pre><code>Complex fulcrumpoint = new Complex(23.0);
</code></pre><h3 id="2-11-别扮可爱"><a href="#2-11-别扮可爱" class="headerlink" title="2.11 别扮可爱"></a>2.11 别扮可爱</h3><ul>
<li>不要用俗话或俚语。例如，不要使用<code>whack</code>()来表示<code>kill</code>()。别用<code>eatMyshorts</code>()这类与文化紧密相关的词语表示<code>abort</code>()。</li>
</ul>
<h3 id="2-12-每个概念对应一个词"><a href="#2-12-每个概念对应一个词" class="headerlink" title="2.12 每个概念对应一个词"></a>2.12 每个概念对应一个词</h3><ul>
<li>简单点说不要里面即出现<code>DriverManager</code>又出现<code>Protocol-Controller</code>，<br>为什么不全用<code>Controler</code>或者<code>Manager</code>，这种名称会让人觉得这两个对象是不同类型的，也分属不同的类。</li>
</ul>
<h3 id="2-13-别用双关语"><a href="#2-13-别用双关语" class="headerlink" title="2.13 别用双关语"></a>2.13 别用双关语</h3><ul>
<li>在多个类中都有<code>add</code>方法，该方法通过增加或连接两个现存值来获得新值。</li>
<li>假如要写个新类，该类中只有一个方法，将单个参数放到<code>Collection</code>中去，此时如果叫做<code>add</code>的话，<br>这样做貌似和其他<code>add</code>方法保持了一致， 但实际上语义不同，应该用<code>insert</code>或者<code>append</code>之类的词来命名才对，<br>将该方法命名为<code>add</code>，就是双关语了。</li>
</ul>
<h3 id="2-13-使用解决方案领域名称"><a href="#2-13-使用解决方案领域名称" class="headerlink" title="2.13 使用解决方案领域名称"></a>2.13 使用解决方案领域名称</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery plugin 插件编写时遇到的问题总结]]></title>
      <url>/2016/06/30/160630_jqueryplugin/</url>
      <content type="html"><![CDATA[<h2 id="1、模板方法替换时，正则使用问题。"><a href="#1、模板方法替换时，正则使用问题。" class="headerlink" title="1、模板方法替换时，正则使用问题。"></a>1、模板方法替换时，正则使用问题。</h2><p><img src="http://ww1.sinaimg.cn/mw690/692a6bbcgw1f4fz7s830fj20gg0o00y5.jpg" alt="就问你美不美"></p>
<a id="more"></a>
<ul>
<li><p>主要问题就是在js里面，要双斜杠转义</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var regex = new RegExp(&quot;(\\&#123;\\&#123;&quot;+i+&quot;\&#125;\&#125;)&quot;,&quot;g&quot;);</div></pre></td></tr></table></figure>
</li>
<li><p>贴一下所有的代码</p>
</li>
</ul>
<hr>
<blockquote>
<p><code>template模板</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var template =</div><div class="line">    &quot; &lt;div class=&apos;tag&apos;&gt;&lt;font&gt;*&lt;/font&gt;&lt;span&gt;&#123;&#123;0&#125;&#125;&lt;/span&gt;&lt;/div&gt; &quot; + /*证件照*/</div><div class="line">    &quot; &lt;img alt=&apos;&apos; src=&apos;$&#123;contextPath&#125;/js/AjaxFileUploader/loading.gif&apos; style=&apos;display: none;&apos; id=&apos;&#123;&#123;1&#125;&#125;&apos;&gt;&quot; +   //id=&apos;loadingimgA&apos;</div><div class="line">    &quot; &lt;input class=&apos;real_file&apos; type=&apos;file&apos; name=&apos;upload&apos; onchange=&apos;uploadPicture(&quot;+&apos;&#123;&#123;2&#125;&#125;&apos;+&quot;)&apos; accept=&apos;image/*&apos; capture=&apos;camera&apos; style=&apos;display: none&apos;  id=&apos;&#123;&#123;3&#125;&#125;&apos; /&gt; &quot; +</div><div class="line">    &quot; &lt;input class=&apos;real_button uploadImg required&apos; id=&apos;&#123;&#123;3&#125;&#125;&apos; type=&apos;button&apos; value=&apos;上传图片&apos; style=&apos;display:none&apos; action=&apos;&#123;&#123;8&#125;&#125;&apos;&gt;&quot; +</div><div class="line">    &quot; &lt;input type=&apos;hidden&apos; id=&apos;&#123;&#123;4&#125;&#125;&apos; name=&apos;&#123;&#123;5&#125;&#125;&apos; value=&apos;&apos; /&gt; &quot; +  //  id=&quot;imgShowHidden&quot; name=&quot;myAccountVo.credentialImgFrontPath&quot;</div><div class="line">    &quot; &lt;/div&gt;&quot; +</div><div class="line">    &quot; &lt;/div&gt;&quot;;</div></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>mobDefault集合map参数</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var mobDefault = &#123;</div><div class="line">           title : &quot;证件照&quot; , //&#123;&#123;0&#125;&#125;    </div><div class="line">           inp_file_id : img_id,  //&#123;&#123;1&#125;&#125; </div><div class="line">           img_container_id : img_id+&quot;Container&quot;, //&#123;&#123;2&#125;&#125;</div><div class="line">           img_sample_id : img_id+&quot;Show&quot; , //&#123;&#123;3&#125;&#125;</div><div class="line">           inp_file_id : img_id,  //&#123;&#123;4&#125;&#125;      </div><div class="line">           img_loading_id : img_id+&quot;Loading&quot;,  //&#123;&#123;5&#125;&#125;</div><div class="line">           &#125;;</div></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>模板替换方法</code> 定义在String的原型里面了，直接拓展String的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 模板替换方法</div><div class="line"> */</div><div class="line">String.prototype.template=String.prototype.template || function()&#123;</div><div class="line">    var args=arguments[0];</div><div class="line">    var i = 0;</div><div class="line">    for(var key in args)&#123;</div><div class="line">        var regex = new RegExp(&quot;(\\&#123;\\&#123;&quot;+i+&quot;\&#125;\&#125;)&quot;,&quot;g&quot;); </div><div class="line">        mobileTemplate = mobileTemplate.replace(regex, args[key]);</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">    return mobileTemplate;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[博客初搭建]]></title>
      <url>/2016/06/28/160628_first/</url>
      <content type="html"><![CDATA[<h2 id="博客说明"><a href="#博客说明" class="headerlink" title="博客说明"></a>博客说明</h2><ul>
<li>以后我的每一篇博文中，都会附带一个美女高清大图。</li>
<li>算是作为一个程序员的福利。</li>
</ul>
<p><img src="http://images.cnitblog.com/news/66372/201411/131709068356625.png" alt="image"><br><a id="more"></a></p>
]]></content>
    </entry>
    
  
  
</search>
