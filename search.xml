<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[关于单例的那点事]]></title>
      <url>/2016/09/18/160918_singleton/</url>
      <content type="html"><![CDATA[<h2 id="关于单例的那点事"><a href="#关于单例的那点事" class="headerlink" title="关于单例的那点事"></a>关于单例的那点事</h2><p><img src="http://ww2.sinaimg.cn/large/610dc034gw1f7bm1unn17j20u00u00wm.jpg" alt="0830"></p>
<a id="more"></a>
<ul>
<li>描述:<ul>
<li>Singleton(单例)是设计模式的一种,为了保证一个类仅有一个实例，并提供一个访问它的全局访问点。</li>
</ul>
</li>
<li>主要特点:     <ol>
<li>单例类确保自己只有一个实例(构造函数私有:不被外部实例化,也不被继承)。</li>
<li>单例类必须自己创建自己的实例。</li>
<li>单例类必须为其他对象提供唯一的实例。</li>
</ol>
</li>
<li>单例模式的应用：<ul>
<li>资源管理器,回收站,打印机资源,线程池,缓存,配置信息类,管理类,控制类,门面类,代理类通常被设计为单例类</li>
<li>如果程序有多个类加载器又同时使用单例模式就有可能多个单例并存就要找相应解决方法了</li>
</ul>
</li>
<li>实现方法:<ul>
<li>如果应用程序总是创建并使用单例实例或在创建和运行时开销不大。</li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="http://blog.csdn.net/u013256816/article/details/50427061" target="_blank" rel="external">单例模式的四种写法，占位符模式的写法比较OK</a>，详见如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Elvis</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Elvis</span><span class="params">()</span></span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Elvis INSTANCE = <span class="keyword">new</span> Elvis();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Elvis <span class="title">getInstance</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomethingElse</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>但这都是基于一个条件：确保不会通过反射机制调用私有的构造器。这里举个例子，通过JAVA的反射机制来“攻击”单例模式：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElvisReflectAttack</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InstantiationException,</span></div><div class="line">	IllegalAccessException,</div><div class="line">	IllegalArgumentException,</div><div class="line">	InvocationTargetException,</div><div class="line">	NoSuchMethodException,</div><div class="line">	SecurityException</div><div class="line">	&#123;</div><div class="line">            Class&lt;?&gt; classType = Elvis.class;</div><div class="line">            </div><div class="line">            Constructor&lt;?&gt; c = classType.getDeclaredConstructor(<span class="keyword">null</span>);</div><div class="line">            c.setAccessible(<span class="keyword">true</span>);</div><div class="line">            Elvis e1 = (Elvis)c.newInstance();</div><div class="line">            Elvis e2 = Elvis.getInstance();</div><div class="line">            System.out.println(e1==e2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>运行结果：<strong>false</strong></li>
<li>可以看到</li>
<li>通过反射获取构造函数，然后调用 <code>setAccessible(true)</code> 就可以调用私有的构造函数，所有e1和e2是两个不同的对象。</li>
</ul>
<hr>
<blockquote>
<p>如果要抵御这种攻击，可以<strong>修改构造器，让它在被要求创建第二个实例的时候抛出异常</strong>。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">            <span class="keyword">if</span> (flag == <span class="keyword">false</span>) &#123;</div><div class="line">                flag = !flag;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"单例模式被狗日了！"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomethingElse</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>测试代码：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSingleton</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class&lt;Singleton&gt; classType = Singleton.class;</div><div class="line"></div><div class="line">            Constructor&lt;Singleton&gt; c = classType.getDeclaredConstructor(<span class="keyword">null</span>);</div><div class="line">            c.setAccessible(<span class="keyword">true</span>);</div><div class="line">            </div><div class="line">            Singleton e1 = (Singleton) c.newInstance();</div><div class="line">            Singleton e2 = Singleton.getInstance();</div><div class="line">            </div><div class="line">            System.out.println(e1 == e2);</div><div class="line">            </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>执行结果:    可以看到，<strong>成功的阻止了单例模式被破坏</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Exception in thread <span class="string">"main"</span> java.lang.ExceptionInInitializerError</div><div class="line">	at algorithms.Singleton.getInstance(Singleton.java:<span class="number">27</span>)</div><div class="line">	at algorithms.TestSingleton.main(TestSingleton.java:<span class="number">20</span>)</div><div class="line">Caused by: java.lang.RuntimeException: 单例模式被狗日了！</div><div class="line">	at algorithms.Singleton.&lt;init&gt;(Singleton.java:<span class="number">16</span>)</div><div class="line">	at algorithms.Singleton.&lt;init&gt;(Singleton.java:<span class="number">3</span>)</div><div class="line">	at algorithms.Singleton$SingletonHolder.&lt;clinit&gt;(Singleton.java:<span class="number">22</span>)</div><div class="line">	... <span class="number">2</span> more</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>从JDK1.5开始，实现Singleton还有新的写法，只需编写一个包含单个元素的枚举类型。推荐写法：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumSingleton &#123;</div><div class="line"></div><div class="line">    INSTANCE;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"hello wolrd"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Singleton singleton = Singleton.INSTANCE;</div><div class="line">        singleton.doSomething();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>EnumSingleton 测试类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEnumSingleton</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span></span></div><div class="line">            NoSuchMethodException,</div><div class="line">            SecurityException,</div><div class="line">            InstantiationException,</div><div class="line">            IllegalAccessException,</div><div class="line">            IllegalArgumentException,</div><div class="line">            InvocationTargetException,</div><div class="line">            InvocationTargetException &#123;</div><div class="line"></div><div class="line">        Class&lt;EnumSingleton&gt; classType = EnumSingleton.class;</div><div class="line">        Constructor&lt;EnumSingleton&gt; c = (Constructor&lt;EnumSingleton&gt;) classType.getDeclaredConstructor();</div><div class="line">        c.setAccessible(<span class="keyword">true</span>);</div><div class="line">        c.newInstance();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>执行结果</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Exception in thread <span class="string">"main"</span> java.lang.NoSuchMethodException: algorithms.EnumSingleton.&lt;init&gt;()</div><div class="line">	at java.lang.Class.getConstructor0(Class.java:<span class="number">3082</span>)</div><div class="line">	at java.lang.Class.getDeclaredConstructor(Class.java:<span class="number">2178</span>)</div><div class="line">	at algorithms.TestEnumSingleton.main(TestEnumSingleton.java:<span class="number">22</span>)</div></pre></td></tr></table></figure>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Effective Java 第二版]]></title>
      <url>/2016/09/17/160917_effective_java/</url>
      <content type="html"><![CDATA[<h2 id="Effective-Java-第二版"><a href="#Effective-Java-第二版" class="headerlink" title="Effective Java 第二版"></a>Effective Java 第二版</h2><p><img src="http://ww3.sinaimg.cn/large/610dc034jw1f756vb8zl2j20u011haec.jpg" alt="0825"></p>
<a id="more"></a>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><ul>
<li>java语言支持四种类型：<ul>
<li>接口【interface】</li>
<li>类【class】</li>
<li>数组【array】</li>
<li>基本类型【primitive】</li>
</ul>
</li>
</ul>
<blockquote>
<p>前三种类型成为引用类型，类实例和数组是对象，而基本类型的值不是对象。</p>
</blockquote>
<ul>
<li>类的成员组成：<ul>
<li>域【field】</li>
<li>方法【method】</li>
<li>成员类【member class】</li>
<li>成员接口【member interface】</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>方法签名</strong>【signature】由它的<strong>名称</strong>和<strong>所有参数类型</strong>组成；<strong>签名不包括它的返回类型</strong></p>
</blockquote>
<h2 id="第二章-创建和销毁对象"><a href="#第二章-创建和销毁对象" class="headerlink" title="第二章 创建和销毁对象"></a>第二章 创建和销毁对象</h2><h3 id="第1条-考虑使用静态工厂方法替代构造器"><a href="#第1条-考虑使用静态工厂方法替代构造器" class="headerlink" title="第1条 考虑使用静态工厂方法替代构造器"></a>第1条 考虑使用静态工厂方法替代构造器</h3><ul>
<li>获得对象实例常用的两种方式：<ul>
<li>公开的构造器</li>
<li>公开的静态工厂方法</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> b ? Boolean.TRUE : Boolean.FALSE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>类可以通过静态工厂方法提供它的客户端，而不是通过构造器。</p>
</blockquote>
<ul>
<li>提供静态工厂方法而不是公有的构造器，这样做有几大优势<ol>
<li>它们有名称</li>
<li>不必在每次调用它们的时候都创建一个新的对象</li>
<li>它们可以返回原返回类型的任何子类型的对象</li>
<li>在创建参数化类型实例的时候，它们使代码变得更加简洁</li>
</ol>
</li>
<li>静态工厂方法的主要缺点<ol>
<li>类如果不含有公开的或者受保护的构造器，就不能被子类化</li>
<li>它们与其他的静态方法实际上没有任何区别</li>
</ol>
</li>
</ul>
<blockquote>
<p>逐一解释：</p>
</blockquote>
<ul>
<li><strong>静态工厂方法与构造器不同的第一大优势在于，他们有名称</strong><ul>
<li>如果构造器本身没有明确的描述正被返回的对象，那么具有适当名称的静态工厂会更容易使用，代码更容易阅读</li>
<li>一个类只能够有一个带有制定签名的构造器</li>
<li>由于静态工厂有名称，所以描述更为清楚</li>
<li>当一个类需要多个带有相同签名的构造器时，就用静态工厂方法替代构造器，并慎重的选择名称以便突出它们之间的区别</li>
</ul>
</li>
<li><strong>静态工厂方法与构造器不同的第二大优势在于，不必在每次调用他们的时候都创建一个新的对象</strong><ul>
<li>这使得不可变类可以使用预先构建好的实例，或者将构建好的实例缓存起来，进行重复利用，从而避免创建不必要的重复对象。</li>
<li>如果程序经常请求创建对象，并且创建对象的代价很高，则这项技术可以极大地提升性能</li>
<li>静态方法能够为重复的调用返回相同的对象，这样有助于类总能严格的控制在某个时刻哪些实例应该存在，这种类被称作<strong>实例受控的类</strong></li>
<li>设立受控的类可以确保它是 Singleton 或者是不可实例化的</li>
<li>它还使得不可变的类可以确保不会存在两个相等的实例<ul>
<li>即当且仅当  <code>a==b</code> 的时候才有 <code>a.equals(b)</code> 为 <code>true</code></li>
<li>如果类保证了这一点就可以使用 <code>==</code>  操作符来替代 <code>equals (Object)</code> 方法，这样就可以提升性能</li>
</ul>
</li>
<li>枚举类型保证了这一点</li>
</ul>
</li>
<li><strong>静态工厂方法与构造器不同的第三大优势在于，它们可以返回原返回类型的任何子类型的对象</strong><ul>
<li>静态工厂方法返回的对象所属的类，在编写包含该静态工厂方法的类时可以不必存在，这种领过的静态工厂方法构成了<strong>服务提供者框架</strong>的基础<ul>
<li>服务提供者框架是指一个系统，多个服务提供者实现一个服务，系统为服务提供者的客户端提供多个市县，并把它们从多个实现中解耦出来</li>
<li>服务提供者框架中有三个重要的组件<ul>
<li>服务接口：这是提供者实现的</li>
<li>提供者注册API：这是系统用来注册实现</li>
<li>服务访问API：客户端用来获取服务实例，是“灵活的静态工厂”</li>
<li>服务提供者API：提供者负责创建其服务实现的实例</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><strong>静态工厂方法与构造器不同的第四大优势在于，在创建参数化类型实例的时候，它们使代码变得更加简洁</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Map&lt;String,List&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;String,List&lt;String&gt;&gt;	()</div><div class="line"><span class="comment">// 1.7 以后， 添加了 类型推导</span></div><div class="line">Map&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div></pre></td></tr></table></figure>
<ul>
<li>我们使用静态工厂方法,先定义一个泛型方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V&gt; <span class="function">Map&lt;K, V&gt; <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashMap&lt;K, V&gt;();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>[x] 是可以使用下面这句简洁的代码代替上面这段繁琐的声明</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Map&lt;String,List&lt;String&gt;&gt; map = HashMap.newInstance();</div></pre></td></tr></table></figure>
<ul>
<li><strong>静态工厂的第一个缺点在于，类如果不含有公开的或者受保护的构造器，就不能被子类化</strong><ul>
<li>要想将Collections Framework 中的任何方法的实现类子类化，这是不可能的。</li>
<li>它鼓励程序员使用复合【composition】，而不是继承</li>
</ul>
</li>
<li><strong>静态工厂的第二个缺点在于，他们与其他的静态方法没有任何区别</strong><ul>
<li>静态工厂的一些惯用名称如下：</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>valueOf</td>
<td>不严格的讲，该方法返回的实例与它的参数具有相同的值。这中方法实际上就是<strong>类型转换方法</strong></td>
</tr>
<tr>
<td>of</td>
<td>valueOf的一种更为简洁的替代，在EnumSet中使用并流行起来</td>
</tr>
<tr>
<td>getInstance</td>
<td>返回的实例是通过方法的参数来描述的，但是不能够说与参数具有同样的值</td>
</tr>
<tr>
<td>newInstance</td>
<td>像getInstance一样单newInstance能够确保能够返回的每个实例都与其所有其他实例不同</td>
</tr>
<tr>
<td>getType</td>
<td>像getInstatnce一样，但是在工厂方法处于不同的类中的时候使用。Type表示工厂方法返回的对象类型</td>
</tr>
<tr>
<td>newType</td>
<td>想newInstance一样，但是在工厂方法处于不同的类中的时候使用。Type表示工厂方法所返回的对象类型</td>
</tr>
</tbody>
</table>
<blockquote>
<p>静态工厂方法和公有构造器都各有用处，静态工厂通常更加合适，因此切忌第一反应就是提供共有的构造器，而不先考虑静态工厂</p>
</blockquote>
<h3 id="第2条-遇到多个构造器参数时要考虑用构建器"><a href="#第2条-遇到多个构造器参数时要考虑用构建器" class="headerlink" title="第2条 遇到多个构造器参数时要考虑用构建器"></a>第2条 遇到多个构造器参数时要考虑用构建器</h3><blockquote>
<p>静态工厂和构造器都有个共同的局限性：<strong>它们都不能很好的扩展到大量的可选参数</strong></p>
</blockquote>
<ul>
<li>[x] 使用重载构造器模式构建实例</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> by benny on 2016/9/17.</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> * <span class="doctag">@description</span> 通过重载构造器模式</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstrutorBuilder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConstrutorBuilder</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> calories)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(servingSize, calories, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConstrutorBuilder</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> calories, <span class="keyword">int</span> fat)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(servingSize, calories, fat, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConstrutorBuilder</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> calories, <span class="keyword">int</span> fat, <span class="keyword">int</span> sodium)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.servingSize = servingSize;</div><div class="line">        <span class="keyword">this</span>.calories = calories;</div><div class="line">        <span class="keyword">this</span>.fat = fat;</div><div class="line">        <span class="keyword">this</span>.sodium = sodium;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 虽然值传递了两个值 仍调用了所有参数的构造器</span></div><div class="line">        ConstrutorBuilder testBuilder = <span class="keyword">new</span> ConstrutorBuilder(<span class="number">240</span>, <span class="number">8</span>);</div><div class="line"></div><div class="line">        ConstrutorBuilder testBuilder1 = <span class="keyword">new</span> ConstrutorBuilder(<span class="number">240</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">35</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>[x] 使用JavaBean模式构建实例</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> by benny on 2016/9/17.</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> * <span class="doctag">@description</span> 使用JavaBean模式</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaBeanBuilder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> servingSize = -<span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> calories = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> fat = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sodium = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JavaBeanBuilder</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServingSize</span><span class="params">(<span class="keyword">int</span> servingSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.servingSize = servingSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCalories</span><span class="params">(<span class="keyword">int</span> calories)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.calories = calories;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFat</span><span class="params">(<span class="keyword">int</span> fat)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.fat = fat;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSodium</span><span class="params">(<span class="keyword">int</span> sodium)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sodium = sodium;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        JavaBeanBuilder builder = <span class="keyword">new</span> JavaBeanBuilder();</div><div class="line">        builder.setServingSize(<span class="number">240</span>);</div><div class="line">        builder.setCalories(<span class="number">35</span>);</div><div class="line">        builder.setFat(<span class="number">100</span>);</div><div class="line">        builder.setSodium(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用构建器模式：</p>
</blockquote>
<ul>
<li>[x] 不使用抽象工厂构建实例</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> by benny on 2016/9/17.</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> * <span class="doctag">@description</span> 构建器模式</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuildBuilder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">        <span class="comment">// 必选参数 必须设置</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</div><div class="line"></div><div class="line">        <span class="comment">// 可选参数  可以设置也不可不设置</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fat;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> sodium;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> calories)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.servingSize = servingSize;</div><div class="line">            <span class="keyword">this</span>.calories = calories;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">fat</span><span class="params">(<span class="keyword">int</span> fat)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.fat = fat;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sodium</span><span class="params">(<span class="keyword">int</span> sodium)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.sodium = sodium;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> BuildBuilder <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BuildBuilder(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BuildBuilder</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.servingSize = builder.servingSize;</div><div class="line">        <span class="keyword">this</span>.calories = builder.calories;</div><div class="line">        <span class="keyword">this</span>.fat = builder.fat;</div><div class="line">        <span class="keyword">this</span>.sodium = builder.sodium;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        BuildBuilder build = <span class="keyword">new</span> BuildBuilder</div><div class="line">                .Builder(<span class="number">240</span>, <span class="number">19</span>)</div><div class="line">                .sodium(<span class="number">30</span>)</div><div class="line">                .fat(<span class="number">100</span>)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>[x] 使用抽象工厂</li>
</ul>
<ol>
<li>定义抽象工厂</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> by benny on 2016/9/17.</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> * <span class="doctag">@description</span> 抽象工厂</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BuilderFactory</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function">T <span class="title">build</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>使用构建器模式构建实例</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> by benny on 2016/9/17.</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> * <span class="doctag">@description</span> 构建器模式</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuildBuilder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">implements</span> <span class="title">BuilderFactory</span>&lt;<span class="title">BuildBuilder</span>&gt; </span>&#123;</div><div class="line">        <span class="comment">// 必选参数 必须设置</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</div><div class="line"></div><div class="line">        <span class="comment">// 可选参数  可以设置也不可不设置</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fat;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> sodium;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> calories)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.servingSize = servingSize;</div><div class="line">            <span class="keyword">this</span>.calories = calories;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">fat</span><span class="params">(<span class="keyword">int</span> fat)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.fat = fat;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sodium</span><span class="params">(<span class="keyword">int</span> sodium)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.sodium = sodium;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> BuildBuilder <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BuildBuilder(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BuildBuilder</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.servingSize = builder.servingSize;</div><div class="line">        <span class="keyword">this</span>.calories = builder.calories;</div><div class="line">        <span class="keyword">this</span>.fat = builder.fat;</div><div class="line">        <span class="keyword">this</span>.sodium = builder.sodium;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        BuildBuilder build = <span class="keyword">new</span> BuildBuilder.Builder(<span class="number">240</span>, <span class="number">19</span>)</div><div class="line">				.sodium(<span class="number">30</span>)</div><div class="line">                .fat(<span class="number">100</span>)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>总结：</p>
</blockquote>
<ul>
<li>重载构造器模式可行，但是当有许多参数的时候，客户端代码会很难编写，并且仍然较难以阅读。</li>
<li>构造器中参数如果很多的话，一长串类型相同的参数会导致一些微妙的错误，如果客户端不小心颠倒了其中两个参数的顺序，编译器也不会报错。</li>
</ul>
<hr>
<ul>
<li>JavaBean 模式弥补了重载构造器模式的不足，这种模式创建实例很容易，代码也很易读</li>
<li>在这种模式下，调用一个无参的构造器来创建对象，然后调用<code>setter()</code>方法来这是每个必要的参数，以及每个相关的可选参数。</li>
<li>遗憾的是，JavaBean模式自身有着很严重的缺点，因构造过程被分到几个调用中，在调用过程中，JavaBean可能处于不一致的状态，类无法仅通过构造器参数的有效性来保证一致性。</li>
</ul>
<hr>
<ul>
<li>Builder模式，技能保证凑在构造器模式那样的安全性，也能保证像JavaBeans模式那么好的可读性。</li>
<li>Builder模式，不直接生成想要的对象，而是利用所有必要参数的<strong>构造器（或者静态工厂）</strong>，得到一个builder对象，然后让客户端在builder对象上调用类似于setter的方法，来设置每个相关的可选参数。最后调用无参的<code>build()</code>方法来生成不可变的对象,这个builder是它构建的类的静态成员类</li>
<li>Builder模式也有自身的不足，为了常见对象，必须先创建它的构建器。</li>
<li>Builder模式还比重载构造器模式更加冗长，因为它只有在很多参数的时候才使用(比如四个或4个以上的参数)，但是记住，将来你可能需要添加参数。</li>
<li>如果一开始就使用构造器或者静态工厂，等到类需要多个参数时才添加构建器，就会无法控制，那些过时的构造器或者静态工厂十分不协调，因此，通常最好一开始就使用构建器模式</li>
</ul>
<blockquote>
<p>简而言之：<br>如果类的构造器或者静态工厂中具有多个参数，设计这种类的时候，<strong>Builder模式</strong>就是不错的选择，特别是当大多数参数都是可选的时候，与使用传统的重载构造器模式相比，使用Builder模式的客户端代码将更易于阅读和编写，构建器也比JavaBeans更加安全。</p>
</blockquote>
<h3 id="第3条-用私有构造器或者枚举类型强化-SIngleton-属性"><a href="#第3条-用私有构造器或者枚举类型强化-SIngleton-属性" class="headerlink" title="第3条 用私有构造器或者枚举类型强化 SIngleton 属性"></a>第3条 用私有构造器或者枚举类型强化 SIngleton 属性</h3><ul>
<li>Singleton 指仅仅被实例化一次的类</li>
<li>Singleton 通常被用来代表大写本质上唯一的系统组件，比如文件系统，因为无法给 Singleton 替换模拟实现，除非它实现一个充当起类型的接口</li>
</ul>
<blockquote>
<p>实现 Singleton 有两种方法，这两种方法都要把构造器保持为私有的，并导出公有的静态变量，一边允许客户端能够访问该类的唯一实例</p>
</blockquote>
<ul>
<li>[x] 第一种方法，共有静态变量是个final域</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">	<span class="comment">// 私有静态final域  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">	</div><div class="line">	<span class="comment">/* </span></div><div class="line">     * 私有构造器 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123; &#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</div><div class="line">		...</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>私有构造器仅被调用一次，用来实例化共有的静态 final 域<code>Singleton.INSTANCE</code></p>
</blockquote>
<ul>
<li>[x] 第二种方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">	<span class="comment">// 私有静态final域  </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">	</div><div class="line">	<span class="comment">/* </span></div><div class="line">     * 私有构造器 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123; &#125;</div><div class="line">	</div><div class="line">	<span class="comment">/* </span></div><div class="line">	 * 公有静态工厂方法 </div><div class="line">	 */ </div><div class="line">    <span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> INSTANCE;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;	...	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>对于<code>Singleton.getInstance()</code>的所有调用，都会返回一个对象引用</li>
<li>静态工厂方法的优势在于，提供了灵活性<ul>
<li>在不改变其API的前提下，我们可以改变该类是否为Singleton的想法</li>
</ul>
</li>
</ul>
<blockquote>
<p>为了利用这其中一种方法实现的 Singleton 类是可序列化的(Serializable)仅在声明中加上<code>implements Serializable</code> 是不够的。<br>为了维护并保证 Singleton，必须声明所有实例域都是瞬时的(transient)，并提供一个<code>readResole()</code>方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">	<span class="comment">// 私有静态final域  </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">	<span class="comment">/* </span></div><div class="line">     * 私有构造器 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123; &#125;</div><div class="line">	</div><div class="line">	<span class="comment">/* </span></div><div class="line">	 * 公有静态工厂方法 </div><div class="line">	 */  </div><div class="line">    <span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> INSTANCE;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">     * 反序列化确保只有一个实例 </div><div class="line">     * 必须提供该方法，以便重新指定反序列化得到的对象. </div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>[x] 从Java 1.5起，实现Singleton还有第三种方法，只需要编写一个包含单个元素的枚举类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</div><div class="line">    </div><div class="line">    INSTANCE;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"hello wolrd"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Singleton singleton = Singleton.INSTANCE;</div><div class="line">        singleton.doSomething();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这种方法在功能上与公有域方法相近，但是它更加简洁，无偿地提供了序列化机制，绝对防止多次实例化，即使是在面对复杂的序列化或者反射攻击（单例模式的反射攻击详情请参考：<a href="http://okjava.cn/2016/09/18/160918_singleton/" target="_blank" rel="external">关于单例的那点事</a>）的时候，虽然这种方法还没有被广泛采用，但是 <strong>单元素的枚举类型已经成为Singleton的最佳方法</strong> </p>
</blockquote>
<h3 id="第4条：-通过私有构造器强化不可实例化的能力"><a href="#第4条：-通过私有构造器强化不可实例化的能力" class="headerlink" title="第4条： 通过私有构造器强化不可实例化的能力"></a>第4条： 通过私有构造器强化不可实例化的能力</h3><ul>
<li>有时候你可能需要编写只包含静态方法和静态域的类</li>
<li>这样的工具类（utility class）不希望被实例化，实例化对它没有任何意义，然而在缺少显示构造器的情况下，编译器会自动提供一个公有的，无参的缺省构造器（default constructor）</li>
</ul>
<blockquote>
<p>企图通过将类做成抽象类来强制该类不可被实例化，这是行不通的。</p>
</blockquote>
<ul>
<li>虽然抽象类不能够被实例化，但是该抽象类可以被子类化，并且该子类可以被实例化</li>
<li>并且声明为抽象类，会误导用户以为这种类是专门为了继承而设计的</li>
<li>设置<strong>一个类不能被继承的两种方式</strong><ul>
<li>使用 <strong>final</strong> 修饰</li>
<li>将<strong>构造器</strong>用 <strong>private</strong> 修饰（构造器私有）</li>
</ul>
</li>
</ul>
<ul>
<li>[x] 由于只有当类中不包含显示的构造器时，编译器才会生成缺省的构造器，因此只要将这这个类包含有私有构造器，它就不能被实例化了</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParentClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span>  <span class="title">ParentClass</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SonClass</span> <span class="keyword">extends</span> <span class="title">ParentClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SonClass</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();		★★★★★</div><div class="line">        <span class="comment">// 此处无法编译通过 报错 there is no default constructor avialiable in ParentClass</span></div><div class="line">        <span class="comment">// 因为父类显式的将构造器私有 所有无法找到默认的构造器</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这种类也有一副作用，它使得一个类不能被子类化。所有的构造器都必须显式的活隐式地调用超类（superclass）构造器，在这种情况下，子类就没有可访问的超类构造器可调用了</li>
</ul>
<blockquote>
<p>这种情况下是可以的：能够编译通过</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestParentConstructer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Parent</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"我是父类"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>();</div><div class="line">            System.out.println(<span class="string">"我是子类"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Son s = <span class="keyword">new</span> TestParentConstructer().new Son();</div><div class="line">        AbstractClass a = <span class="keyword">new</span> AbstractClass() &#123;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java8]]></title>
      <url>/2016/09/07/160805_lambda/</url>
      <content type="html"><![CDATA[<h2 id="java8-基础知识"><a href="#java8-基础知识" class="headerlink" title="java8 基础知识"></a>java8 基础知识</h2><p><img src="http://ww3.sinaimg.cn/large/610dc034jw1f6aipo68yvj20qo0qoaee.jpg" alt="image"></p>
<a id="more"></a>
<h2 id="java8-Lambda表达式"><a href="#java8-Lambda表达式" class="headerlink" title="java8 Lambda表达式"></a>java8 Lambda表达式</h2><h3 id="从苹果List中找出红颜色的苹果"><a href="#从苹果List中找出红颜色的苹果" class="headerlink" title="从苹果List中找出红颜色的苹果"></a>从苹果List中找出红颜色的苹果</h3><ul>
<li>定义一个Bean类<code>Apple.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String color;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> weight;</div><div class="line"></div><div class="line">   <span class="comment">// 省略 getter 和 setter</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(String color,<span class="keyword">int</span> weight)</span> </span>&#123; <span class="keyword">this</span>.color = color; <span class="keyword">this</span>.weight = weight; &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"苹果的颜色是："</span>+color + <span class="string">"苹果的重量是："</span> + weight;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定义一个接口<code>AppleService.java</code>，里面包含一个过滤红色苹果的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppleService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">List&lt;Apple&gt; <span class="title">filterRedApple</span><span class="params">(List&lt;Apple&gt; list)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>实现方法<code>AppleServiceImpl.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleServiceImpl</span> <span class="keyword">implements</span> <span class="title">AppleService</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Apple&gt; <span class="title">filterRedApple</span><span class="params">(List&lt;Apple&gt; list)</span> </span>&#123;</div><div class="line">        List&lt;Apple&gt; apples = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (Apple apple : list) &#123;</div><div class="line">            <span class="keyword">if</span> (apple.getColor().equals(<span class="string">"red"</span>)) &#123;</div><div class="line">                apples.add(apple);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> apples;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApple</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Apple&gt; list;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        String colors[] = &#123;<span class="string">"green"</span>, <span class="string">"red"</span>&#125;;</div><div class="line">        Apple apple = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (String color : colors) &#123;</div><div class="line">            apple = <span class="keyword">new</span> Apple();</div><div class="line">            apple.setColor(colors[i]);</div><div class="line">            apple.setWeight(<span class="keyword">new</span> Random().nextInt(<span class="number">100</span>));</div><div class="line">            list.add(apple);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(list.size());</div><div class="line">        <span class="keyword">new</span> AppleServiceImpl().filterRedApple(list);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>[x] 上面这段代码在优化一下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApple</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Apple&gt; list;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        List&lt;Apple&gt; apples = Arrays.asList(<span class="keyword">new</span> Apple(<span class="string">"green"</span>,<span class="number">65</span>), <span class="keyword">new</span> Apple(<span class="string">"red"</span>,<span class="number">50</span>));</div><div class="line">        Apple apple = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (Apple a : apples) &#123;</div><div class="line">            apple = <span class="keyword">new</span> Apple();</div><div class="line">            apple.setColor(a.getColor());</div><div class="line">            apple.setWeight(a.getWeight());</div><div class="line">            list.add(apple);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(list.size());</div><div class="line">        <span class="keyword">new</span> AppleServiceImpl().filterRedApple(list);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>[x] 输出结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">苹果的颜色是：red</div></pre></td></tr></table></figure>
<h3 id="此时如果增加新的需求要过滤绿色怎么办"><a href="#此时如果增加新的需求要过滤绿色怎么办" class="headerlink" title="此时如果增加新的需求要过滤绿色怎么办"></a>此时如果增加新的需求要过滤绿色怎么办</h3><ul>
<li>如果此时增加需求要过滤绿色的苹果，怎么办?<ul>
<li>可能会在AppleService中在增加一个方法 </li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppleService</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 过滤红色的苹果</div><div class="line">     * <span class="doctag">@param</span> list</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;Apple&gt; <span class="title">filterRedApple</span><span class="params">(List&lt;Apple&gt; list)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 过滤绿色的苹果</div><div class="line">     * <span class="doctag">@param</span> list</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;Apple&gt; <span class="title">filterGreenApple</span><span class="params">(List&lt;Apple&gt; list)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这样就造成了代码的冗余</p>
</blockquote>
<h3 id="使用接口Predicate"><a href="#使用接口Predicate" class="headerlink" title="使用接口Predicate"></a>使用接口Predicate</h3><ul>
<li>这个类在 <strong>java.util.function.Predicate</strong>  单独写出来为了清晰</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li><p>你也可以单独定义一个接口，重新定义其中的方法名，使其清晰一点。</p>
</li>
<li><p>定义一个接口 <code>Predicate.java</code></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicatet</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">filterApple</span><span class="params">(T t)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>修改AppleService中的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleServiceImpl</span> <span class="keyword">implements</span> <span class="title">AppleService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Apple&gt; <span class="title">filterApple</span><span class="params">(List&lt;Apple&gt; list,Predicatet&lt;Apple&gt; predicatet)</span> </span>&#123;</div><div class="line">        List&lt;Apple&gt; apples = <span class="keyword">new</span> ArrayList&lt;Apple&gt;();</div><div class="line">        <span class="keyword">for</span> (Apple apple : list) &#123;</div><div class="line">            <span class="keyword">if</span> (predicatet.filterApple(apple)) &#123;</div><div class="line">                apples.add(apple);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> apples;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApple</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Apple&gt; list;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        List&lt;Apple&gt; apples = Arrays.asList(<span class="keyword">new</span> Apple(<span class="string">"green"</span>), <span class="keyword">new</span> Apple(<span class="string">"red"</span>));</div><div class="line">        Apple apple = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (Apple a : apples) &#123;</div><div class="line">            apple = <span class="keyword">new</span> Apple();</div><div class="line">            apple.setColor(a.getColor());</div><div class="line">            list.add(apple);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">     * 过了红色的苹果</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;Apple&gt; apples = <span class="keyword">new</span> AppleServiceImpl().filterApple(list, <span class="keyword">new</span> Predicatet&lt;Apple&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filterApple</span><span class="params">(Apple apple)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (<span class="string">"red"</span>.equals(apple.getColor())) &#123;		① 此处代码提取出来</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 过了绿色的苹果</div><div class="line">     */</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;Apple&gt; apples = <span class="keyword">new</span> AppleServiceImpl().filterApple(list, <span class="keyword">new</span> Predicatet&lt;Apple&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filterApple</span><span class="params">(Apple apple)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (<span class="string">"green"</span>.equals(apple.getColor())) &#123;		① 此处代码提取出来</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>优化一下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestA</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Apple&gt; list;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        list = <span class="keyword">new</span> ArrayList&lt;Apple&gt;();</div><div class="line">        List&lt;Apple&gt; apples = Arrays.asList(<span class="keyword">new</span> Apple(<span class="string">"green"</span>), <span class="keyword">new</span> Apple(<span class="string">"red"</span>));</div><div class="line">        Apple apple = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (Apple a : apples) &#123;</div><div class="line">            apple = <span class="keyword">new</span> Apple();</div><div class="line">            apple.setColor(a.getColor());</div><div class="line">            list.add(apple);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">     * 过了红色的苹果</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;Apple&gt; apples = <span class="keyword">new</span> AppleServiceImpl().filterApple(list, <span class="keyword">new</span> Predicatet&lt;Apple&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filterApple</span><span class="params">(Apple apple)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (isRedApple(apple)) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 过了绿色的苹果</div><div class="line">     */</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;Apple&gt; apples = <span class="keyword">new</span> AppleServiceImpl().filterApple(list, <span class="keyword">new</span> Predicatet&lt;Apple&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filterApple</span><span class="params">(Apple apple)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (isGreenApple(apple))&#123;&#125;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRedApple</span><span class="params">(Apple apple)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"red"</span>.equals(apple.getColor());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isGreenApple</span><span class="params">(Apple apple)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"red"</span>.equals(apple.getColor());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用大招-Lamda表达式-重构之前的方法-以过滤红苹果示例："><a href="#使用大招-Lamda表达式-重构之前的方法-以过滤红苹果示例：" class="headerlink" title="使用大招 Lamda表达式 重构之前的方法,以过滤红苹果示例："></a>使用大招 Lamda表达式 重构之前的方法,以过滤红苹果示例：</h3><ul>
<li>重构之前：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">    * 过了红色的苹果</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">       List&lt;Apple&gt; apples = <span class="keyword">new</span> AppleServiceImpl().filterApple(list, <span class="keyword">new</span> Predicatet&lt;Apple&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filterApple</span><span class="params">(Apple apple)</span> </span>&#123;</div><div class="line">               <span class="keyword">if</span> (isRedApple(apple)) &#123;</div><div class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>[x] 重构之后：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">     * 过了红色的苹果</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;Apple&gt; apples = <span class="keyword">new</span> AppleServiceImpl().filterApple(list, <span class="keyword">new</span> Predicatet&lt;Apple&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filterApple</span><span class="params">(Apple apple)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> isRedApple(apple));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>[x] 再重构之后</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">      <span class="keyword">new</span> AppleServiceImpl().filterApple(list, apple -&gt; &#123;</div><div class="line">          <span class="keyword">if</span> (isRedApple(apple)) &#123;</div><div class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      &#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>[x] 再重构之后：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    List&lt;Apple&gt; apples = <span class="keyword">new</span> AppleServiceImpl().filterApple(list, apple -&gt; &#123;</div><div class="line">        <span class="keyword">return</span> isRedApple(apple);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>[x] 再重构之后：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">       List&lt;Apple&gt; apples = <span class="keyword">new</span> AppleServiceImpl().filterApple(list, apple -&gt; isRedApple(apple));</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>[x] 再重构之后：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;								  </div><div class="line">        List&lt;Apple&gt; apples = <span class="keyword">new</span> AppleServiceImpl().filterApple(list, TestApple :: isRedApple);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意： ★★★★★★</p>
<blockquote>
<p>上面代码中：<strong>TestApple</strong> 代表的是当前类的名字。</p>
</blockquote>
<p>概念介绍：<strong>谓词</strong><br>上面的代码传递了方法<code>TestApple :: isReApple</code>(它接受参数apple并返回一个boolean值)给filterApple，后者则希望接受一个<code>Predicate&lt;Apple&gt;</code>参数。<br><strong>谓词(predicate)</strong>：<br>在数学上尝尝用来表示一个类似函数的东西，它接受一个参数值，并返回true或false,在后面你会看到，java8也会允许你写<code>Function&lt;Apple,Boolean&gt;</code>，但是用Predicate<apple>是更标准的方式，效率也会高一点，避免了boolean封装在Boolean装箱的过程。<br>简单点说谓词（就是一个返回boolean值的函数）</apple></p>
</blockquote>
<hr>
<ul>
<li>完整版示例代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilteringApples</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String ... args)</span></span>&#123;</div><div class="line"></div><div class="line">        List&lt;Apple&gt; inventory = Arrays.asList(<span class="keyword">new</span> Apple(<span class="number">80</span>,<span class="string">"green"</span>),</div><div class="line">                                              <span class="keyword">new</span> Apple(<span class="number">155</span>, <span class="string">"green"</span>),</div><div class="line">                                              <span class="keyword">new</span> Apple(<span class="number">120</span>, <span class="string">"red"</span>));	</div><div class="line"></div><div class="line">        <span class="comment">// [Apple&#123;color='green', weight=80&#125;, Apple&#123;color='green', weight=155&#125;]</span></div><div class="line">        List&lt;Apple&gt; greenApples = filterApples(inventory, FilteringApples::isGreenApple);</div><div class="line">        System.out.println(greenApples);</div><div class="line">        </div><div class="line">        <span class="comment">// [Apple&#123;color='green', weight=155&#125;]</span></div><div class="line">        List&lt;Apple&gt; heavyApples = filterApples(inventory, FilteringApples::isHeavyApple);</div><div class="line">        System.out.println(heavyApples);</div><div class="line">        </div><div class="line">        <span class="comment">// [Apple&#123;color='green', weight=80&#125;, Apple&#123;color='green', weight=155&#125;]</span></div><div class="line">        List&lt;Apple&gt; greenApples2 = filterApples(inventory, (Apple a) -&gt; <span class="string">"green"</span>.equals(a.getColor()));</div><div class="line">        System.out.println(greenApples2);</div><div class="line">        </div><div class="line">        <span class="comment">// [Apple&#123;color='green', weight=155&#125;]</span></div><div class="line">        List&lt;Apple&gt; heavyApples2 = filterApples(inventory, (Apple a) -&gt; a.getWeight() &gt; <span class="number">150</span>);</div><div class="line">        System.out.println(heavyApples2);</div><div class="line">        </div><div class="line">        <span class="comment">// []</span></div><div class="line">        List&lt;Apple&gt; weirdApples = filterApples(inventory, (Apple a) -&gt; a.getWeight() &lt; <span class="number">80</span> || </div><div class="line">                                                                       <span class="string">"brown"</span>.equals(a.getColor()));</div><div class="line">        System.out.println(weirdApples);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Apple&gt; <span class="title">filterGreenApples</span><span class="params">(List&lt;Apple&gt; inventory)</span></span>&#123;</div><div class="line">        List&lt;Apple&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (Apple apple: inventory)&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="string">"green"</span>.equals(apple.getColor())) &#123;</div><div class="line">                result.add(apple);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Apple&gt; <span class="title">filterHeavyApples</span><span class="params">(List&lt;Apple&gt; inventory)</span></span>&#123;</div><div class="line">        List&lt;Apple&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (Apple apple: inventory)&#123;</div><div class="line">            <span class="keyword">if</span> (apple.getWeight() &gt; <span class="number">150</span>) &#123;</div><div class="line">                result.add(apple);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isGreenApple</span><span class="params">(Apple apple)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"green"</span>.equals(apple.getColor()); </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isHeavyApple</span><span class="params">(Apple apple)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> apple.getWeight() &gt; <span class="number">150</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Apple&gt; <span class="title">filterApples</span><span class="params">(List&lt;Apple&gt; inventory, Predicate&lt;Apple&gt; p)</span></span>&#123;</div><div class="line">        List&lt;Apple&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span>(Apple apple : inventory)&#123;</div><div class="line">            <span class="keyword">if</span>(p.test(apple))&#123;</div><div class="line">                result.add(apple);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;       </div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> weight = <span class="number">0</span>;</div><div class="line">        <span class="keyword">private</span> String color = <span class="string">""</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(<span class="keyword">int</span> weight, String color)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.weight = weight;</div><div class="line">            <span class="keyword">this</span>.color = color;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getWeight</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> weight;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(Integer weight)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.weight = weight;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> color;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.color = color;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"Apple&#123;"</span> +</div><div class="line">                   <span class="string">"color='"</span> + color + <span class="string">'\''</span> +</div><div class="line">                   <span class="string">", weight="</span> + weight +</div><div class="line">                   <span class="string">'&#125;'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="从方法传递到-lambda"><a href="#从方法传递到-lambda" class="headerlink" title="从方法传递到 lambda"></a>从方法传递到 lambda</h3><ul>
<li>把方法作为值来传递显然很有用，但要是为了类似于<code>isRedApple()</code>和<code>isGreenApple()</code>这种只用一两次的短方法写一堆的定义有点烦人。</li>
<li>所以在java8引入了一套新记法（匿名函数或者lambda），你可以这样写</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> AppleServiceImpl().filterApple(list, (Apple apple) -&gt; <span class="string">"red"</span>.equals(apple.getColor()));</div><div class="line">&#125;</div><div class="line"></div><div class="line">`</div></pre></td></tr></table></figure>
<ul>
<li>[x] 或者</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> AppleServiceImpl().filterApple(list, (Apple apple) -&gt;a.getWeight() &gt; <span class="number">150</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>[x] 再或者</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        List&lt;Apple&gt; apples = <span class="keyword">new</span> AppleServiceImpl().filterApple(list, (Apple apple) -&gt; <span class="string">"red"</span>.equals(apple.getColor()) || apple.getWeight() &gt; <span class="number">10</span>);</div><div class="line">        System.out.println(apples.size());</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>所以你甚至不需要为只用一次的方法写定义；</li>
<li>代码更干净，更清晰</li>
<li>因为你用不着去找自己到底传递了什么代码。</li>
</ul>
<hr>
<ul>
<li>但是如果Lambda的长度多以几行（它的行为也不是一目了然）的话，你还是应该用方法引用来指向一个有描述性名称的方法，而不是使用匿名的Lambda。</li>
<li>应该以代码的清晰度为准绳</li>
</ul>
<blockquote>
<p>本来java加上filter和几个相关的东西作为通用库方法就足以让人满意了。</p>
</blockquote>
<ul>
<li>比如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">filter</span><span class="params">( CollectionM&lt;T&gt; c , Predicate&lt;T&gt; )</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>[x] 这样你甚至都不需要写<strong>filterApple(List<apple> list,Predicatet<apple> predicatet)</apple></apple></strong>了</li>
</ul>
<ul>
<li>比如</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">List&lt;Apple&gt; apples = <span class="keyword">new</span> AppleServiceImpl().filterApple(list, (Apple apple) -&gt; <span class="string">"red"</span>.equals(apple.getColor()));</div></pre></td></tr></table></figure>
<ul>
<li>[x] 直接使用调用库方法<strong>filter</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">List&lt;Apple&gt; greenApples2 = filter(inventory, <span class="keyword">new</span> AppleColorPredicate());</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ApplePredicate</span></span>&#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Apple a)</span></span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li>但是为了更好地利用并行，java的设计师没有这么做。java8中有一整套新的集合API——Stream，他有一套函数式类似于filter的操作。<ul>
<li>比如 map、reduce 还有接下来要学习的Collections和Streams之间做转换的方法。</li>
</ul>
</li>
</ul>
<h3 id="流"><a href="#流" class="headerlink" title="流"></a>流</h3><ul>
<li>先简单的让你体验一下Stream和Lambda表达式顺序或并行地从一个列表里筛选红颜色的苹果</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApple</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Apple&gt; list;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        list = <span class="keyword">new</span> ArrayList&lt;Apple&gt;();</div><div class="line">        String colors[] = &#123;<span class="string">"green"</span>, <span class="string">"red"</span>&#125;;</div><div class="line">        Apple apple = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (String color : colors) &#123;</div><div class="line">            apple = <span class="keyword">new</span> Apple();</div><div class="line">            apple.setColor(colors[i]);</div><div class="line">            apple.setWeight(<span class="keyword">new</span> Random().nextInt(<span class="number">100</span>));</div><div class="line">            list.add(apple);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;Apple&gt; red = list.stream().filter((Apple a) -&gt; a.getColor().equals(<span class="string">"red"</span>)).collect(Collectors.toList());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>做了几个简单的测试</li>
<li>stream()比在数据量低于百万的时候 效率第一倍</li>
</ul>
<h3 id="集合的操作更加的人性化"><a href="#集合的操作更加的人性化" class="headerlink" title="集合的操作更加的人性化"></a>集合的操作更加的人性化</h3><ul>
<li>jdk1.8之前，我们对集合的一些操作比如，排序，在之前，我们使用排序</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Collections.sort(appleList, <span class="keyword">new</span> Comparator&lt;Apple&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Apple o1, Apple o2)</span> </span>&#123;</div><div class="line">               <span class="keyword">return</span> o1.getWeight() - o2.getWeight();</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>[x] 在1.8之后，我们可以 <strong>集合 . sort()</strong> 示例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">appleList.sort(<span class="keyword">new</span> Comparator&lt;Apple&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Apple o1, Apple o2)</span> </span>&#123;</div><div class="line">               <span class="keyword">return</span> o1.getWeight() - o2.getWeight();</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>[x] 请出神器 Lambda 示例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">appleList.sort((o1, o2) -&gt; o1.getWeight() - o2.getWeight());</div></pre></td></tr></table></figure>
<h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><ul>
<li>在java8里，你可以直接对List调用sort方法</li>
<li>它使用java8 List接口中如下所示的默认方法实现的，它会调用Collections.sort静态的方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sort</span> <span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span></span>&#123;</div><div class="line">	Coolections.sort(<span class="keyword">this</span>,c);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第2章-通过行为参数化传递代码"><a href="#第2章-通过行为参数化传递代码" class="headerlink" title="第2章 通过行为参数化传递代码"></a>第2章 通过行为参数化传递代码</h2><h3 id="重构你的垃圾代码"><a href="#重构你的垃圾代码" class="headerlink" title="重构你的垃圾代码"></a>重构你的垃圾代码</h3><ul>
<li>定义一个谓词方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicatet</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在列中定义一个公共的静态的泛型方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PredicateService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">filter</span><span class="params">(List&lt;T&gt; list, Predicatet&lt;T&gt; predicatet)</span> </span>&#123;</div><div class="line">        List&lt;T&gt; result = <span class="keyword">new</span> ArrayList&lt;T&gt;();</div><div class="line">        <span class="keyword">for</span> (T t : list) &#123;</div><div class="line">            <span class="keyword">if</span> (predicatet.test(t)) &#123;</div><div class="line">                result.add(t);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>[x] 测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApple</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line"> 		PredicateService.filter(list, <span class="keyword">new</span> Predicatet&lt;Apple&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Apple apple)</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> apple.getWeight() &gt; <span class="number">19</span>;</div><div class="line">                &#125;</div><div class="line">         &#125;);</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时如果</p>
<ul>
<li>[x] 使用Lambda表达式</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 过滤苹果重量&gt;19的</span></div><div class="line">List&lt;Apple&gt; filter = PredicateService.filter(list, (Apple apple) -&gt; apple.getWeight() &gt; <span class="number">19</span>);</div><div class="line"></div><div class="line"><span class="comment">// 此时如果橘子也要过滤重量&gt;19的</span></div><div class="line">List&lt;Orange&gt; filter = PredicateService.filter(list, (Orange orange) -&gt; orange.getWeight() &gt; <span class="number">19</span>);</div><div class="line"></div><div class="line"><span class="comment">// 此时就非常的方便拓展了</span></div></pre></td></tr></table></figure>
<h3 id="用Runnable-执行代码块"><a href="#用Runnable-执行代码块" class="headerlink" title="用Runnable 执行代码块"></a>用Runnable 执行代码块</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"hello world"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div></pre></td></tr></table></figure>
<ul>
<li>[x] Lambda 重构后</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"hello"</span>)).start();</div></pre></td></tr></table></figure>
<blockquote>
<p>这里要说明的，像<code>run()</code>方法一样，方法没有参数，那么书写Lamda表达式的时候，写一对<strong> 空括号() </strong></p>
</blockquote>
<h2 id="第3章-Lambda-表达式"><a href="#第3章-Lambda-表达式" class="headerlink" title="第3章 Lambda 表达式"></a>第3章 Lambda 表达式</h2><blockquote>
<p>Lambda 表达式理解为简洁地表示可传递的匿名函数的一种方式：它没有名称，但它有参数列表、函数主体、返回类型，可能还有一个可以抛出的异常列表。</p>
</blockquote>
<ul>
<li><strong>匿名</strong>:<ul>
<li>说其匿名，因为它不像普通的方法那样有一个明确的名称：写得少而想得多</li>
</ul>
</li>
<li><strong>函数</strong><ul>
<li>说其实函数，是因为Lambda函数不像方法那样属于某个特定的类，但和方法一样，lambda有参数列表、函数主体、返回类型、还可能有可以抛出的异常列表</li>
</ul>
</li>
<li><strong>传递</strong><ul>
<li>Lambda表达式可以作为参数传递给方法或存储在变量中</li>
</ul>
</li>
<li><strong>简洁</strong><ul>
<li>无需像匿名类那样写很多模板代码</li>
</ul>
</li>
</ul>
<p><img src="http://7xjlkb.com1.z0.glb.clouddn.com/learning_lambda.png" alt="Lambda表达式构成"></p>
<h3 id="详解-Lambda-表达式"><a href="#详解-Lambda-表达式" class="headerlink" title="详解 Lambda 表达式"></a>详解 Lambda 表达式</h3><ul>
<li>Lambda 没有return语句 ，因为已经隐含了return</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(String s ) -&gt; s.length()</div></pre></td></tr></table></figure>
<ul>
<li>Lambda表达式可以包含多行语句，用一对大括号包裹</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(<span class="keyword">int</span> x ,  <span class="keyword">int</span> y )  -&gt; &#123;</div><div class="line">	System.out.println(<span class="string">"hello"</span>);</div><div class="line">    System.out.println(<span class="string">"world"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果return是一个控制流语句，要让Lambda有效，需要添加花括号<code>{}</code>包裹</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">( Integer i ) -&gt; &#123; <span class="keyword">return</span> <span class="string">"benny"</span> + i;&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Lambda 没有参数，并返回String作为表达式,这种情况下不能有<code>{}</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">( ) -&gt; <span class="string">"benny"</span></div></pre></td></tr></table></figure>
<h3 id="java中有效的表达式"><a href="#java中有效的表达式" class="headerlink" title="java中有效的表达式"></a>java中有效的表达式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(String s) -&gt; s.length()</div><div class="line"></div><div class="line">(Apple apple) -&gt; apple.getWeight() &gt; <span class="number">10</span></div><div class="line"></div><div class="line">(<span class="keyword">int</span> x ,  <span class="keyword">int</span> y )  -&gt; &#123;</div><div class="line">	System.out.println(<span class="string">"hello"</span>);</div><div class="line">    System.out.println(<span class="string">"world"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">() -&gt; <span class="number">42</span></div><div class="line"></div><div class="line">(Apple apple1, Apple apple2) -&gt; apple1.getWeight().compareTo(apple2.getWeight())</div><div class="line"></div><div class="line">( Integer i ) -&gt; &#123; <span class="keyword">return</span> <span class="string">"Alan"</span> + i &#125;</div></pre></td></tr></table></figure>
<h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><ul>
<li>我们之前声明的<code>Predicate&lt;T&gt;</code>接口就是一个函数式接口<ul>
<li>因为Predicate仅仅定义了一个抽象方法</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">pubilc <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">	</div><div class="line">    <span class="function">Boolean <span class="title">test</span><span class="params">( T t )</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>简单点说，函数式接口就是只定义<strong>一个</strong>抽象方法的接口。</li>
<li>在java API中有很多函数式接口，例如<code>Comparator</code>和<code>Runnable</code>接口</li>
</ul>
<blockquote>
<p>接口可以拥有默认方法，不管接口中有多少默认方法，只要接口中<strong>只定义了一个抽象方法（有且仅有一个）</strong>，它就是一个函数式接口，重载的方法也不行哦。</p>
</blockquote>
<ul>
<li>如果你声明了一个函数式接口，用什么办法检查你是否声明的正确呢。</li>
<li>使用<strong>@FunctionalInterface</strong> 注解（新版的API才有）</li>
</ul>
<blockquote>
<p>如果你声明了一个函数式接口，而它却不是函数式接口，编译器将返回一个提示原因的错误。</p>
</blockquote>
<ul>
<li>例如：错误提示可能是：<ul>
<li>Multiple non-overriding abstract methods found in interface Foo， 表名存在多个抽象方法。</li>
<li><strong>@FunctionalInterface</strong> 并不是必须的，但是对于设计函数式接口是比较好的做法。</li>
<li>它就像是@Override标注表示方法被重写了一样。</li>
</ul>
</li>
<li>看到这里 你可能还是不清楚为什么要要定义函数式接口（仅含有一个抽象方法的接口），因为，你定义多个方法，lambda无法确定是哪一个方法。</li>
</ul>
<h4 id="附录2：Java8中常用的函数式接口："><a href="#附录2：Java8中常用的函数式接口：" class="headerlink" title="附录2：Java8中常用的函数式接口："></a>附录2：Java8中常用的函数式接口：</h4><table>
<thead>
<tr>
<th>函数式接口</th>
<th>函数描述符</th>
<th>原始烈性特化</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Predicate&lt;T&gt;</code></td>
<td>T -&gt; boolean</td>
<td><code>IntPredicate&lt;T&gt;, LongPredicate&lt;T&gt;, DoublePredicate&lt;T&gt;</code></td>
</tr>
<tr>
<td><code>Consumer&lt;T&gt;</code></td>
<td>T -&gt; void</td>
<td><code>IntConsumer, LongConsumer, DoubleConsumer</code></td>
</tr>
<tr>
<td><code>Function&lt;T,R&gt;</code></td>
<td>T -&gt; R</td>
<td><code>IntFunction&lt;R&gt;, IntToDoubleFunction, IntToLongFunction, LongFunction&lt;R&gt;, LongToDoubleFunction, LongToIntFunction, DoubleFunction&lt;R&gt;, ToIntFunction&lt;T&gt;, ToDoubleFunction&lt;T&gt;, ToLongFunction&lt;T&gt;</code></td>
</tr>
<tr>
<td><code>Supplier&lt;T&gt;</code></td>
<td>() -&gt; T</td>
<td><code>BooleanSupplier, BooleanSupplier, BooleanSupplier, BooleanSupplier</code></td>
</tr>
<tr>
<td><code>UnaryOperator&lt;T&gt;</code></td>
<td>T -&gt; T</td>
<td><code>IntUnaryOperator, DoubleUnaryOperator, LongUnaryOperator</code></td>
</tr>
<tr>
<td><code>BinaryOperator&lt;T&gt;</code></td>
<td>(T,T) -&gt; T</td>
<td><code>IntBinaryOperator, DoubleBinaryOperator, LongBinaryOperator</code></td>
</tr>
<tr>
<td><code>BiPredicate&lt;L,R&gt;</code></td>
<td>(L,R) -&gt; boolean</td>
</tr>
<tr>
<td><code>BiConsumer&lt;T,U&gt;</code></td>
<td>(T,U) -&gt; void</td>
<td><code>ObjIntConsumer&lt;T&gt;, ObjLongConsumer&lt;T&gt;, ObjDoubleConsumer&lt;T&gt;</code></td>
</tr>
<tr>
<td><code>BiFunction&lt;T,U,R&gt;</code></td>
<td>(T,U) -&gt; R</td>
<td><code>ToIntBiFunction&lt;T,U&gt;, ToLongBiFunction&lt;T,U&gt;, ToDoubleBiFunction&lt;T,U&gt;</code></td>
</tr>
</tbody>
</table>
<h3 id="函数描述符"><a href="#函数描述符" class="headerlink" title="函数描述符"></a>函数描述符</h3><ul>
<li>函数式接口的抽象方法的签名基本就是Lambda表达式的签名，我们将这种抽象方法叫作函数描述符。</li>
</ul>
<h3 id="把Lambda-付诸实践，环绕执行模式"><a href="#把Lambda-付诸实践，环绕执行模式" class="headerlink" title="把Lambda 付诸实践，环绕执行模式"></a>把Lambda 付诸实践，环绕执行模式</h3><ul>
<li>第一步：记得行为参数化<ul>
<li>方法传参传递行为（也就是方法）</li>
</ul>
</li>
<li>第二步： 使用函数式接口来传递行为</li>
<li>第三步：执行一个行为<ul>
<li>Lambda 表达式允许你直接内联系</li>
<li>再次阐述一下流程</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">①：新建一个函数式接口  例：</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BufferReaderProcess</span> </span>&#123;</div><div class="line">    <span class="function">String <span class="title">process</span><span class="params">(BufferedReader bufferedReader)</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">②：在Service中定义一个抽象方法</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">processFile</span><span class="params">(BufferReaderProcess b)</span></span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">③：实现FileReadService接口</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileServiceImpl</span> <span class="keyword">implements</span> <span class="title">FileService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">processFile</span><span class="params">(BufferReaderProcess b)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"data.txt"</span>))) &#123;</div><div class="line">            <span class="keyword">return</span> b.process(br);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">④ ：测试</div><div class="line"></div><div class="line">String s = <span class="keyword">new</span> FileServiceImpl().processFile(<span class="keyword">new</span> BufferReaderProcess() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">process</span><span class="params">(BufferedReader bufferedReader)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">return</span> bufferedReader.readLine() + bufferedReader.readLine();</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">⑤：使用Lambda</div><div class="line"></div><div class="line">String s = <span class="keyword">new</span> FileServiceImpl().processFile((BufferedReader buffer) -&gt; buffer.readLine());</div></pre></td></tr></table></figure>
<blockquote>
<p>以上四个步骤就是应用环绕执行模式所采取的四个步骤</p>
</blockquote>
<h3 id="使用函数式接口"><a href="#使用函数式接口" class="headerlink" title="使用函数式接口"></a>使用函数式接口</h3><ul>
<li>函数式接口<br>  +<strong> 函数式接口只定义了一个抽象方法（有且仅有一个）</strong></li>
<li>java8设计师在<code>java.util.function</code>包中引入了几个新的函数式接口。</li>
</ul>
<h4 id="Predicate（谓词）"><a href="#Predicate（谓词）" class="headerlink" title="Predicate（谓词）"></a>Predicate（谓词）</h4><ul>
<li><code>java.util.function.Predicate&lt;T&gt;</code>接口定义了一个叫 <strong>test()</strong>的抽象方法，它接受泛型<code>&lt;T&gt;</code>对象，并返回一个<strong>boolean</strong>  。</li>
<li>在你需要表示一个涉及类型<code>&lt;T&gt;</code>的布尔表达式时，你就可以使用此接口。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">FunctionalInterface 	<span class="comment">// 此注解表示当前接口是一个函数式接口</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 接口可以拥有默认方法，不管接口中有多少默认方法，只要接口中只定义了一个抽象方法（有且仅有一个），它就是一个函数式接口</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">and</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(other);</div><div class="line">        <span class="keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (t) -&gt; !test(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">or</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(other);</div><div class="line">        <span class="keyword">return</span> (t) -&gt; test(t) || other.test(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">isEqual</span><span class="params">(Object targetRef)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">null</span> == targetRef)</div><div class="line">                ? Objects::isNull</div><div class="line">                : object -&gt; targetRef.equals(object);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用javaApi自带的Predicate函数式接口，代码示例：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPredicate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">filter</span><span class="params">(List&lt;T&gt; list, Predicate&lt;T&gt; predicate)</span> </span>&#123;</div><div class="line">        List&lt;T&gt; result = <span class="keyword">new</span> ArrayList&lt;T&gt;();</div><div class="line">        <span class="keyword">for</span> (T t : list) &#123;</div><div class="line">            <span class="keyword">if</span> (predicate.test(t)) &#123;</div><div class="line">                result.add(t);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">		List&lt;String&gt; result = Arrays.asList(<span class="string">"My"</span>, <span class="string">"name"</span>, <span class="string">"is"</span>,<span class="string">"benny"</span>);</div><div class="line">        List&lt;String&gt; benny = filter(result, <span class="keyword">new</span> Predicate&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> s.equals(<span class="string">"benny"</span>);</div><div class="line">            &#125;</div><div class="line">    	&#125;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="comment">// 使用Lambda 表达式</span></div><div class="line"></div><div class="line">    <span class="comment">// 一步一步来</span></div><div class="line">    Predicate&lt;String&gt; predicate = (String str) -&gt; str.equals(<span class="string">"benny"</span>);</div><div class="line">    List&lt;String&gt; benny = filter(result, predicate);</div><div class="line">	<span class="comment">// 一步到位</span></div><div class="line">    List&lt;String&gt; benny1 = filter(result, (String str) -&gt; str.equals(<span class="string">"benny"</span>));</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Consumer（消费者）"><a href="#Consumer（消费者）" class="headerlink" title="Consumer（消费者）"></a>Consumer（消费者）</h4><ul>
<li><code>java.util.function.Consumer&lt;T&gt;</code>定义了一个<strong>accept</strong>的抽象方法它接受泛型<code>&lt;T&gt;</code>的对象，没有返回值 <strong>void</strong>。</li>
<li>在你需要访问类型<code>&lt;T&gt;</code>的对象，并对其执行某些操作，就可以使用此接口 。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> Consumer&lt;T&gt; <span class="title">andThen</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; after)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(after);</div><div class="line">        <span class="keyword">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用javaApi自带的Consumer函数式接口，代码示例：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*  foreach(result, new Consumer&lt;String&gt;() &#123;</span></div><div class="line">           @Override</div><div class="line">           public void accept(String s) &#123;</div><div class="line">               System.out.print(s+"\t");</div><div class="line">           &#125;</div><div class="line">       &#125;);*/</div><div class="line"></div><div class="line">	<span class="comment">// 使用Lambda 表达式</span></div><div class="line"> 		<span class="comment">// 一步一步来</span></div><div class="line">       Consumer&lt;String&gt; consumer = (String s) -&gt; System.out.print(s + <span class="string">"\t"</span>);</div><div class="line">       foreach(result, consumer);</div><div class="line">		 <span class="comment">// 一步到位</span></div><div class="line">       foreach(result, (String s) -&gt; System.out.print(s + <span class="string">"\t"</span>));</div></pre></td></tr></table></figure>
<h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><ul>
<li><code>java.util.function.Function&lt;T,R&gt;</code>接口定义了一个<strong>apply</strong>的抽象方法它接受泛型<code>&lt;T&gt;</code>的对象，它接受一个泛型<code>&lt;T&gt;</code>的对象，并返回一个泛型<code>&lt;R&gt;</code>的对象。</li>
<li>如果你需要定义一个Lambda,将输入的对象的信息映射到输出，就可以使用这个接口 。<ul>
<li>比如你传入一个 <code>List&lt;String&gt;</code> 返回一个 <code>List&lt;integer&gt;</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;V, R&gt; <span class="title">compose</span><span class="params">(Function&lt;? <span class="keyword">super</span> V, ? extends T&gt; before)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(before);</div><div class="line">        <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;T, V&gt; <span class="title">andThen</span><span class="params">(Function&lt;? <span class="keyword">super</span> R, ? extends V&gt; after)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(after);</div><div class="line">        <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Function&lt;T, T&gt; <span class="title">identity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> t -&gt; t;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用javaApi自带的Function函数式接口，代码示例：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFunction</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, R&gt; <span class="function">List&lt;R&gt; <span class="title">map</span><span class="params">(List&lt;T&gt; list, Function&lt;T, R&gt; function)</span> </span>&#123;</div><div class="line">        List&lt;R&gt; result = <span class="keyword">new</span> ArrayList&lt;R&gt;();</div><div class="line">        <span class="keyword">for</span> (T t : list) &#123;</div><div class="line">            result.add(function.apply(t));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        List&lt;String&gt; result = Arrays.asList(<span class="string">"My"</span>, <span class="string">"name"</span>, <span class="string">"is"</span>,<span class="string">"benny"</span>);</div><div class="line">    	<span class="comment">// 使用Lambda 表达式</span></div><div class="line">    	<span class="comment">// 一步一步来</span></div><div class="line">        List&lt;Integer&gt; map = map(result, <span class="keyword">new</span> Function&lt;String, Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> s.length();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">		<span class="comment">// 一步到位</span></div><div class="line">        List&lt;Integer&gt; map = map(result, (String str) -&gt; str.length());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="原始类型特化"><a href="#原始类型特化" class="headerlink" title="原始类型特化"></a>原始类型特化</h3><ul>
<li>java类型有两种<ul>
<li>引用类型</li>
<li>基本数据类型</li>
</ul>
</li>
<li>基本数据类型转换成引用类型，是装箱的过程。</li>
<li>装箱的本质<ul>
<li>将基本数据类型包裹起来，并保存在堆里。</li>
<li>因此装箱后的值需要更多的内存，并需要额外的内存搜索来获取被包裹的原始值。</li>
</ul>
</li>
</ul>
<blockquote>
<p>java8为我们的函数式接口带来了一个专门的版本，以便在输入和输出值都是基本数据类型时避免自动装箱的操作。</p>
</blockquote>
<hr>
<blockquote>
<p>使用javaApi自带的IntPredicate函数式接口，代码示例：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		IntPredicate intPredicate = (<span class="keyword">int</span> k) -&gt; i % <span class="number">2</span> == <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> flag = intPredicate.test(<span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用javaApi自带的IntPredicate函数式接口，代码示例：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  	IntBinaryOperator intBinaryOperator = <span class="keyword">new</span> IntBinaryOperator() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">applyAsInt</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">              <span class="keyword">return</span> left + right;</div><div class="line">          &#125;</div><div class="line">      &#125;;</div><div class="line">      <span class="keyword">int</span> i = intBinaryOperator.applyAsInt(<span class="number">5</span>, <span class="number">21</span>);</div><div class="line">      </div><div class="line">      <span class="comment">// 使用Lambda表达式</span></div><div class="line">IntBinaryOperator intBinaryOperator = (<span class="keyword">int</span> i, <span class="keyword">int</span> j) -&gt; i + j;</div><div class="line">      <span class="keyword">int</span> i = intBinaryOperator.applyAsInt(<span class="number">2</span>, <span class="number">3</span>);</div><div class="line">      System.out.println(i);</div></pre></td></tr></table></figure>
<blockquote>
<p>使用javaApi自带的BiFunction函数式接口，代码示例：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">BiFunction&lt;String, String, String&gt; stringStringStringBiFunction = <span class="keyword">new</span> BiFunction&lt;String, String, String&gt;()&#123;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(String s, String s2)</span> </span>&#123;</div><div class="line">               <span class="keyword">return</span> s + s2;</div><div class="line">           &#125;</div><div class="line">       &#125;;</div><div class="line"></div><div class="line">	<span class="comment">// 使用Lambda表达式  </span></div><div class="line">	BiFunction&lt;String, String, String&gt; stringStringStringBiFunction = (String s, String s2) -&gt; s + s2;</div><div class="line">	String apply = stringStringStringBiFunction.apply(<span class="string">"hello"</span>, <span class="string">"world"</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>使用javaApi自带的BiFunction函数式接口，代码示例：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">	Supplier&lt;String&gt; stringSupplier = <span class="keyword">new</span> Supplier&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"hello world"</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">		String s = stringSupplier.get();</div><div class="line">        </div><div class="line">        <span class="comment">// 使用Lambda表达式  </span></div><div class="line">        Supplier&lt;String&gt; stringSupplier = () -&gt; <span class="string">"hello world"</span>;</div><div class="line">		String s = stringSupplier.get();</div><div class="line">        </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>一般来说，针对专门的输入输出参数类型的函数式接口的名称都要加上对应的原始类型前缀。<br>比如：</p>
<blockquote>
<p>DoublePredicate、IntConsumer、ingBinaryOperator，IntFunction等</p>
</blockquote>
</blockquote>
<hr>
<blockquote>
<p>Function接口还有针对输出参数类型的变种：</p>
<blockquote>
<p><code>ToIntFunction&lt;T&gt;</code>、IntToDoubleFunction等 </p>
</blockquote>
</blockquote>
<h4 id="java8常用函数式接口"><a href="#java8常用函数式接口" class="headerlink" title="java8常用函数式接口"></a>java8常用函数式接口</h4><table>
<thead>
<tr>
<th>函数式接口</th>
<th>函数描述符</th>
<th>原始烈性特化</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Predicate&lt;T&gt;</code></td>
<td>T -&gt; boolean</td>
<td><code>IntPredicate&lt;T&gt;, LongPredicate&lt;T&gt;, DoublePredicate&lt;T&gt;</code></td>
</tr>
<tr>
<td><code>Consumer&lt;T&gt;</code></td>
<td>T -&gt; void</td>
<td><code>IntConsumer, LongConsumer, DoubleConsumer</code></td>
</tr>
<tr>
<td><code>Function&lt;T,R&gt;</code></td>
<td>T -&gt; R</td>
<td><code>IntFunction&lt;R&gt;, IntToDoubleFunction, IntToLongFunction, LongFunction&lt;R&gt;, LongToDoubleFunction, LongToIntFunction, DoubleFunction&lt;R&gt;, ToIntFunction&lt;T&gt;, ToDoubleFunction&lt;T&gt;, ToLongFunction&lt;T&gt;</code></td>
</tr>
<tr>
<td><code>Supplier&lt;T&gt;</code></td>
<td>() -&gt; T</td>
<td><code>BooleanSupplier, BooleanSupplier, BooleanSupplier, BooleanSupplier</code></td>
</tr>
<tr>
<td><code>UnaryOperator&lt;T&gt;</code></td>
<td>T -&gt; T</td>
<td><code>IntUnaryOperator, DoubleUnaryOperator, LongUnaryOperator</code></td>
</tr>
<tr>
<td><code>BinaryOperator&lt;T&gt;</code></td>
<td>(T,T) -&gt; T</td>
<td><code>IntBinaryOperator, DoubleBinaryOperator, LongBinaryOperator</code></td>
</tr>
<tr>
<td><code>BiPredicate&lt;L,R&gt;</code></td>
<td>(L,R) -&gt; boolean</td>
</tr>
<tr>
<td><code>BiConsumer&lt;T,U&gt;</code></td>
<td>(T,U) -&gt; void</td>
<td><code>ObjIntConsumer&lt;T&gt;, ObjLongConsumer&lt;T&gt;, ObjDoubleConsumer&lt;T&gt;</code></td>
</tr>
<tr>
<td><code>BiFunction&lt;T,U,R&gt;</code></td>
<td>(T,U) -&gt; R</td>
<td><code>ToIntBiFunction&lt;T,U&gt;, ToLongBiFunction&lt;T,U&gt;, ToDoubleBiFunction&lt;T,U&gt;</code></td>
</tr>
</tbody>
</table>
<h4 id="附录1：Lambda及函数式接口的例子："><a href="#附录1：Lambda及函数式接口的例子：" class="headerlink" title="附录1：Lambda及函数式接口的例子："></a>附录1：Lambda及函数式接口的例子：</h4><table>
<thead>
<tr>
<th>使用案例</th>
<th>lambda例子</th>
<th>对应函数式接口</th>
</tr>
</thead>
<tbody>
<tr>
<td>布尔表达式</td>
<td>(List<string> list) -&gt; list.isEmpty()</string></td>
<td><code>Predicate&lt;List&lt;String&gt;&gt;</code></td>
</tr>
<tr>
<td>创建对象</td>
<td>() -&gt; new Fan()</td>
<td><code>Supplier&lt;Fan&gt;</code></td>
</tr>
<tr>
<td>消费一个对象void</td>
<td>(Fan f) -&gt; sys…out(f.toString)</td>
<td><code>Consumer&lt;Fan&gt;</code></td>
</tr>
<tr>
<td>从一个对象中选择提取</td>
<td>(String s) -&gt; s.length()</td>
<td><code>Function&lt;String,Integer&gt;</code> 或 <code>ToIntFunction&lt;String&gt;</code></td>
</tr>
<tr>
<td>合并2个值</td>
<td>(int a , int b) -&gt; a+b</td>
<td><code>IntBinaryOperator</code></td>
</tr>
<tr>
<td>比较2个对象</td>
<td>(Fan a , Fan b) -&gt; a.getXX().compareTo(b.getXX())</td>
<td><code>Comparator&lt;Fan&gt;</code>或 <code>BiFunction&lt;Fan,Fan,Integer&gt;</code>或 <code>ToIntBiFunction&lt;Fan.Fan&gt;</code></td>
</tr>
</tbody>
</table>
<h3 id="异常、Lambda，还有函数式接口是什么鬼"><a href="#异常、Lambda，还有函数式接口是什么鬼" class="headerlink" title="异常、Lambda，还有函数式接口是什么鬼"></a>异常、Lambda，还有函数式接口是什么鬼</h3><blockquote>
<p>注意： 任何函数式接口都不允许抛出受检异常</p>
</blockquote>
<ul>
<li>如果你需要Lambda表达式抛出异常，有两种方式：<ul>
<li>定义一个自己的函数式接口，并声明受检异常</li>
<li>将Lambda表达式包裹在一个<code>try/catch</code>块中</li>
</ul>
</li>
</ul>
<blockquote>
<p>自定义函数式接口，代码示例：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line">pubilc <span class="class"><span class="keyword">interface</span> <span class="title">BufferedReaderPrcessor</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function">String <span class="title">process</span><span class="params">(BufferedReader br )</span> throw IOException</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">BufferedReaderProcessor p  = (BufferedReader br) -&gt; br.readLine();</div></pre></td></tr></table></figure>
<ul>
<li>但是你可能使用一个接受函数式接口的API,比如Function<t,r>，没有办法自己创建一个，在这种情况下，你可以显式的捕获受检异常</t,r></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Function&lt;BufferedReader,String&gt; f = (BufferedReader br) -&gt; &#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">    	<span class="keyword">return</span> br.readLine();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span>(IOException e)&#123;</div><div class="line">    	<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="类型检查-类型推断-以及限制"><a href="#类型检查-类型推断-以及限制" class="headerlink" title="类型检查 类型推断 以及限制"></a>类型检查 类型推断 以及限制</h3><h4 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h4><ul>
<li>类型检查过程可以分解为如下几个步骤：<ul>
<li>首先，你要找出filter方法的声明<ul>
<li><code>filter(List&lt;Apple&gt; inventory,Predicate&lt;Apple&gt; p)</code></li>
</ul>
</li>
<li>第二，要求它是<code>Predicate&lt;Apple&gt;</code>(目标类型)对象的第二个正式参数<ul>
<li><code>filter(List&lt;Apple&gt; inventroy , Predicate&lt;Apple&gt; p)</code></li>
</ul>
</li>
<li>第三，<code>Predicate&lt;Apple&gt;</code>是一个函数式接口，定义了一个叫做test的抽象方法<ul>
<li><code>boolean test(Apple apple)</code></li>
</ul>
</li>
<li>第四，test方法描述了一个函数描述符，他可以接受一个Apple，并返回一个boolean<ul>
<li><code>Apple -&gt; boolean</code></li>
</ul>
</li>
<li>最后filter的任何实际参数都必须匹配这个要求<ul>
<li><code>filter(inventory,(Apple apple) -&gt; a.getWeight()&gt;150);</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>如果Lambda表达式抛出一个异常，那么抽象方法所声明的Throws语句要必须与之匹配</p>
</blockquote>
<h4 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Predicatet&lt;Apple&gt; p = (Apple a) -&gt; a.getWeight() &gt; <span class="number">11</span>;		☛ 有显式类型Apple</div><div class="line"></div><div class="line">Predicate&lt;Apple&gt; p1 = (a) -&gt; a.getWeight() &gt; <span class="number">11</span>;			☛ 没有类型推断 因为反省中已经制定类型为Apple</div><div class="line"></div><div class="line">Predicate&lt;Apple&gt; p2 = a -&gt; a.getWeight() &gt; <span class="number">11</span>;				☛</div></pre></td></tr></table></figure>
<blockquote>
<p>当Lambda表达式仅有一个类型需要推断的参数时，参数名称两边的括号也可以省略。</p>
</blockquote>
<h4 id="使用局部变量"><a href="#使用局部变量" class="headerlink" title="使用局部变量"></a>使用局部变量</h4><ul>
<li>局部变量必须显式的被声明为final</li>
</ul>
<blockquote>
<p>对局部变量的限制</p>
</blockquote>
<ul>
<li>实例变量和局部变量有一个关键不同<ul>
<li><strong>实例变量都储存在堆中</strong></li>
<li><strong>局部变量存储在栈上</strong></li>
</ul>
</li>
</ul>
<h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">inventory.sort( ( Apple a1,Apple a2 ) -&gt; a1.getWeight() .compareTo(a2.getWeight() ) );</div><div class="line"></div><div class="line">inventory.sort( comparing( Apple :: getWeight()) );</div></pre></td></tr></table></figure>
<h4 id="管中窥豹"><a href="#管中窥豹" class="headerlink" title="管中窥豹"></a>管中窥豹</h4><ul>
<li>方法引用可以被看做仅仅调用特定方法的Lambda的一种快捷写法。</li>
</ul>
<blockquote>
<p>它的基本思想：<br>如果一个Lambda代表的只是”直接调用这个方法“，那最好还是用名称来调用它，而不是去描述如何调用它。<br>方法引用就是，让你根据已有的方法实现来创建Lambda表达式。</p>
</blockquote>
<h5 id="Lambda及其等效方法引用的例子"><a href="#Lambda及其等效方法引用的例子" class="headerlink" title="Lambda及其等效方法引用的例子"></a>Lambda及其等效方法引用的例子</h5><table>
<thead>
<tr>
<th>Lambda</th>
<th>等效的方法引用</th>
</tr>
</thead>
<tbody>
<tr>
<td>( Apple a ) -&gt; a.getWeight()</td>
<td>Apple :: getWeight</td>
</tr>
<tr>
<td>() -&gt; Thread.currentThread().dumpStack()</td>
<td>Thread.currenThread() :: dumpStack</td>
</tr>
<tr>
<td>( str , i )-&gt; str.subtring(i)</td>
<td>String :: substring</td>
</tr>
<tr>
<td>( String s )-&gt; System.out.pringln(s)</td>
<td>System.sout :: println</td>
</tr>
</tbody>
</table>
<h5 id="如何构建方法引用"><a href="#如何构建方法引用" class="headerlink" title="如何构建方法引用"></a>如何构建方法引用</h5><blockquote>
<p>方法引用有三类</p>
</blockquote>
<ul>
<li>指向静态方法的方法引用<ul>
<li>例如Integer的parseInt方法，写作 <code>Integer :: parseInt</code></li>
</ul>
</li>
<li>指向任意类型示例方法的方法引用<ul>
<li>例如String的length方法，写作<code>String :: length</code></li>
</ul>
</li>
<li>指向现有对象的实例方法的方法引用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">List&lt;String&gt; l = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">      </div><div class="line">      l.sort((String str, String str2) -&gt; str.compareToIgnoreCase(str2));</div><div class="line">      <span class="comment">// 方法引用</span></div><div class="line">      l.sort(String::compareToIgnoreCase);</div><div class="line"></div><div class="line">Function&lt;String, Integer&gt; stringToInteger1 = (String strs) -&gt; Integer.parseInt(strs);</div><div class="line">      <span class="comment">// 方法引用</span></div><div class="line">      Function&lt;String, Integer&gt; stringToInteger2 = Integer :: parseInt;</div><div class="line">      </div><div class="line">      BiPredicate&lt;List&lt;String&gt;,String&gt; contains = (lists, element) -&gt; list.contains(element);</div><div class="line">       <span class="comment">// 方法引用</span></div><div class="line">      BiPredicate&lt;List&lt;String&gt;, String&gt; contains2 = List::contains;</div></pre></td></tr></table></figure>
<h4 id="构造函数引用"><a href="#构造函数引用" class="headerlink" title="构造函数引用"></a>构造函数引用</h4><ul>
<li>对于一个现有的构造函数，你可以使用它的名称和它的关键字new来创建它的一个引用，<strong> ClassName :: new</strong></li>
<li><code>Supplier&lt;Apple&gt; s = Apple::new;</code></li>
<li>它的功能与指向静态方法的引用类似， 它适合Supplier的签名 <code>() -&gt; Apple</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Supplier&lt;Apple&gt; supplier = <span class="keyword">new</span> Supplier&lt;Apple&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> Apple <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">              <span class="keyword">return</span> <span class="keyword">new</span> Apple();</div><div class="line">          &#125;</div><div class="line">      &#125;;</div><div class="line">      Apple apple = supplier.get();</div><div class="line">      </div><div class="line">      <span class="comment">// 使用Labmda表达式</span></div><div class="line">      Supplier&lt;Apple&gt; s = () -&gt; <span class="keyword">new</span> Apple();</div><div class="line">      Apple apple1 = s.get();</div><div class="line">      </div><div class="line">      <span class="comment">// 使用构造方法引用</span></div><div class="line">      Supplier&lt;Apple&gt; s1 = Apple::<span class="keyword">new</span>;</div><div class="line">      Apple apple2 = s1.get();</div></pre></td></tr></table></figure>
<ul>
<li>如果你的构造函数的签名是Apple(Integer weight)， 那么它就适合Function接口的签名</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Function&lt;Integer, Apple&gt; function = <span class="keyword">new</span> Function&lt;Integer, Apple&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Apple <span class="title">apply</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Apple(integer);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        Apple apple = function.apply(<span class="number">888</span>);</div><div class="line">        <span class="comment">// 等价于</span></div><div class="line">        Function&lt;Integer, Apple&gt; function1 = (Integer weight) -&gt; <span class="keyword">new</span> Apple(weight);</div><div class="line">        Apple apple1 = function1.apply(<span class="number">888</span>);</div><div class="line">        <span class="comment">// 等价于</span></div><div class="line">        Function&lt;Integer, Apple&gt; function2 = (weight) -&gt; <span class="keyword">new</span> Apple(weight);</div><div class="line">        Apple apple2 = function2.apply(<span class="number">888</span>);</div><div class="line">        <span class="comment">// 等价于</span></div><div class="line">        Function&lt;Integer, Apple&gt; function3 = weight -&gt; <span class="keyword">new</span> Apple(weight);</div><div class="line">        Apple apple3 = function3.apply(<span class="number">888</span>);</div><div class="line">        <span class="comment">// 等价于</span></div><div class="line">        Function&lt;Integer, Apple&gt; function4 = Apple::<span class="keyword">new</span>;</div><div class="line">        Apple apple4 = function4.apply(<span class="number">888</span>);</div></pre></td></tr></table></figure>
<ul>
<li>一个由Integer构成的List中的每个元素都通过我们定义的map方法传递给了Apple的构造函数，得到一个不同重量的苹果的List</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">       List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">254</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">76</span>, <span class="number">867</span>);</div><div class="line">       List&lt;Apple&gt; appleList = getAppleList(integers, (Integer i) -&gt; <span class="keyword">new</span> Apple(i));</div><div class="line">       <span class="comment">// 使用方法引用</span></div><div class="line">       List&lt;Apple&gt; appleList1 = getAppleList(integers, Apple::<span class="keyword">new</span>);</div><div class="line">&#125;</div><div class="line">   </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Apple&gt; <span class="title">map</span><span class="params">(List&lt;Integer&gt; list, Function&lt;Integer, Apple&gt; function)</span> </span>&#123;</div><div class="line">       List result = <span class="keyword">new</span> ArrayList();</div><div class="line">       <span class="keyword">for</span> (Integer integer : list) &#123;</div><div class="line">           Apple apply = function.apply(integer);</div><div class="line">           result.add(apply);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> result;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果你有一个具有两个参数的构造函数Apple(String color , Integer weigth)，那么它就适合<strong>BiFunction</strong>接口的签名</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">BiFunction&lt;String, Integer, Apple&gt; biFunction = <span class="keyword">new</span> BiFunction&lt;String, Integer, Apple&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> Apple <span class="title">apply</span><span class="params">(String s, Integer integer)</span> </span>&#123;</div><div class="line">               <span class="keyword">return</span> <span class="keyword">new</span> Apple(s, integer);</div><div class="line">           &#125;</div><div class="line">       &#125;;</div><div class="line">       Apple apple = biFunction.apply(<span class="string">"red"</span>, <span class="number">888</span>);</div><div class="line"></div><div class="line">       BiFunction&lt;String, Integer, Apple&gt; biFunction1 = (String color, Integer weight) -&gt; <span class="keyword">new</span> Apple(color, weight);</div><div class="line">       Apple apple1 = biFunction1.apply(<span class="string">"green"</span>, <span class="number">888</span>);</div></pre></td></tr></table></figure>
<h3 id="Lambda和方法引用实战"><a href="#Lambda和方法引用实战" class="headerlink" title="Lambda和方法引用实战"></a>Lambda和方法引用实战</h3><h4 id="第一步：传递代码"><a href="#第一步：传递代码" class="headerlink" title="第一步：传递代码"></a>第一步：传递代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;Apple&gt; apples = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        apples.sort(<span class="keyword">new</span> AppleCompator());</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleCompator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Apple</span>&gt; </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Apple o1, Apple o2)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> o1.getColor().compareTo(o2.getColor());</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="第二步：使用匿名类"><a href="#第二步：使用匿名类" class="headerlink" title="第二步：使用匿名类"></a>第二步：使用匿名类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;Apple&gt; apples = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        apples.sort(<span class="keyword">new</span> Comparator&lt;Apple&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Apple o1, Apple o2)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> o1.getColor().compareTo(o2.getColor());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="使用Lambda表达式"><a href="#使用Lambda表达式" class="headerlink" title="使用Lambda表达式"></a>使用Lambda表达式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">       List&lt;Apple&gt; apples = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">       apples.sort(((Apple apple, Apple apple2) -&gt; apple.getColor().compareTo(apple2.getColor())));</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="使用方法引用"><a href="#使用方法引用" class="headerlink" title="使用方法引用"></a>使用方法引用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">       List&lt;Apple&gt; apples = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">       apples.sort(Comparator.comparing(Apple::getWeight));</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="复合Lambda表达式的有用方法"><a href="#复合Lambda表达式的有用方法" class="headerlink" title="复合Lambda表达式的有用方法"></a>复合Lambda表达式的有用方法</h3><h4 id="比较器复合"><a href="#比较器复合" class="headerlink" title="比较器复合"></a>比较器复合</h4><blockquote>
<p>逆序</p>
</blockquote>
<ul>
<li>比如你要对苹果的重量递减<ul>
<li><code>.reversed()</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">apples.sort(Comparator.comparing(Apple::getWeight).reversed());</div></pre></td></tr></table></figure>
<blockquote>
<p>比较器链</p>
</blockquote>
<ul>
<li>比如你要对苹果的重量递减，但是你发现欧两个苹果一样重怎么办，你可以在提供一个Comparator<ul>
<li><code>.thenComparing(...)</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">apples.sort(Comparator.comparing(Apple::getWeight)</div><div class="line">        .reversed()		<span class="comment">// 按照递减排序</span></div><div class="line">        .thenComparing(Apple::getColor));		<span class="comment">// 当苹果一样重时，按照颜色排序</span></div></pre></td></tr></table></figure>
<h4 id="谓词复合"><a href="#谓词复合" class="headerlink" title="谓词复合"></a>谓词复合</h4><ul>
<li>谓词接口包括三个方法：<ul>
<li><strong>negate</strong><ul>
<li>使用<code>negate()</code>方法返回一个谓词接口的<strong>非</strong></li>
</ul>
</li>
<li><strong>and</strong><ul>
<li>可以使用<code>and(...)</code>方法连接 Lambda 表达式</li>
</ul>
</li>
<li><strong>or</strong><ul>
<li>可以使用<code>or(...)</code>方法表达是它或是它</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Predicate&lt;Apple&gt; redApplePredicate = <span class="keyword">new</span> Predicate&lt;Apple&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Apple apple)</span> </span>&#123;</div><div class="line">              <span class="keyword">return</span> apple.getColor().equals(<span class="string">"red"</span>);</div><div class="line">          &#125;</div><div class="line">      &#125;;</div><div class="line">      </div><div class="line">      <span class="comment">// 筛选红颜色的苹果</span></div><div class="line">      Predicate&lt;Apple&gt; redApplePredicate1 = (Apple a) -&gt; a.getColor().equals(<span class="string">"red"</span>);</div><div class="line">      </div><div class="line">      <span class="comment">// 筛选不是红颜色的苹果</span></div><div class="line">      Predicate&lt;Apple&gt; notRedApplePredicate = redApplePredicate1.negate();</div><div class="line"></div><div class="line">      List&lt;Apple&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">      <span class="keyword">for</span> (Apple apple : apples) &#123;</div><div class="line">          <span class="keyword">if</span> (notRedApplePredicate.test(apple)) &#123;</div><div class="line">              list.add(apple);</div><div class="line">          &#125;</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<ul>
<li>组合谓词，表达既是红苹果又是绿苹果</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 筛选红颜色的苹果</span></div><div class="line">      Predicate&lt;Apple&gt; redApplePredicate1 = (Apple a) -&gt; a.getColor().equals(<span class="string">"red"</span>);</div><div class="line">      <span class="comment">// 筛选重量大于100g的苹果</span></div><div class="line">      Predicate&lt;Apple&gt; weightApplePredicate = (Apple b) -&gt; b.getWeight() &gt; <span class="number">100</span>;</div><div class="line"><span class="comment">// 既是红苹果并且苹果大于100g </span></div><div class="line">      Predicate&lt;Apple&gt; colorAndWeightApple = redApplePredicate.and(weightApplePredicate);</div><div class="line"><span class="comment">// 等价于</span></div><div class="line">      redApplePredicate.negate().and((Apple apple) -&gt; apple.getWeight() &gt; <span class="number">150</span>);</div><div class="line"></div><div class="line">      List&lt;Apple&gt; list = <span class="keyword">new</span> ArrayList&lt;Apple&gt;();</div><div class="line">      <span class="keyword">for</span> (Apple apple : apples) &#123;</div><div class="line">          <span class="keyword">if</span> (colorAndWeightApple.test(apple)) &#123;</div><div class="line">              list.add(apple);</div><div class="line">          &#125;</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<ul>
<li>进一步组合谓词，要么是中(150g以上)的红苹果，要么是绿苹果</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Predicate&lt;Apple&gt; redOrGreenApplePredicate = redApplePredicate</div><div class="line">                                           	.and(a -&gt; a.getWeight() &gt; <span class="number">150</span>)</div><div class="line">                                           	.or(a -&gt; <span class="string">"green"</span>.equals(a.getColor()));</div><div class="line">       List&lt;Apple&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">       <span class="keyword">for</span> (Apple apple : apples) &#123;</div><div class="line">           <span class="keyword">if</span> (redOrGreenApplePredicate.test(apple)) &#123;</div><div class="line">               list.add(apple);</div><div class="line">           &#125;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：</p>
<p><strong>and和or方法是按照在表达式链中的位置，从左到右确定优先级的。</strong><br>因此，<code>a.or(b).and(c)</code>可以看作 <code>( a || b ) &amp;&amp; c</code></p>
</blockquote>
<h4 id="函数复合"><a href="#函数复合" class="headerlink" title="函数复合"></a>函数复合</h4><ul>
<li>最后你还可以吧Function函数式接口所代表的Lambda表达式复合起来。</li>
<li>Function函数式接口为此配备了<code>andThen()</code>和<code>compose()</code>两个默认方法，他们都会返回Function的一个实例。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Function&lt;Integer, Integer&gt; times2 = e -&gt; e * <span class="number">2</span>;</div><div class="line"></div><div class="line">Function&lt;Integer, Integer&gt; squared = e -&gt; e * e; </div><div class="line"></div><div class="line">times2.compose(squared).apply(<span class="number">4</span>); </div><div class="line"><span class="comment">// Returns 32</span></div><div class="line"></div><div class="line">times2.andThen(squared).apply(<span class="number">4</span>); </div><div class="line"><span class="comment">// Returns 64</span></div></pre></td></tr></table></figure>
<ul>
<li>不知道你是否看懂了，说下这两个方法<ul>
<li><code>a.andThen( b )</code>     先执行 a，然后再执行 b</li>
<li><code>a.compose(b)</code>        先执行 b，然后再执行 a</li>
</ul>
</li>
</ul>
<blockquote>
<p><code>f.andThen(g)</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Function&lt;Integer, Integer&gt; f = x -&gt; x + <span class="number">1</span>;</div><div class="line">   Function&lt;Integer, Integer&gt; g = x -&gt; x * <span class="number">2</span>;</div><div class="line">   Function&lt;Integer, Integer&gt; h = f.andThen(g);</div><div class="line">   <span class="keyword">int</span> result = h.apply(<span class="number">1</span>);</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">输入</th>
<th style="text-align:center"></th>
<th style="text-align:center"><code>f.andthen(g)</code></th>
<th style="text-align:center"></th>
<th style="text-align:center">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">——f—&gt;</td>
<td style="text-align:center">2</td>
<td style="text-align:center">——g——&gt;</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">——f—&gt;</td>
<td style="text-align:center">3</td>
<td style="text-align:center">——g——&gt;</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">——f—&gt;</td>
<td style="text-align:center">4</td>
<td style="text-align:center">——g——&gt;</td>
<td style="text-align:center">8</td>
</tr>
</tbody>
</table>
<blockquote>
<p><code>f.compose(g)</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Function&lt;Integer, Integer&gt; f = x -&gt; x + <span class="number">1</span>;</div><div class="line">   Function&lt;Integer, Integer&gt; g = x -&gt; x * <span class="number">2</span>;</div><div class="line">   Function&lt;Integer, Integer&gt; h = f.compose(g);</div><div class="line">   <span class="keyword">int</span> result = h.apply(<span class="number">1</span>);</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">输入</th>
<th style="text-align:center"></th>
<th style="text-align:center"><code>f.compose(g)</code></th>
<th style="text-align:center"></th>
<th style="text-align:center">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">——f—&gt;</td>
<td style="text-align:center">2</td>
<td style="text-align:center">——g——&gt;</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">——f—&gt;</td>
<td style="text-align:center">4</td>
<td style="text-align:center">——g——&gt;</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">——f—&gt;</td>
<td style="text-align:center">6</td>
<td style="text-align:center">——g——&gt;</td>
<td style="text-align:center">7</td>
</tr>
</tbody>
</table>
<blockquote>
<p>实际<strong>应用：</strong></p>
</blockquote>
<ul>
<li>比如你有一个工具类，用来处理文本。</li>
</ul>
<blockquote>
<p>Letter.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Letter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">addHeader</span><span class="params">(String text)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"benny"</span> + text;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">addFooter</span><span class="params">(String text)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> text + <span class="string">"by benny"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">checkSpelling</span><span class="params">(String text)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> text.replaceAll(<span class="string">"beny"</span>, <span class="string">"benny"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        Function&lt;String, String&gt; addHeader = Letter::addHeader;</div><div class="line">        </div><div class="line">        Function&lt;String, String&gt; transformation = addHeader.andThen(Letter::checkSpelling).andThen(Letter::addFooter);</div><div class="line">        </div><div class="line">        String text = transformation.apply(<span class="string">"i miss beny,because i have not seen him for a long time"</span>);</div><div class="line">        System.out.println(text);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Dear:</div><div class="line"></div><div class="line">i miss benny,because i have not seen him <span class="keyword">for</span> a <span class="keyword">long</span> time</div><div class="line">                                                                by benny</div></pre></td></tr></table></figure>
<ul>
<li>只加抬头和落款，而不做拼写检查：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">      </div><div class="line">      Function&lt;String, String&gt; addHeader = Letter::addHeader;</div><div class="line"></div><div class="line">      Function&lt;String, String&gt; transformation = addHeader.andThen(Letter::addFooter);</div><div class="line">      </div><div class="line">      String text = transformation.apply(<span class="string">"i miss beny,because i have not seen him for a long time"</span>);</div><div class="line">      System.out.println(text);</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Dear:</div><div class="line"></div><div class="line">i miss beny,because i have not seen him <span class="keyword">for</span> a <span class="keyword">long</span> time</div><div class="line">                                                                by benny</div></pre></td></tr></table></figure>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>Lambda表达式可以理解为一种匿名函数：它没有名称、但有参数列表、函数主体、返回类型，可能还有一个可以抛出的异常列表</li>
<li>Lambda表达式可以让你简洁地传递代码</li>
<li><strong>函数式接口</strong>就是仅仅声明了一个抽象方法的接口</li>
<li>只有在接受函数式接口的地方才可以使用Lambda表达式</li>
<li>只有在接受函数式接口的地方才可以使用Lambda表达式</li>
<li>Lambda表达式允许你直接内联，为函数是接口的抽象方法提供实现，并且将整个表达式作为函数式接口的一个实例</li>
<li>java8自带一些常用的函数式接口，放在<code>java.util.function</code>包里，包括<code>Predicate&lt;T&gt;</code>、<code>Function&lt;T,R&gt;</code>、<code>Supplier&lt;T&gt;</code>、<code>Consumer&lt;T&gt;</code>、和<code>BinaryOperatory&lt;T&gt;</code>，详情见函数式接口里的表。</li>
<li>为了避免装箱操作，对<code>Predicate&lt;T&gt;</code>和<code>Function&lt;T,R&gt;</code>等通用函数式接口的原始类型特化，<code>IntPredicate</code>、<code>IntToLongFunction</code>等</li>
<li>环绕执行模式（即在方法所必须的代码中间，你需要执行点什么操作，比如资源分配和清理）可以配合Lambda提高灵活性和可重用性。</li>
<li>Lambda表达式所需要代表的类型成为目标类型</li>
<li>方法引用让你重复只是用现有的方法实现并直接传递它们</li>
<li><code>Comparator</code>、<code>Predicate</code>和<code>Function</code>等函数式接口都有几个可以用来结合Lambda表达式的默认方法。</li>
</ul>
<h1 id="第二部分-函数式数据处理"><a href="#第二部分-函数式数据处理" class="headerlink" title="第二部分 函数式数据处理"></a>第二部分 函数式数据处理</h1><h2 id="第4章-引入流"><a href="#第4章-引入流" class="headerlink" title="第4章 引入流"></a>第4章 引入流</h2><h3 id="流是什么"><a href="#流是什么" class="headerlink" title="流是什么"></a>流是什么</h3><ul>
<li>流是java API的新成员，它允许你以声明性方式处理数据集合(通过查询语句表达而不是临时编写一个实现)</li>
<li>用两个例子来看下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dish</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> vegetarian;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Type type;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dish</span><span class="params">(String name, <span class="keyword">boolean</span> vegetarian, <span class="keyword">int</span> calories, Type type)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.vegetarian = vegetarian;</div><div class="line">        <span class="keyword">this</span>.calories = calories;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//省略 getter 和 setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>java 7</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">List&lt;Dish&gt; menu = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">      List&lt;Dish&gt; lowCaloricDish = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">      <span class="comment">//用累加器筛选元素</span></div><div class="line">      <span class="keyword">for</span> (Dish dish : menu) &#123;</div><div class="line">          <span class="keyword">if</span>(dish.getCalories() &lt; <span class="number">400</span>)&#123;</div><div class="line">              lowCaloricDish.add(dish);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 用匿名类对才要排序</span></div><div class="line">      Collections.sort(lowCaloricDish, <span class="keyword">new</span> Comparator&lt;Dish&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dish o1, Dish o2)</span> </span>&#123;</div><div class="line">              <span class="keyword">return</span> o1.getCalories() - o2.getCalories();</div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      List&lt;String&gt; lowCaloricDishName = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">      <span class="comment">// 处理排序后的菜名列表</span></div><div class="line">      <span class="keyword">for</span> (Dish dish : lowCaloricDish) &#123;</div><div class="line">          lowCaloricDishName.add(dish.getName());</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>java8</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">menu.stream().</div><div class="line">      		filter((Dish dish) -&gt; dish.getCalories() &lt; <span class="number">400</span>)</div><div class="line">              .sorted(Comparator.comparing(Dish::getCalories))</div><div class="line">              .map(Dish::getName)</div><div class="line">            	.collect(Collectors.toList());</div></pre></td></tr></table></figure>
<ul>
<li>为了利用多核架构并行执行这段代码，你只需要吧<code>stream()</code>换成<code>parallelStream()</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">menu.parallelStream()</div><div class="line">     		.filter((Dish dish) -&gt; dish.getCalories() &lt; <span class="number">400</span>)</div><div class="line">             .sorted(Comparator.comparing(Dish::getCalories))</div><div class="line">             .map(Dish::getName)</div><div class="line">             .collect(Collectors.toList());</div></pre></td></tr></table></figure>
<ul>
<li>使用java8的新方法有几个显而易见的好处<ul>
<li>代码是以声明性方式写的<ul>
<li>说明想要完成什么(筛选热量低的菜肴)，而不是说明如何实现一个操作(利用循环和if条件等控制语句)</li>
<li>这种方法加上行为参数化让你可以轻松应对变化的需求：你很容易创建一个代码版本，利用Lambda表达式筛选高卡路里的菜肴，而不用赋值粘贴代码</li>
</ul>
</li>
<li>你可以将几个基础操作链接起来，来表达复杂的数据处理流水线(filter后面接上sorted、map和collect操作)，同事保证代码清晰可读。</li>
</ul>
</li>
</ul>
<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul>
<li>声明性——更简洁、更易读</li>
<li>可复合——更灵活</li>
<li>可并行——性能更好</li>
</ul>
<h3 id="流简介"><a href="#流简介" class="headerlink" title="流简介"></a>流简介</h3><h4 id="流的定义"><a href="#流的定义" class="headerlink" title="流的定义"></a>流的定义</h4><blockquote>
<p>从支持数据处理操作的源生成的元素序列</p>
</blockquote>
<ul>
<li>元素序列<ul>
<li>就像集合一样，流也提供了一个接口，可以访问特定元素类型的一组有序值。</li>
<li>集合是数据结构：<ul>
<li>它的主要目的是以特定的时间/控件复杂度存储和访问元素（如ArrayList和LinkedList）</li>
</ul>
</li>
<li>流的目的在于计算<ul>
<li>比如filter、sorted和map    </li>
</ul>
</li>
<li>集合讲的是数据，流讲的计算</li>
</ul>
</li>
<li>源<ul>
<li>流会使用一个提供数据的源，如集合、数组、或输入/输出资源</li>
<li>从有序集合生成流时会保留原有的顺序。</li>
<li>由列表生成的流，其元素顺序与列表一致</li>
</ul>
</li>
<li>数据处理操作<ul>
<li>流的数据处理功能支持类似与数据库的操作，以及函数式编程语言中的常用操作，如：filter、map、reduce、find、match、sort等。</li>
<li>流操作可以顺序执行，也可以并行</li>
</ul>
</li>
<li>流水线<ul>
<li>很多流操作本身会返回一个流，这样多个操作就可以链接起来，形成一个大的流水线</li>
<li>流的操作可以看做对数据源进行数据库式查询</li>
</ul>
</li>
<li>内部迭代<ul>
<li>与使用迭代器显式迭代的集合不同，流的迭代操作是在背后进行的。</li>
</ul>
</li>
</ul>
<h3 id="流与集合"><a href="#流与集合" class="headerlink" title="流与集合"></a>流与集合</h3><h4 id="只能遍历一次"><a href="#只能遍历一次" class="headerlink" title="只能遍历一次"></a>只能遍历一次</h4><ul>
<li>和迭代器类似，流只能遍历一次。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">List&lt;String&gt; title = Arrays.asList(<span class="string">"java8"</span>, <span class="string">"by"</span>, <span class="string">"heart"</span>);</div><div class="line">      Stream&lt;String&gt; stream = title.stream();</div><div class="line">      stream.forEach(System.out::println);</div><div class="line">      stream.forEach(System.out::println);	<span class="comment">// 抛出 java.lang.IllegalStateException: 流已被操作或关闭</span></div></pre></td></tr></table></figure>
<h4 id="外部迭代与内部迭代"><a href="#外部迭代与内部迭代" class="headerlink" title="外部迭代与内部迭代"></a>外部迭代与内部迭代</h4><ul>
<li>集合：用for-each循环外部迭代</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">List&lt;Dish&gt; menu = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">List&lt;String&gt; names = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">      <span class="keyword">for</span> (Dish dish : menu) &#123;</div><div class="line">          names.add(dish.getName());</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<ul>
<li>集合：用背后的迭代器做外部迭代</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">List&lt;Dish&gt; menu = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">      List&lt;String&gt; names = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">      Iterator&lt;Dish&gt; iterator = menu.iterator();</div><div class="line">      <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">          Dish d = iterator.next();</div><div class="line">          names.add(d.getName());</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<ul>
<li>流内部迭代</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">List&lt;String&gt; names = menu.stream()</div><div class="line">              .map(Dish::getName)		<span class="comment">// 用getName方法参数化map</span></div><div class="line">              .collect(Collectors.toList());</div></pre></td></tr></table></figure>
<h3 id="流操作"><a href="#流操作" class="headerlink" title="流操作"></a>流操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">List&lt;String&gt; names = menu.stream()      <span class="comment">// 获得流</span></div><div class="line">              .filter(d -&gt; d.getCalories() &gt; <span class="number">300</span>)    <span class="comment">// 中间操作</span></div><div class="line">              .map(Dish::getName)     <span class="comment">// 中间操作</span></div><div class="line">              .limit(<span class="number">3</span>)		<span class="comment">// 中间操作</span></div><div class="line">              .collect(Collectors.toList());      <span class="comment">// 将Stream转换为List  终端操作</span></div></pre></td></tr></table></figure>
<ul>
<li>可以链接起来的流操作称为：<strong>中间操作</strong></li>
<li>关闭流的操作称为：<strong>终端操作</strong></li>
</ul>
<h4 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h4><ul>
<li>诸如filter和sorted等中间操作会返回另外一个<strong>流</strong>，这让多个操作可以连接起来形成一个查询。</li>
<li>中间操作不会执行任何处理，除非触发一个终端操作。</li>
</ul>
<h4 id="终端操作"><a href="#终端操作" class="headerlink" title="终端操作"></a>终端操作</h4><ul>
<li>终端操作会从流的流水线生成结果，其结果是任何<strong>不是流的值</strong>，可以使List,Integer,甚至void</li>
</ul>
<h4 id="使用流"><a href="#使用流" class="headerlink" title="使用流"></a>使用流</h4><ul>
<li>流的使用一般包括三件事：<ul>
<li>一个数据源（如集合）来执行一个查询</li>
<li>一个中间操作链，形成一条流的流水线</li>
<li>一个终端操作，执行流水线，并能生成结果</li>
</ul>
</li>
</ul>
<h5 id="中间操作-1"><a href="#中间操作-1" class="headerlink" title="中间操作"></a>中间操作</h5><table>
<thead>
<tr>
<th>操作</th>
<th>类型</th>
<th>返回类型</th>
<th>操作参数</th>
<th>函数描述符</th>
</tr>
</thead>
<tbody>
<tr>
<td>filter</td>
<td>中间</td>
<td><code>Stream&lt;T&gt;</code></td>
<td><code>Predicate&lt;T&gt;</code></td>
<td>T -&gt; boolean</td>
</tr>
<tr>
<td>map</td>
<td>中间</td>
<td><code>Stream&lt;R&gt;</code></td>
<td><code>Function&lt;T,R&gt;</code></td>
<td>T -&gt; R</td>
</tr>
<tr>
<td>limit</td>
<td>中间</td>
<td><code>Stream&lt;T&gt;</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>sorted</td>
<td>中间</td>
<td><code>Stream&lt;T&gt;</code></td>
<td><code>Comparator&lt;T&gt;</code></td>
<td>(T,T) -&gt; int</td>
</tr>
<tr>
<td>distinct</td>
<td>中间</td>
<td><code>Stream&lt;T&gt;</code></td>
<td></td>
</tr>
</tbody>
</table>
<h5 id="终端操作-1"><a href="#终端操作-1" class="headerlink" title="终端操作"></a>终端操作</h5><table>
<thead>
<tr>
<th>操作</th>
<th>类型</th>
<th>目的</th>
</tr>
</thead>
<tbody>
<tr>
<td>forEach</td>
<td>终端</td>
<td>消费流中的每个元素并对其应用Lambda，这一操作返回void</td>
</tr>
<tr>
<td>count</td>
<td>终端</td>
<td>返回流中元素的个数，这一操作返回long</td>
</tr>
<tr>
<td>collect</td>
<td>终端</td>
<td>把流归约承一个集合，比如List，Map甚至是Integer</td>
</tr>
</tbody>
</table>
<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><ul>
<li>流是从支持数据处理操作的源生成的一系列元素</li>
<li>流利用内部迭代：迭代通过filter、map、sorted等操作被抽象掉了</li>
<li>流操作有两类：中间操作和终端操作</li>
<li>filter和map等中间操作会返回一个流，并可以链接在一起。可以用它们来设置一条流水线，但并不会生成任何结果</li>
<li>forEach和Count等终端操作会返回一个非流的值，并处理流水线以返回结果</li>
<li>流中的元素是按需计算的</li>
</ul>
<h2 id="第5章"><a href="#第5章" class="headerlink" title="第5章"></a>第5章</h2><h3 id="筛选和切片"><a href="#筛选和切片" class="headerlink" title="筛选和切片"></a>筛选和切片</h3><h4 id="用谓词筛选"><a href="#用谓词筛选" class="headerlink" title="用谓词筛选"></a>用谓词筛选</h4><ul>
<li>Stream接口支持filter方法，改操作会接受一个谓词（一个返回boolean的函数）作为参数，并返回一个包含所有复合谓词的元素的流。</li>
</ul>
<h4 id="筛选各异的元素"><a href="#筛选各异的元素" class="headerlink" title="筛选各异的元素"></a>筛选各异的元素</h4><ul>
<li>流还支持一个叫做distinct的方法，它会返回一个元素各异（根据流所生成元素的hashCode和equals方法实现）的流。</li>
<li>简单点说就是去重</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>);</div><div class="line">      list.stream()</div><div class="line">      		.filter(num -&gt; num % <span class="number">2</span> == <span class="number">0</span>)</div><div class="line">              .distinct()</div><div class="line">              .forEach(System.out::print);</div><div class="line"></div><div class="line">outPut: <span class="number">2</span>  <span class="number">4</span>  <span class="number">8</span></div></pre></td></tr></table></figure>
<h4 id="截断流"><a href="#截断流" class="headerlink" title="截断流"></a>截断流</h4><ul>
<li>流支持limit方法，该方法会返回一个不超过给定长度的流。所需参数作为参数传递给limit</li>
<li>如果流是有序的，则最多会返回前n个元素</li>
</ul>
<blockquote>
<p>limit也可以用在无序流上，比如源是一个Set，这种情况下，limit的结果不会以任何形式排序</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>);</div><div class="line">      list.stream().filter(num -&gt; num % <span class="number">2</span> == <span class="number">0</span>)</div><div class="line">              .distinct()</div><div class="line">              .limit(<span class="number">2</span>)</div><div class="line">              .forEach(System.out::print);</div><div class="line"></div><div class="line">      outPut： <span class="number">2</span>   <span class="number">4</span></div></pre></td></tr></table></figure>
<h4 id="跳过元素"><a href="#跳过元素" class="headerlink" title="跳过元素"></a>跳过元素</h4><ul>
<li>流还支持skip(n)方法，返回一个<strong>扔掉了前n个元素</strong>的流。</li>
<li>如果流中元素个数不足n个，则放回一个空流。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>);</div><div class="line">      list.stream().filter(num -&gt; num % <span class="number">2</span> == <span class="number">0</span>)</div><div class="line">              .distinct()</div><div class="line">              .skip(<span class="number">2</span>)</div><div class="line">              .forEach(System.out::print);</div><div class="line"></div><div class="line">outPut: <span class="number">8</span></div></pre></td></tr></table></figure>
<h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><h4 id="对流中每一个元素应用函数"><a href="#对流中每一个元素应用函数" class="headerlink" title="对流中每一个元素应用函数"></a>对流中每一个元素应用函数</h4><ul>
<li>流支持map方法，它会接受一个函数作为参数。</li>
<li>这个函数会被应用到每个元素上，并将其映射成一个新的元素（使用映射，是因为他和转换类似，但其中的细微差别在于它是“<strong>创建一个新版本</strong>”，而不是去“修改”）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">strs.stream()</div><div class="line">              .map(String::length)</div><div class="line">              .sorted()</div><div class="line">              .forEach(System.out::println);</div></pre></td></tr></table></figure>
<ul>
<li>当你不知道一个方法中的Lambda表达式应该如何写的时候，你可以这样做</li>
<li>先传入匿名内部类，然后一步一步的提炼</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">①</div><div class="line">strs.stream()</div><div class="line">	.map(<span class="keyword">new</span> Function&lt;String, Integer&gt;() &#123;</div><div class="line">              <span class="meta">@Override</span></div><div class="line">              <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                  <span class="keyword">return</span> s.length();</div><div class="line">              &#125;</div><div class="line">          &#125;)</div><div class="line">          .sorted()</div><div class="line">          .forEach(System.out::println);</div><div class="line">②</div><div class="line">      strs.stream()</div><div class="line">      	.map((String s) -&gt; s.length())</div><div class="line">          .sorted()</div><div class="line">          .forEach(System.out::println);</div><div class="line">③</div><div class="line">strs.stream()</div><div class="line">          .map(s -&gt; s.length());</div><div class="line">          .sorted()</div><div class="line">          .forEach(System.out::println);</div><div class="line">④</div><div class="line">strs.stream()</div><div class="line">	.map(String::length)</div><div class="line">	.sorted()</div><div class="line">          .forEach(System.out::println);</div></pre></td></tr></table></figure>
<h4 id="流的扁平化"><a href="#流的扁平化" class="headerlink" title="流的扁平化"></a>流的扁平化</h4><ul>
<li>如何返回一张单词表，列出里面各不相同的字符呢。</li>
<li>第一个版本,返回的是一个list，里面包含了两个string[]数组</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; words = Arrays.asList(<span class="string">"hello"</span>, <span class="string">"world"</span>);</div><div class="line">      List&lt;String[]&gt; collect = words.stream()</div><div class="line">              .map(str -&gt; str.split(<span class="string">""</span>))</div><div class="line">              .distinct()</div><div class="line">              .collect(Collectors.toList());</div><div class="line"></div><div class="line">outPut:		[[Ljava.lang.String;@<span class="number">7</span>a79be86, [Ljava.lang.String;@<span class="number">34</span>ce8af7]</div></pre></td></tr></table></figure>
<blockquote>
<p>这与我们想要的不同，我们要的是<code>List&lt;String&gt;</code>而现在是<code>List&lt;String[]&gt;</code></p>
</blockquote>
<ul>
<li>尝试使用Map和Arrays.stream()</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">String[] word = &#123;<span class="string">"hello"</span>, <span class="string">"world"</span>&#125;;</div><div class="line">Stream&lt;String&gt; wordStream = Arrays.stream(word);</div><div class="line">List&lt;String[]&gt; collect = wordStream</div><div class="line">        .map(str -&gt; str.split(<span class="string">""</span>))</div><div class="line">        .collect(Collectors.toList());</div></pre></td></tr></table></figure>
<blockquote>
<p>依然搞不定，返回的仍然是<code>List&lt;String[]&gt;</code></p>
</blockquote>
<ul>
<li>我们可以使用<strong>flatMap</strong>来解决这个问题        ☆☆☆☆☆☆</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">List&lt;String&gt; words = Arrays.asList(<span class="string">"hello"</span>, <span class="string">"world"</span>);</div><div class="line">      List&lt;String&gt; collect = words.stream()</div><div class="line">              .map(str -&gt; str.split(<span class="string">""</span>))</div><div class="line">              .flatMap(<span class="keyword">new</span> Function&lt;String[], Stream&lt;String&gt;&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> Stream&lt;String&gt; <span class="title">apply</span><span class="params">(String[] strings)</span> </span>&#123;</div><div class="line">              <span class="keyword">return</span> Arrays.stream(strings);</div><div class="line">          &#125;</div><div class="line">      &#125;)</div><div class="line">              .distinct()</div><div class="line">              .collect(Collectors.toList());</div><div class="line"></div><div class="line"><span class="comment">// 使用lambda表达式</span></div><div class="line"></div><div class="line">List&lt;String&gt; words = Arrays.asList(<span class="string">"hello"</span>, <span class="string">"world"</span>);</div><div class="line">      List&lt;String&gt; collect = words.stream()</div><div class="line">              .map(str -&gt; str.split(<span class="string">""</span>))</div><div class="line">              .flatMap(Arrays::stream)</div><div class="line">              .distinct()</div><div class="line">              .collect(Collectors.toList());</div><div class="line"></div><div class="line"><span class="comment">// 另一种方式</span></div><div class="line">String[] word = &#123;<span class="string">"hello"</span>, <span class="string">"world"</span>&#125;;</div><div class="line">      Stream&lt;String&gt; wordStream = Arrays.stream(word);</div><div class="line">      List&lt;String&gt; collect = wordStream</div><div class="line">              .map(str -&gt; str.split(<span class="string">""</span>))</div><div class="line">              .flatMap(Arrays::stream)</div><div class="line">              .distinct()</div><div class="line">              .collect(Collectors.toList());</div><div class="line"></div><div class="line">outPut:		h, e, l, o, w, r, d</div></pre></td></tr></table></figure>
<ul>
<li><strong>flatMap()方法</strong></li>
<li>让你将流中的每个值都换成另一个流，然后把所有的流连接起来成为一个流</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 给定给一个数字列表，返回一个由每个数的平方构成的列表</span></div><div class="line">      List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">      List&lt;Integer&gt; collect = integers.stream()</div><div class="line">              .map(n -&gt; n * n)</div><div class="line">              .collect(Collectors.toList());</div><div class="line"></div><div class="line">outPut:  <span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">25</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 给定两个数字列表，如何返回所有的数对</span></div><div class="line">      List&lt;<span class="keyword">int</span>[]&gt; collect1 = integers1.stream().</div><div class="line">              flatMap(i -&gt; integers2.stream()</div><div class="line">                      .map(j -&gt; <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, j&#125;))</div><div class="line">              .collect(Collectors.toList());</div><div class="line"></div><div class="line">outPut:		(<span class="number">1.3</span>),(<span class="number">1</span>,<span class="number">4</span>(<span class="number">2</span>,<span class="number">3</span>)(<span class="number">2</span>,<span class="number">4</span>),(<span class="number">3</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">4</span>)</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 拓展上一个例子，只返回总和能被3整除的数对</span></div><div class="line">List&lt;<span class="keyword">int</span>[]&gt; collect1 = integers1.stream().</div><div class="line">              flatMap(i -&gt; integers2.stream()</div><div class="line">                      .filter(j -&gt; (i + j) % <span class="number">3</span> == <span class="number">0</span>)</div><div class="line">                      .map(j -&gt; <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, j&#125;)</div><div class="line">                      .sorted(Comparator.comparing(ints -&gt; ints[<span class="number">0</span>] - ints[<span class="number">1</span>])))</div><div class="line">              .collect(Collectors.toList());</div></pre></td></tr></table></figure>
<ul>
<li>和map类似，不同的是其每个元素转换得到的是Stream对象，会把子Stream中的元素压缩到父集合中；</li>
</ul>
<p><img src="http://img01.taobaocdn.com/imgextra/i1/90219132/T2mBXnXQhXXXXXXXXX_!!90219132.jpg" alt="借用之并发编程网"></p>
<h3 id="查找和匹配"><a href="#查找和匹配" class="headerlink" title="查找和匹配"></a>查找和匹配</h3><ul>
<li>Stream API 通过allMatch、anyMatch、noneMatch、findFirst和findAny()方法提供了这样的工具</li>
</ul>
<h4 id="检查谓词是否至少匹配一个元素"><a href="#检查谓词是否至少匹配一个元素" class="headerlink" title="检查谓词是否至少匹配一个元素"></a>检查谓词是否至少匹配一个元素</h4><ul>
<li><strong>anyMatch()方法</strong><ul>
<li>查看流中是否有一个元素能匹配给定的谓词</li>
<li>anyMatch()方法返回一个人<strong>boolean</strong></li>
<li>因为返回boolean,所以是<strong>终端操作</strong></li>
</ul>
</li>
</ul>
<blockquote>
<p>比如查看菜单中是否有素食</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> flag = menu.stream().anyMatch(Dish::isVegetarian);</div><div class="line">      </div><div class="line"><span class="keyword">if</span> (flag) &#123;</div><div class="line">          System.out.println(<span class="string">"the meat is vegetarian"</span>);</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<h4 id="检查谓词是否匹配所有元素"><a href="#检查谓词是否匹配所有元素" class="headerlink" title="检查谓词是否匹配所有元素"></a>检查谓词是否匹配所有元素</h4><ul>
<li><strong>allMatch()方法</strong><ul>
<li>工作原理和anyMatch()类似，但它会查看流中的元素是否都能匹配给定的谓词。</li>
</ul>
</li>
</ul>
<blockquote>
<p>查看菜品是否健康</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> flag = menu.stream().allMatch(d -&gt; d.getCalories() &lt; <span class="number">1000</span>);</div></pre></td></tr></table></figure>
<ul>
<li><strong>noneMatch()</strong><ul>
<li>与allMatch()相反，它可以确保流中没有任何元素与给定的谓词匹配。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> flag = menu.stream().allMatch(d -&gt; d.getCalories() &lt; <span class="number">1000</span>);</div></pre></td></tr></table></figure>
<ul>
<li>短路求值<ul>
<li>有些操作不需要处理整个流就能得到结果。</li>
</ul>
</li>
</ul>
<h4 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h4><ul>
<li><strong>findAny()方法</strong></li>
<li>返回当前流中的任意元素，它可以与其他操作结合使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Optional&lt;Dish&gt; any = menu.stream()</div><div class="line">              .filter(Dish::isVegetarian)</div><div class="line">              .findAny();</div></pre></td></tr></table></figure>
<ul>
<li>流水线将在后台只需走一遍，并利用短路找到结果立即返回。 </li>
<li><code>Optional&lt;T&gt;</code>类是一个容器类，代表一个值存在或不存在</li>
<li>Optional里面有几种可以迫使你显式的检查值是否存在或处理值不存在的情形的方法</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>isPresent()</code></td>
<td>将在optional包含值的时候返回true，反之返回false</td>
</tr>
<tr>
<td><code>isPresent(Consumer&lt;T&gt; block)</code></td>
<td>会在值存在时执行给定的代码块，在第3章介绍过Consumer函数式接口，他让你传递一个接受T类型参数，并返回void的Lambda表达式</td>
</tr>
<tr>
<td><code>T get()</code></td>
<td>会在值存在时返回值，否则抛出一个NoSuchElement异常</td>
</tr>
<tr>
<td><code>T orElse(T other)</code></td>
<td>会在值存在时防具机制，否则返回一个默认值</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">menu.stream()</div><div class="line">              .filter(Dish::isVegetarian)</div><div class="line">              .findAny()</div><div class="line">              .ifPresent(dish -&gt; System.out.println(dish.getName()));     <span class="comment">//如果包含值就打印它，反之什么都不做</span></div></pre></td></tr></table></figure>
<h4 id="查找第一个元素"><a href="#查找第一个元素" class="headerlink" title="查找第一个元素"></a>查找第一个元素</h4><ul>
<li><strong>findFirser()方法</strong></li>
<li>工作方式类似于findAny()，查找第一个元素</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; integers1 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>);</div><div class="line">       integers1.stream()</div><div class="line">               .filter(x -&gt; x % <span class="number">3</span> == <span class="number">0</span>)</div><div class="line">               .findFirst()</div><div class="line">               .ifPresent(System.out::println);</div></pre></td></tr></table></figure>
<blockquote>
<p>那么问题来了：何时使用<strong>findFirst</strong>和<strong>findAny</strong></p>
</blockquote>
<ul>
<li>答案是并行，找到第一个元素在并行上限制更多，如果你不关心返回的元素是哪个，请使用findAny()</li>
<li>因为<em>*findAny()</em>在并行流时限制较少</li>
</ul>
<h3 id="归并"><a href="#归并" class="headerlink" title="归并"></a>归并</h3><ul>
<li>使用reduce来操作更为复杂的查询<ul>
<li>此类查询需要将流中的所有元素反复结合起来，得到一个值</li>
</ul>
</li>
<li>这样的查询可以被归类为<strong>归约操作</strong>（将流归约承一个值）</li>
</ul>
<h4 id="元素求和"><a href="#元素求和" class="headerlink" title="元素求和"></a>元素求和</h4><ul>
<li>使用for-each循环来对数字列表中的元素求和</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">      <span class="keyword">for</span> (Integer integer : integers) &#123;</div><div class="line">          sum += integer;</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<ul>
<li>在这里代码有两个参数<ul>
<li>总和变量的初始值，在这里是0</li>
<li>将列表中的所有元素结合在一起的操作，这里是<code>+</code></li>
</ul>
</li>
<li>要是想要将所有的数字想成，而不必复制粘贴这些代码，就要用reduce</li>
</ul>
<blockquote>
<p><strong>reduce()方法</strong></p>
</blockquote>
<ul>
<li>reduce()方法<ul>
<li>对这种重复应用的模式做了抽象</li>
<li><strong>它接受两个参数</strong><ul>
<li>一个初始值，这里是0</li>
<li>一个BinaryOperator<t> 来讲两个元素结合起来产生一个新值</t></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">      <span class="keyword">int</span> reduce = integers.stream()</div><div class="line">              .reduce(<span class="number">0</span>, <span class="keyword">new</span> BinaryOperator&lt;Integer&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer integer, Integer integer2)</span> </span>&#123;</div><div class="line">              <span class="keyword">return</span> integer + integer2;</div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line"><span class="comment">// 使用Lambda表达式</span></div><div class="line">      List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">      <span class="keyword">int</span> reduce = integers.stream()</div><div class="line">              .reduce(<span class="number">0</span>, (integer, integer2) -&gt; integer + integer2);</div><div class="line">      <span class="comment">// 使用方法引用让这段代码更加整洁</span></div><div class="line">List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">      <span class="keyword">int</span> reduce = integers.stream()</div><div class="line">              .reduce(<span class="number">0</span>, Integer::sum);</div></pre></td></tr></table></figure>
<blockquote>
<p>无初始值</p>
</blockquote>
<ul>
<li><code>reduce()</code>还有一个重载的辩题，它不接受初始值，但是会返回一个Optional对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">integers.stream()</div><div class="line">        .reduce(Integer::sum)</div><div class="line">        .ifPresent(System.out::println);</div></pre></td></tr></table></figure>
<ul>
<li>为什么返回一个<code>Optional&lt;Integer&gt;</code>考虑流中没有任何元素的情况。</li>
<li>reduce操作无法返回其和，<strong>因为它没有初始值</strong></li>
</ul>
<h4 id="最大值和最小值"><a href="#最大值和最小值" class="headerlink" title="最大值和最小值"></a>最大值和最小值</h4><ul>
<li>reduce只要接受两个参数</li>
<li>一个初始值</li>
<li>一个Lambda来把两个流元素应用到流中每个元素上</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*最大值*/</span></div><div class="line">List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">      integers.stream().reduce(<span class="number">0</span>, <span class="keyword">new</span> BinaryOperator&lt;Integer&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer integer, Integer integer2)</span> </span>&#123;</div><div class="line">              <span class="keyword">if</span>(integer&gt;integer2)&#123;</div><div class="line">                  <span class="keyword">return</span> integer;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">return</span> integer2;</div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line">      <span class="comment">// 使用三目运算符</span></div><div class="line">      List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">      integers.stream().reduce(<span class="number">0</span>, <span class="keyword">new</span> BinaryOperator&lt;Integer&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer integer, Integer integer2)</span> </span>&#123;</div><div class="line">              <span class="keyword">return</span> integer &gt; integer2 ? integer : integer2;</div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line">      <span class="comment">// 使用Lambda表达式</span></div><div class="line">      List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">      integers.stream().reduce(<span class="number">0</span>, (integer, integer2) -&gt; integer &gt; integer2 ? integer : integer2);</div><div class="line">      <span class="comment">// 修改变量名 太长不优雅</span></div><div class="line">      List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">      integers.stream().reduce(<span class="number">0</span>, (x, y) -&gt; x &gt; y ? x : y);</div><div class="line">      <span class="comment">// 使用方法引用 这样就优雅多了</span></div><div class="line">List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">      integers.stream().reduce(<span class="number">0</span>, Integer::max);</div><div class="line">      <span class="comment">// 还要更优雅</span></div><div class="line">List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">      integers.stream().reduce(Integer::max);</div><div class="line">      <span class="comment">/*最小值*/</span></div><div class="line">List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">      <span class="keyword">int</span> reduce = integers.stream().reduce(<span class="number">0</span>, Integer::min);</div><div class="line">      <span class="comment">// 与上面相同 只是没有初始值的时候返回值不同</span></div><div class="line">      List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">      <span class="keyword">int</span> reduce = integers.stream().reduce(Integer::min).get();</div></pre></td></tr></table></figure>
<blockquote>
<p>怎样用map和reduce来查询流中有多少元素</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*查询流中共有多少元素*/</span></div><div class="line">      List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">      <span class="keyword">int</span> reduce = integers.stream().map(<span class="keyword">new</span> Function&lt;Integer, Integer&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">              <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;).reduce(<span class="number">0</span>, <span class="keyword">new</span> BinaryOperator&lt;Integer&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer o, Integer o2)</span> </span>&#123;</div><div class="line">              <span class="keyword">return</span> o + o2;</div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line"><span class="comment">// 使用Lambda表达式</span></div><div class="line"><span class="keyword">int</span> reduce = integers.stream().map(x -&gt; <span class="number">1</span>).reduce(<span class="number">0</span>, (x, y) -&gt; x + y);</div><div class="line">      <span class="comment">// 优雅点</span></div><div class="line"><span class="keyword">int</span> reduce = integers.stream().map(x -&gt; <span class="number">1</span>).reduce(<span class="number">0</span>, Integer::sum);</div><div class="line"><span class="comment">// 就是算下大小有点太复杂了，直接使用count</span></div><div class="line"><span class="keyword">long</span> count = integers.stream().count();</div></pre></td></tr></table></figure>
<h5 id="中间操作和终端操作"><a href="#中间操作和终端操作" class="headerlink" title="中间操作和终端操作"></a>中间操作和终端操作</h5><table>
<thead>
<tr>
<th>操作</th>
<th>类型</th>
<th>返回类型</th>
<th>操作参数</th>
<th>函数描述符</th>
</tr>
</thead>
<tbody>
<tr>
<td>filter</td>
<td>中间操作</td>
<td><code>Stream&lt;T&gt;</code></td>
<td><code>Predicate&lt;T&gt;</code></td>
<td><code>T -&gt; boolean</code></td>
</tr>
<tr>
<td>distinct</td>
<td>中间操作(有状态——无界)</td>
<td><code>Stream&lt;T&gt;</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>skip</td>
<td>中间操作(有状态——有界)</td>
<td><code>Stream&lt;T&gt;</code></td>
<td><code>long</code></td>
<td></td>
</tr>
<tr>
<td>limit</td>
<td>中间操作(有状态——有界)</td>
<td><code>Stream&lt;T&gt;</code></td>
<td><code>long</code></td>
<td></td>
</tr>
<tr>
<td>map</td>
<td>中间操作</td>
<td><code>Stream&lt;T&gt;</code></td>
<td><code>Function&lt;T,R&gt;</code></td>
<td><code>T -&gt; R</code></td>
</tr>
<tr>
<td>flatMap</td>
<td>中间操作</td>
<td><code>Stream&lt;T&gt;</code></td>
<td><code>Function&lt;T,Stream&lt;R&gt;&gt;</code></td>
<td><code>T -&gt; Stream&lt;R&gt;</code></td>
</tr>
<tr>
<td>sorted</td>
<td>中间操作(有状态——无界)</td>
<td><code>Stream&lt;T&gt;</code></td>
<td><code>Comparator&lt;T&gt;</code></td>
<td><code>( T , T ) -&gt; int</code></td>
</tr>
<tr>
<td></td>
<td>终</td>
<td>端</td>
<td>操</td>
<td>作</td>
</tr>
<tr>
<td>anyMatch</td>
<td>终端操作</td>
<td><code>boolean</code></td>
<td><code>Predicate&lt;T&gt;</code></td>
<td><code>T -&gt; boolean</code></td>
</tr>
<tr>
<td>noneMatch</td>
<td>终端操作</td>
<td><code>boolean</code></td>
<td><code>Predicate&lt;T&gt;</code></td>
<td><code>T -&gt; boolean</code></td>
</tr>
<tr>
<td>allMatch</td>
<td>终端操作</td>
<td><code>boolean</code></td>
<td><code>Predicate&lt;T&gt;</code></td>
<td><code>T -&gt; boolean</code></td>
</tr>
<tr>
<td>findAny</td>
<td>终端操作</td>
<td><code>Optional&lt;T&gt;</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>findFirst</td>
<td>终端操作</td>
<td><code>Optional&lt;T&gt;</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>forEach</td>
<td>终端操作</td>
<td><code>void</code></td>
<td><code>consumer&lt;T&gt;</code></td>
<td><code>T -&gt; void</code></td>
</tr>
<tr>
<td>collect</td>
<td>终端操作</td>
<td><code>R</code></td>
<td><code>Collector&lt;T,A,R&gt;</code></td>
<td></td>
</tr>
<tr>
<td>reduce</td>
<td>终端操作(有状态——有界)</td>
<td><code>Optional&lt;T&gt;</code></td>
<td><code>BinaryOperator&lt;T&gt;</code></td>
<td><code>( T , T ) -&gt; T</code></td>
</tr>
<tr>
<td>count</td>
<td>终端操作</td>
<td><code>long</code></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="付诸实践"><a href="#付诸实践" class="headerlink" title="付诸实践"></a>付诸实践</h3><ul>
<li>当你对list中的元素进行去重的时候，可以考虑使用<code>toSet()</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; collect = transactions.stream()</div><div class="line">              .map(x -&gt; x.getTrader().getCity())</div><div class="line">              .distinct()</div><div class="line">              .collect(Collectors.toList());</div></pre></td></tr></table></figure>
<ul>
<li>[x] 使用<code>toSet()</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用toSet()        </span></div><div class="line"> Set&lt;String&gt; collect = transactions.stream()</div><div class="line">              .map(x -&gt; x.getTrader().getCity())</div><div class="line">              .collect(Collectors.toSet());</div></pre></td></tr></table></figure>
<ul>
<li>连接字符串效率不高，可以考虑使用<code>Collectors.joining()</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String collect = transactions.stream()</div><div class="line">              .map((Transaction t) -&gt; t.getTrader().getName())</div><div class="line">              .sorted()</div><div class="line">              .distinct()</div><div class="line">              .reduce((str1, str2) -&gt; str1 + str2).get();</div></pre></td></tr></table></figure>
<ul>
<li>[x] 使用<code>Collectors.joining()</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String collect = transactions.stream()</div><div class="line">              .map((Transaction t) -&gt; t.getTrader().getName())</div><div class="line">              .sorted()</div><div class="line">              .distinct().collect(Collectors.joining());</div></pre></td></tr></table></figure>
<ul>
<li>流支持 <strong>min()</strong> 和 <strong>max()</strong> 方法，他们可以接受一个Comparator作为参数，制定计算最大或最小值要比较哪个键值</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Transaction transaction = transactions.stream()</div><div class="line">              .reduce((x, y) -&gt; x.getValue() &gt; y.getValue() ? x : y)</div><div class="line">              .get();</div></pre></td></tr></table></figure>
<ul>
<li>[x] 使用 <strong>min()</strong>方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Transaction transaction = transactions.stream()</div><div class="line">              .min(Comparator.comparing(Transaction::getValue))</div><div class="line">              .get();</div></pre></td></tr></table></figure>
<h3 id="数值流"><a href="#数值流" class="headerlink" title="数值流"></a>数值流</h3><ul>
<li>在前面我们看到了可以使用 <strong>reduce()</strong> 方法计算流中元素的总和</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> reduce = menu.stream()</div><div class="line">              .map(Dish::getCalories)</div><div class="line">              .reduce(<span class="number">0</span>, Integer::sum);</div></pre></td></tr></table></figure>
<ul>
<li>这段代码的问题是，它有一个暗含的装箱成本， 每个Integer都必须拆箱承一个原始类型再进行求和</li>
<li>为此，Stream API 提供了原始类型流特化,专门处理数值流的办法</li>
</ul>
<h4 id="原始类型流特化"><a href="#原始类型流特化" class="headerlink" title="原始类型流特化"></a>原始类型流特化</h4><ul>
<li>Java8 引入了三个原始类型特化流接口<ul>
<li><strong>IntStream</strong></li>
<li><strong>DoubleStream</strong></li>
<li><strong>LongStream</strong></li>
</ul>
</li>
<li>分别将流中的元素特化为 int 、long 和 double，从而避免暗含的装箱成本</li>
</ul>
<blockquote>
<p>映射到数值流</p>
</blockquote>
<ul>
<li>将流转换为特化版本的常用方法 <strong>mapToInt()</strong> 、 <strong>mapToDouble()</strong> 和 <strong>mapToLong()</strong></li>
<li>这些方法和 map 方法的工作方式一样，只是他们返回的是一个特化流，而不是 `Stream<t>``</t></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> sum = menu.stream()</div><div class="line">              .mapToInt(Dish::getCalories)</div><div class="line">              .sum();</div></pre></td></tr></table></figure>
<ul>
<li>如果流是空的，<strong>sum()</strong>方法 默认返回0</li>
<li>IntStream 还支持其他的方法方法，如 <strong>max()</strong>、<strong>min()</strong>、<strong>average()</strong> 等</li>
</ul>
<blockquote>
<p>转换为对象流</p>
</blockquote>
<ul>
<li>要将原始流转换为一般流，可以使用 <strong>boxed()</strong> 方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">IntStream intStream = menu.stream()</div><div class="line">              .mapToInt(Dish::getCalories);</div><div class="line">      Stream&lt;Integer&gt; boxed = intStream.boxed();</div></pre></td></tr></table></figure>
<blockquote>
<p>默认值 <strong>OptionalInt</strong></p>
</blockquote>
<ul>
<li>求和的例子很简单，因为它有一个默认值： 0 </li>
<li>如果你要计算 IntStream 中的最大元素，就得换个方法了，因为0是错误的结果</li>
<li>如何区分没有元素的流和元素最大的流呢？</li>
<li>对于三种原始流特化，也分别有一个 Optional 原始类型特化版本：<ul>
<li><strong>OptionalInt</strong></li>
<li><strong>OptionDouble</strong></li>
<li><strong>OptionalLong</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">OptionalInt opt = menu.stream()</div><div class="line">              .mapToInt(Dish::getCalories)</div><div class="line">              .max();</div><div class="line">      <span class="keyword">int</span> max = opt.orElse(<span class="number">520</span>);		<span class="comment">// 如果没有默认值的话，显式的提供一个默认最大值</span></div></pre></td></tr></table></figure>
<ul>
<li>有的时候无法区分是没有元素的流，还是最大值真的是0的流，可以显式处理 OptionalInt 去定义一个默认最大值</li>
</ul>
<blockquote>
<p>如果没有最大值的话，可以显式的处理 <strong>OptionalInt</strong> 去定义一个默认值</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> max = opt.orElse(<span class="number">520</span>);		<span class="comment">// 如果没有默认值的话，显式的提供一个默认最大值</span></div></pre></td></tr></table></figure>
<h4 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h4><ul>
<li>java8 引入了两个一个用于 IntStream 和 LongStream 的静态方法，帮助生成这种范围<ul>
<li>range()</li>
<li>rangeClosed()</li>
</ul>
</li>
<li>这两个方法都是第一个参数接受起始值，第二个参数接受结束值。</li>
<li>range() 是不包括结束值的    <code>[x,y)</code></li>
<li>rangeClosed() 包含结束值    <code>[x,y]</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 调用range(...)方法</span></div><div class="line">IntStream range = IntStream.range(<span class="number">1</span>, <span class="number">5</span>);</div><div class="line">      range.forEach(System.out::print);</div><div class="line"></div><div class="line">outPut: <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span></div><div class="line"></div><div class="line"><span class="comment">// 调用rangeClosed(...)方法</span></div><div class="line">      IntStream range2 = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">5</span>);</div><div class="line">      range2.forEach(System.out::print);</div><div class="line"></div><div class="line">      outPut: <span class="number">1</span> <span class="number">2</span>  <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></div></pre></td></tr></table></figure>
<h4 id="数值流应用-勾股数"><a href="#数值流应用-勾股数" class="headerlink" title="数值流应用 勾股数"></a>数值流应用 勾股数</h4><h3 id="构建流"><a href="#构建流" class="headerlink" title="构建流"></a>构建流</h3><h4 id="由值创建流"><a href="#由值创建流" class="headerlink" title="由值创建流"></a>由值创建流</h4><ul>
<li>可以使用静态方法 <strong>Stream.of(…)</strong> 通过显式值创建一个流</li>
<li>可以使用 <strong>empty()</strong>创建一个空流</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Stream&lt;Integer&gt; integerStream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">      integerStream.forEach(System.out::println);</div><div class="line">      </div><div class="line">      <span class="comment">// 创建一个空流</span></div><div class="line">      Stream&lt;Object&gt; emptyStream = Stream.empty();</div></pre></td></tr></table></figure>
<h4 id="由数组创建流"><a href="#由数组创建流" class="headerlink" title="由数组创建流"></a>由数组创建流</h4><ul>
<li>你可以使用静态方法 <strong>Arrays.stream(…)</strong> 从数组创建一个流</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</div><div class="line"><span class="keyword">int</span> sum = Arrays.stream(nums).sum();</div></pre></td></tr></table></figure>
<h4 id="由文件创建流"><a href="#由文件创建流" class="headerlink" title="由文件创建流"></a>由文件创建流</h4><ul>
<li>java中用与处理文件等I/O操作的NIO API（非阻塞I/O）已更新，以便利用 Stream API</li>
<li><code>java.nio.file.Files</code> 中的很多静态方法都会返回一个流。</li>
<li>一个很有用的方法 <strong>Files.readLines()</strong><ul>
<li>它会返回一个由指定文件中的各行构成的字符串流。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Files.lines(Paths.get(<span class="string">"C:\\Users\\Administrator\\Desktop\\dd.txt"</span>), Charset.defaultCharset())</div><div class="line">                  .flatMap(line -&gt; Arrays.stream(line.split(<span class="string">" "</span>)))</div><div class="line">                  .forEach(System.out::println);</div></pre></td></tr></table></figure>
<ul>
<li>[x] 上面的方法是每一行生成一个单词流，我们修改一下产生一个扁平化的单词流</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Files.lines(Paths.get(<span class="string">"C:\\Users\\Administrator\\Desktop\\dd.txt"</span>), Charset.defaultCharset())</div><div class="line">                  .map(line -&gt; line.split(<span class="string">" "</span>))</div><div class="line">                  .flatMap(lines -&gt; Arrays.stream(lines))</div><div class="line">                  .forEach(System.out::println);</div></pre></td></tr></table></figure>
<h4 id="由函数创建流-创建无限流"><a href="#由函数创建流-创建无限流" class="headerlink" title="由函数创建流  创建无限流"></a>由函数创建流  创建无限流</h4><ul>
<li>Stream API 提供了两个静态方法从函数创建流：<ul>
<li><strong>Stream.iterate(…)</strong></li>
<li><strong>Stream.generate(…)</strong></li>
</ul>
</li>
<li>这两个操作可以创建所谓的无限流：不想固定集合创建的流那样有固定大小的流</li>
<li>由 <strong>iterate</strong> 和 <strong>generate</strong> 创建的流会用给定的函数按需创建主，因此可以无线创建下去</li>
</ul>
<blockquote>
<p>Stream.iterate(…)<br>第一个参数是初始值，第二个参数是一个Lambda表达式(<code>UnaryOperator&lt;T&gt;</code>类型【UnaryOperator ♥ 一元运算符】)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Stream.iterate(<span class="number">0</span>, <span class="keyword">new</span> UnaryOperator&lt;Integer&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">              <span class="keyword">return</span> integer + <span class="number">2</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;).forEach(System.out::println);</div><div class="line">      </div><div class="line"><span class="comment">// 使用Lambda表达式</span></div><div class="line">      Stream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>).forEach(System.out::println);</div></pre></td></tr></table></figure>
<blockquote>
<p>这样得到的是一个无限流，我们使用 <strong>limit(…)</strong>方法显式的限制流的大小。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</div></pre></td></tr></table></figure>
<blockquote>
<p>Stream.generate(…)</p>
</blockquote>
<ul>
<li>与iterate方法类似，generate方法也可以让你按需生成一个无限流。但generate不是一次对每个新生成的值应用函数的。</li>
<li>它接受一个供应源<code>Supplier&lt;T&gt;</code>类型的Lambda提供的值。</li>
</ul>
<ul>
<li>[x] 示例代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Stream.generate(Math::random)</div><div class="line">              .limit(<span class="number">10</span>)</div><div class="line">              .forEach(System.out::println);</div></pre></td></tr></table></figure>
<ul>
<li>[x] 使用 <strong>IntStream</strong> 说明避免装箱操作</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">IntStream.generate(<span class="keyword">new</span> IntSupplier() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAsInt</span><span class="params">()</span> </span>&#123;</div><div class="line">              <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;).limit(<span class="number">20</span>)</div><div class="line">      .forEach(System.out::print);</div><div class="line"><span class="comment">// 使用Lambda表达式</span></div><div class="line">IntStream.generate(() -&gt; <span class="number">2</span>)</div><div class="line">              .limit(<span class="number">20</span>)</div><div class="line">              .forEach(System.out::print);</div><div class="line">              IntStream.generate(() -&gt; <span class="number">2</span>)</div><div class="line">              .limit(<span class="number">20</span>)</div><div class="line">              .forEach(System.out::print);</div></pre></td></tr></table></figure>
<ul>
<li><strong>generate()</strong> 方法将是用给定的供应源,并反复的调用 <strong>getAsInt()</strong> 而这个方法总是返回2</li>
</ul>
<ul>
<li>[x] 比较 <strong>generate()</strong> 和 <strong>iterate()</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用iterate()方法</span></div><div class="line">Stream.iterate(<span class="number">0</span>, x -&gt; x + <span class="number">2</span>).limit(<span class="number">5</span>).forEach(System.out::println);</div><div class="line"></div><div class="line"><span class="comment">// 使用 generate(...)方法</span></div><div class="line">IntSupplier intSupplier = <span class="keyword">new</span> IntSupplier() &#123;</div><div class="line">          <span class="keyword">int</span> previous = <span class="number">0</span>;</div><div class="line"></div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAsInt</span><span class="params">()</span> </span>&#123;</div><div class="line">              <span class="keyword">int</span> oldPrevious = <span class="keyword">this</span>.previous;</div><div class="line">              <span class="keyword">this</span>.previous = <span class="keyword">this</span>.previous + <span class="number">2</span>;</div><div class="line">              ;</div><div class="line">              <span class="keyword">return</span> oldPrevious;</div><div class="line">          &#125;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      Stream.generate(intSupplier).limit(<span class="number">5</span>).forEach(System.out::println);</div><div class="line"></div><div class="line">outPut:	<span class="number">0</span>	<span class="number">2</span>	<span class="number">4</span>	<span class="number">6</span>	<span class="number">8</span></div></pre></td></tr></table></figure>
<ul>
<li>前面的代码创建了一个 <strong>IntSupplier</strong> 的实例</li>
<li>此对象有可变的状态：他在两个实例变量中记录了前一个数，<strong>getAsInt()</strong> 在调用时会改变对象的状态，由此在每次调用时产生新的值</li>
</ul>
<blockquote>
<p>注意：</p>
</blockquote>
<ul>
<li>你应该始终采用<strong>不变的方法</strong>，以便并行处理流，并保持结果正确。</li>
<li>因为你处理的是一个无限流，所以必须使用 limit 操作来显式的限制流的大小，否则，终端操作（这里是forEach）将永远计算下去</li>
<li><strong>你不能对无限流做排序或归约</strong>，因为所有的元素都要处理，而这永远也完不成</li>
</ul>
<h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><ul>
<li>Stream API 可以表达复杂的数据处理查询</li>
<li>你可以使用 <strong>filter</strong>、 <strong>distinct</strong>、 <strong>skip</strong> 和 <strong>limit</strong> 对流做筛选和切片</li>
<li>你可以使用 <strong>map</strong> 和 <strong>flatMap</strong> 提取或转换流中的元素</li>
<li>你可以使用 <strong>findFirst</strong> 和 <strong>findAny</strong> 方法查找流中的元素</li>
<li>你可以用 <strong>allMatch</strong>、 <strong>noneMatch</strong> 和 <strong>anyMatch</strong> 方法让流匹配给定的谓词</li>
<li>这些方法都利用了短路：找到结果就立即停止计算；没有必要处理整个流</li>
<li>你可以利用 <strong>reduce</strong> 方法将流中的所有元素迭代合并成一个结果，例如求和或查找最大元素</li>
<li><strong>filter</strong> 和 <strong>map</strong> 等操作是无状态的，他们并不存储任何状态。<strong>resuce</strong> 等操作要存储状态才能计算出一个值。 <strong>sorted</strong>  和 <strong>distinct</strong> 等操作也要存储状态 ，因为他们要把流中的所有元素缓存起来才能返回一个新的流。这种操作称为<strong>有状态操作</strong></li>
<li>流有三种最基本的原始类型特化： <strong>IntStream</strong> 、 <strong>DoubleStream</strong> 和 <strong>LongStream</strong> ,他们的操作也有相应的特化</li>
<li>流不仅可以从集合创建，也可从数值、数组、文件以及 <strong>iterate</strong> 与 <strong>generate</strong> 等特定方法创建</li>
<li>无限流是没有固定大小的流</li>
</ul>
<h2 id="第6章-用流收集数据"><a href="#第6章-用流收集数据" class="headerlink" title="第6章 用流收集数据"></a>第6章 用流收集数据</h2><h3 id="收集器简介"><a href="#收集器简介" class="headerlink" title="收集器简介"></a>收集器简介</h3><h4 id="预定义收集器"><a href="#预定义收集器" class="headerlink" title="预定义收集器"></a>预定义收集器</h4><ul>
<li>主要探讨预定义处理器的功能，也就是<code>Collectors</code>类提供的工厂方法（例如：<code>groupingBy()</code>方法）创建的收集器</li>
<li>主要提供了三大功能：<ul>
<li>将流元素归约和汇总为一个值</li>
<li>元素分组</li>
<li>元素分区</li>
</ul>
</li>
</ul>
<h3 id="归约和汇总"><a href="#归约和汇总" class="headerlink" title="归约和汇总"></a>归约和汇总</h3><blockquote>
<p>在需要将流项目重组成集合时，一般会使用收集器（Stream方法 <code>collect()</code>的参数）。在宽泛一点说，但凡要把流中所有的项目合并成一个结果时就可以用，这个结果可以使任何类型</p>
</blockquote>
<ul>
<li>[x] 示例代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Long collect = menu.stream().collect(Collectors.counting());</div><div class="line"></div><div class="line"><span class="comment">// 还可以写的更为直接</span></div><div class="line">   Long collect = menu.stream().count();</div></pre></td></tr></table></figure>
<ul>
<li>counting收集器在和其他收集器联合使用的时候特别有用，后续或细说。</li>
</ul>
<h4 id="查找流汇总的最大值和最小值"><a href="#查找流汇总的最大值和最小值" class="headerlink" title="查找流汇总的最大值和最小值"></a>查找流汇总的最大值和最小值</h4><ul>
<li>要查找流中的最大值和最小值，可以使用这两个收集器<ul>
<li><strong>Collectors.maxBy(Comparator&lt;? super T&gt; comparator)</strong></li>
<li><strong>Collectors.minBy(Comparator&lt;? super T&gt; comparator)</strong></li>
</ul>
</li>
<li><p>这两个收集器接收Comparator参数来比较流中的元素</p>
</li>
<li><p>[x] 代码示例</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Comparator&lt;Dish&gt; dishComparator = Comparator.comparingInt((Dish d) -&gt; d.getCalories());</div><div class="line"><span class="comment">// 使用方法引用创建比较器</span></div><div class="line">      Comparator&lt;Dish&gt; dishComparator1 = Comparator.comparingInt(Dish::getCalories);</div><div class="line"></div><div class="line">      Optional&lt;Dish&gt; collect = menu.stream().collect(Collectors.maxBy(dishComparator));</div><div class="line"></div><div class="line">      Optional&lt;Dish&gt; collect1 = menu.stream().collect(Collectors.maxBy(<span class="keyword">new</span> Comparator&lt;Dish&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dish d1, Dish d2)</span> </span>&#123;</div><div class="line">              <span class="keyword">return</span> d1.getCalories() - d2.getCalories();</div><div class="line">          &#125;</div><div class="line">      &#125;));</div><div class="line"></div><div class="line">      Optional&lt;Dish&gt; collect2 = menu.stream().collect(Collectors.maxBy((d1, d2) -&gt; d1.getCalories() - d2.getCalories()));</div></pre></td></tr></table></figure>
<ul>
<li>另一个常见的返回单个值的归约操作是对六中的一个数值字段求和，或者你可能想要求平均数，这种操作被称为<strong>汇总操作</strong></li>
<li>使用收集器来表达汇总操作</li>
</ul>
<h4 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h4><ul>
<li>Collectors 类专门提供了一个工厂方法：<code>Collectors.summingInt()</code>，它可接受一个把对象映射为求和所需int的函数，并返回一个收集器；将该收集器传递给普通的colllect方法后及执行我们需要的汇总操作</li>
</ul>
<ul>
<li>[x] 代码示例</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> totalCalories = menu.stream().collect(Collectors.summingInt(<span class="keyword">new</span> ToIntFunction&lt;Dish&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">applyAsInt</span><span class="params">(Dish value)</span> </span>&#123;</div><div class="line">              <span class="keyword">return</span> value.getCalories();</div><div class="line">          &#125;</div><div class="line">      &#125;));</div><div class="line"></div><div class="line">      <span class="keyword">int</span> totalCalories1 = menu.stream().collect(Collectors.summingInt(value -&gt; value.getCalories()));</div><div class="line"></div><div class="line">      <span class="keyword">int</span> totalCalories2 = menu.stream().collect(Collectors.summingInt(Dish::getCalories));</div></pre></td></tr></table></figure>
<ul>
<li><code>Collectors.summingLong()</code>和 <code>Collectors.summingDouble()</code>方法的作用完全一样，可以用于求和字段为long或double的情况</li>
<li>但是汇总不仅仅是求和；还有<code>Collectors.averagingInt()</code>，连同对应的<code>Collectors.averagingLong()</code>和<code>Collectors.averagingDouble()</code>可以计算数值的平均数</li>
</ul>
<blockquote>
<p>很度时候，你可能想要得到两个或更多这样的结果，而且你只需一次操作就可以完成，在这种情况下，你可以使用 <strong>summarizingInt</strong> 工厂方法返回的收集器。</p>
</blockquote>
<ul>
<li>通过一次 summarizing 操作你就可以查出元素的个数，并得到总和、平均值、最大值和最小值</li>
<li>代码示例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">IntSummaryStatistics collect1 = menu.stream().collect(Collectors.summarizingInt(<span class="keyword">new</span> ToIntFunction&lt;Dish&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">applyAsInt</span><span class="params">(Dish value)</span> </span>&#123;</div><div class="line">               <span class="keyword">return</span> value.getCalories();</div><div class="line">           &#125;</div><div class="line">       &#125;));</div><div class="line">	<span class="comment">// 使用Lambda表达式</span></div><div class="line">       IntSummaryStatistics collect2 = menu.stream().collect(Collectors.summarizingInt(value -&gt; value.getCalories()));</div><div class="line">	<span class="comment">// 使用方法引用</span></div><div class="line">       IntSummaryStatistics collect3 = menu.stream().collect(Collectors.summarizingInt(Dish::getCalories));</div></pre></td></tr></table></figure>
<ul>
<li>同样，相应的 <code>summarizingDouble</code>  和 <code>summarizingLong</code> 有相关的<code>DoubleSummaryStatistics</code>，<code>LongSummaryStatistics</code></li>
</ul>
<h4 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h4><ul>
<li>joining工厂方法返回的收集器会把对流中的每个对象用<code>toString()</code>方法得到的所有字符串连接成一个字符串。</li>
</ul>
<blockquote>
<p>注意：<br>joining方法在内部使用了<code>StringBuilder</code> 来把生成的字符串逐个追加起来。<br>如果Dish类中有一个toString方法来返回名称的字符串，那你就不需要 <del><code>map(Dish::getName)</code></del>  函数来对流做映射就能得到相同的结果</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">String collect = menu.stream().map(<span class="keyword">new</span> Function&lt;Dish, String&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Dish dish)</span> </span>&#123;</div><div class="line">               <span class="keyword">return</span> dish.getName();</div><div class="line">           &#125;</div><div class="line">       &#125;).collect(Collectors.joining());</div><div class="line"></div><div class="line">       String collect = menu.stream().map(dish -&gt; dish.getName()).collect(Collectors.joining());</div><div class="line"></div><div class="line">       String collect = menu.stream().map(Dish::getName).collect(Collectors.joining());</div><div class="line"></div><div class="line">       System.out.println(collect);</div><div class="line"></div><div class="line">	outPut:	porkbeefchickenfrench friesriceseason fruitpizzaprawnssalmon</div></pre></td></tr></table></figure>
<ul>
<li>但该字符串的可读性不好，不过joinging工厂有一个重载版本可以接受元素之间的分界符</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String collect = menu.stream().map(Dish::getName).collect(Collectors.joining(<span class="string">" ^-^ "</span>));</div><div class="line">      System.out.println(collect);</div><div class="line"></div><div class="line">outPut: pork ^-^ beef ^-^ chicken ^-^ french fries ^-^ rice ^-^ season</div></pre></td></tr></table></figure>
<h4 id="guaj广义的归约汇总"><a href="#guaj广义的归约汇总" class="headerlink" title="guaj广义的归约汇总"></a>guaj广义的归约汇总</h4><ul>
<li>之前介绍的所有收集器，都是一个可以用<code>Collectors.reducing(...)</code>工厂方法定义个归约过程的特殊情况而已。</li>
<li><code>Collections.resucing(...)</code>工厂方法是所有这些特殊情况的一般化</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Collector&lt;String, ?, String&gt; reducing(String, BinaryOperator&lt;String&gt;)</div><div class="line"></div><div class="line">Collector&lt;String, ?, Optional&lt;String&gt;&gt; reducing(BinaryOperator&lt;String&gt;)</div><div class="line"></div><div class="line">Collector&lt;String, ?, Object&gt; reducing(Object, Function&lt;? <span class="keyword">super</span> String, ?&gt;, BinaryOperator&lt;Object&gt;)</div></pre></td></tr></table></figure>
<ul>
<li>看最后一个方法，它需要三个参数</li>
<li>第一个参数是归约操作的起始值，也是六中没有元素时的返回值，所有很显然对于数值和而言0是一个何时的值</li>
<li>第二个参数是返回int的函数，将对象转换为表示某个值的int</li>
<li>第三个参数是一个BinaryOperator,将两个项目累积成一个同类型的值</li>
</ul>
<ul>
<li>[x] 代码示例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> collect = menu.stream().collect(Collectors.reducing(<span class="number">0</span>, <span class="keyword">new</span> Function&lt;Dish, Integer&gt;() &#123;</div><div class="line">                  <span class="meta">@Override</span></div><div class="line">                  <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Dish dish)</span> </span>&#123;</div><div class="line">                      <span class="keyword">return</span> dish.getCalories();</div><div class="line">                  &#125;</div><div class="line">              &#125;, <span class="keyword">new</span> BinaryOperator&lt;Integer&gt;() &#123;</div><div class="line">                  <span class="meta">@Override</span></div><div class="line">                  <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer integer, Integer integer2)</span> </span>&#123;</div><div class="line">                      <span class="keyword">return</span> integer + integer2;</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">      ));</div><div class="line"></div><div class="line"><span class="keyword">int</span> collect = menu.stream().collect(Collectors.reducing(<span class="number">0</span>, dish -&gt; dish.getCalories(), (integer, integer2) -&gt; integer + integer2));</div><div class="line"></div><div class="line"><span class="keyword">int</span> collect = menu.stream().collect(Collectors.reducing(<span class="number">0</span>, Dish::getCalories, (integer, integer2) -&gt; integer + integer2));</div><div class="line"></div><div class="line"><span class="keyword">int</span> collect = menu.stream().collect(Collectors.reducing(<span class="number">0</span>, Dish::getCalories, (x, y) -&gt; x + y));</div></pre></td></tr></table></figure>
<blockquote>
<p>收集和归约</p>
</blockquote>
<ul>
<li>Stream接口的collecthereduce方法有和不同，这两种方法通常会获得相同的结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Stream&lt;Integer&gt; stream = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">34</span>, <span class="number">5</span>, <span class="number">67</span>).stream();</div><div class="line">List&lt;Integer&gt; numbers = stream.reduce(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(), <span class="keyword">new</span> BiFunction&lt;ArrayList&lt;Integer&gt;, Integer, ArrayList&lt;Integer&gt;&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">apply</span><span class="params">(ArrayList&lt;Integer&gt; integers, Integer integer)</span> </span>&#123;</div><div class="line">              integers.add(integer);</div><div class="line">              <span class="keyword">return</span> integers;</div><div class="line">          &#125;</div><div class="line">      &#125;, <span class="keyword">new</span> BinaryOperator&lt;ArrayList&lt;Integer&gt;&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">apply</span><span class="params">(ArrayList&lt;Integer&gt; integers, ArrayList&lt;Integer&gt; integers2)</span> </span>&#123;</div><div class="line">              integers.addAll(integers2);</div><div class="line">              <span class="keyword">return</span> integers;</div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line"></div><div class="line"><span class="comment">// 使用Lambda 表达式</span></div><div class="line">Stream&lt;Integer&gt; stream = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">34</span>, <span class="number">5</span>, <span class="number">67</span>).stream();</div><div class="line">      List&lt;Integer&gt; numbers = stream.reduce(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(), (integers, integer) -&gt; &#123;</div><div class="line">          integers.add(integer);</div><div class="line">          <span class="keyword">return</span> integers;</div><div class="line">      &#125;, (integers, integers2) -&gt; &#123;</div><div class="line">          integers.addAll(integers2);</div><div class="line">          <span class="keyword">return</span> integers;</div><div class="line">      &#125;);</div><div class="line">      </div><div class="line">      <span class="comment">// 使用collector(Collectors.toList())</span></div><div class="line">List&lt;Integer&gt; numbers1 = streams.collect(Collectors.toList());</div><div class="line"></div><div class="line">outPut:		[<span class="number">1</span>, <span class="number">2</span>, <span class="number">34</span>, <span class="number">5</span>, <span class="number">67</span>]</div></pre></td></tr></table></figure>
<ul>
<li>一个语义问题，一个实际问题。</li>
<li>语义问题在于：<ul>
<li>reduce方法旨在将两个值结合起来生成一个新值，他是一个不可变的归约。</li>
<li>collect方法的设计就是要改变容器，从而累积要输出的结果。</li>
</ul>
</li>
<li>这意味着上面得到代码片段是滥用reduce方法，因为它在原地改变了作为累加器的List。以错误的语义使用reduce方法还会造成一个实际问题：这个归约过程不能并行工作，因为由多个线程并发修改同意个数据结构可能会破会List本身。在这种情况下，如果你想要线程安全，就需要多次分配一个新的List，而对象分配又会影响性能。</li>
<li>这就是collect方法特别适合表达可变容器上的归约的原因，更关键的是它适合并行操作。</li>
</ul>
<blockquote>
<p>收集框架的灵活性：以不同的方法执行同样的操作</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> number = menu.stream().collect(Collectors.reducing(<span class="number">0</span>, <span class="keyword">new</span> Function&lt;Dish, Integer&gt;() &#123;</div><div class="line">                  <span class="meta">@Override</span></div><div class="line">                  <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Dish dish)</span> </span>&#123;</div><div class="line">                      <span class="keyword">return</span> dish.getCalories();</div><div class="line">                  &#125;</div><div class="line">              &#125;, <span class="keyword">new</span> BinaryOperator&lt;Integer&gt;() &#123;</div><div class="line">                  <span class="meta">@Override</span></div><div class="line">                  <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer integer, Integer integer2)</span> </span>&#123;</div><div class="line">                      <span class="keyword">return</span> integer + integer2;</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">      ));</div><div class="line">      <span class="comment">// 简化代码</span></div><div class="line">      <span class="keyword">int</span> number = menu.stream().collect(Collectors.reducing(<span class="number">0</span>, Dish::getCalories, Integer::sum));</div></pre></td></tr></table></figure>
<blockquote>
<p>根据情况选择最佳解决方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> number = menu.stream().collect(Collectors.reducing(<span class="number">0</span>, Dish::getCalories, Integer::sum));</div><div class="line"></div><div class="line">      <span class="keyword">int</span> integer = menu.stream().map(Dish::getCalories).reduce(Integer::sum).get();</div><div class="line"></div><div class="line">      <span class="keyword">int</span> sum = menu.stream().mapToInt(Dish::getCalories).sum();</div></pre></td></tr></table></figure>
<ul>
<li>函数式编程（特别是java8的Collections框架中加入的基于函数式风格原理设计的新API）通常提供了多种方法来执行统一操作。这个例子说明，收集器在某种程度上比Stream接口上直接提供的方法用起来更复杂，但好处在于他们能提供更高水平的抽象和概括，也更容易重用和自定义</li>
<li>始终选择最专门化的一个。<ul>
<li>因为无论从性能上看，还是可读性上看，这都是一个最好的决定。</li>
</ul>
</li>
</ul>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><ul>
<li>用<code>Collectiors.groupingBy(...)</code>工厂方法返回的收集器可以轻松完成分组<ul>
<li><code>public static &lt;T, K&gt; Collector&lt;T, ?, Map&lt;K, List&lt;T&gt;&gt;&gt;  groupingBy(Function&lt;? super T, ? extends K&gt; classifier)</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Map&lt;Dish.Type, List&lt;Dish&gt;&gt; collect = menu.stream().collect(Collectors.groupingBy(<span class="keyword">new</span> Function&lt;Dish, Dish.Type&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="keyword">public</span> Dish.<span class="function">Type <span class="title">apply</span><span class="params">(Dish dish)</span> </span>&#123;</div><div class="line">               <span class="keyword">return</span> dish.getType();</div><div class="line">           &#125;</div><div class="line">       &#125;));</div><div class="line"></div><div class="line">       Map&lt;Dish.Type, List&lt;Dish&gt;&gt; collect = menu.stream().collect(Collectors.groupingBy(Dish::getType));</div><div class="line"></div><div class="line">       System.out.println(collect.toString());</div><div class="line">       </div><div class="line">       outPut:	MEAT[<span class="string">'pork'</span>, <span class="string">'beef'</span>, <span class="string">'chicken'</span>]FISH[<span class="string">'prawns'</span>, <span class="string">'salmon'</span>]OTHER[<span class="string">'french fries'</span>, <span class="string">'rice'</span>, <span class="string">'pizza'</span>]</div></pre></td></tr></table></figure>
<ul>
<li>分组函数不一定想方法引用那样可用，，因为你想用以分类的条件可能比简单的属性访问器要复杂。</li>
<li>由于作者没有吧这个操作写成一个方法，你无法使用方法引用，但你可以吧这个逻辑写成Lambda表达式</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">       Map&lt;CaloricLevel, List&lt;Dish&gt;&gt; collect = menu.stream().collect(Collectors.groupingBy(dish -&gt; &#123;</div><div class="line">           <span class="keyword">if</span> (dish.getCalories() &lt; <span class="number">400</span>) &#123;</div><div class="line">               <span class="keyword">return</span> CaloricLevel.DIEF;</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dish.getCalories() &lt;= <span class="number">700</span>) &#123;</div><div class="line">               <span class="keyword">return</span> CaloricLevel.NORMAL;</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="keyword">return</span> CaloricLevel.FAT;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">       &#125;));</div><div class="line">       System.out.println(collect.toString());</div><div class="line">&#125;</div><div class="line"></div><div class="line">   <span class="keyword">enum</span> CaloricLevel &#123;</div><div class="line">       DIET, NORMAL, FAT</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="多级分组"><a href="#多级分组" class="headerlink" title="多级分组"></a>多级分组</h4><ul>
<li>我们可以使用由多参版本的Collections.groupingBy工厂方法创建的收集器，它除了普通的分类函数之外，还可以接受collector类型的第二个参数。</li>
<li>所以要进行二级分组的话，我们可以将一个内层groupingBy传递给外层groupingBy,并定义一个为流中项目分类的二级标准</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Map&lt;Dish.Type, Map&lt;CaloricLevel, List&lt;Dish&gt;&gt;&gt; collect = menu.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.groupingBy((Dish dish) -&gt; &#123;</div><div class="line">                    if (dish.getCalories() &lt; 400) &#123;</div><div class="line">                        return CaloricLevel.DIEF;</div><div class="line">                    &#125; else if (dish.getCalories() &gt; 700 &amp;&amp; dish.getCalories() &lt; 700) &#123;</div><div class="line">                        return CaloricLevel.NORMAL;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        return CaloricLevel.FAT;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">        )));</div><div class="line"></div><div class="line">``</div><div class="line"></div><div class="line">#### 按子组收集数据</div><div class="line"></div><div class="line">+ 我们可以将第二个groupingBy()收集器传递给外层收集器来实现多级分组。</div><div class="line">+ 但是进一步说，传递给第一个groupingBy()的第二个收集器可以使任何类型，而不一定是一个groupingBy。</div><div class="line"></div><div class="line">- [x] 代码示例：</div><div class="line"></div><div class="line">```java</div><div class="line">		Map&lt;Dish.Type, Long&gt; collect = menu.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.counting()));</div><div class="line"></div><div class="line">		outPut:	&#123;MEAT=3, FISH=2, OTHER=4&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>要注意：<br>普通的单参数<code>groupingBy(f)</code>(其中f是分类函数)实际上是<strong>groupingBy( f , toList( ) )</strong>的简便写法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Map&lt;Dish.Type, Optional&lt;Dish&gt;&gt; collect = menu.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.maxBy(<span class="keyword">new</span> Comparator&lt;Dish&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dish o1, Dish o2)</span> </span>&#123;</div><div class="line">              <span class="keyword">return</span> o1.getCalories() - o2.getCalories();</div><div class="line">          &#125;</div><div class="line">      &#125;)));</div><div class="line"></div><div class="line">Map&lt;Dish.Type, Optional&lt;Dish&gt;&gt; collect1 = menu.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.maxBy((o1, o2) -&gt; o1.getCalories() - o2.getCalories())));</div><div class="line"></div><div class="line">      Map&lt;Dish.Type, Optional&lt;Dish&gt;&gt; collect2 = menu.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.maxBy(Comparator.comparing(Dish::getCalories))));</div></pre></td></tr></table></figure>
<ul>
<li>这个分组中的结果显然是一个map，以Dish的类型为键，以包装了该类型中热量最好的Dish的<code>Option&lt;Dish&gt;</code>作为值</li>
</ul>
<h5 id="将收集器中的结果转换为另一种类型"><a href="#将收集器中的结果转换为另一种类型" class="headerlink" title="将收集器中的结果转换为另一种类型"></a>将收集器中的结果转换为另一种类型</h5><ul>
<li>因为分组操作中的Map结果中的每个值上包装的Optional没什么用，可以使用<code>Collectors.collectingAndThen(...)</code>工厂方法返回的收集器</li>
<li>这个工厂方法接受两个参数<ul>
<li>要转换的收集器</li>
<li>转换函数</li>
</ul>
</li>
<li>返回另一个收集器</li>
<li>这个收集器相当于旧收集器的一个包装，collect操作的最后一步就是将返回值用转换函数做一个映射</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Map&lt;Dish.Type, Dish&gt; collect2 = menu.stream()</div><div class="line">               .collect(</div><div class="line">                       Collectors.groupingBy(Dish::getType, Collectors.collectingAndThen(</div><div class="line">                                       Collectors.maxBy(</div><div class="line">                                               Comparator.comparingInt(Dish::getCalories)), Optional::get)));</div><div class="line"></div><div class="line">       System.out.println(collect2);</div><div class="line"></div><div class="line">	outPut:	&#123;MEAT=<span class="string">'pork'</span>, FISH=<span class="string">'salmon'</span>, OTHER=<span class="string">'pizza'</span>&#125;</div></pre></td></tr></table></figure>
<h5 id="与groupingBy联合使用的其它收集器的例子"><a href="#与groupingBy联合使用的其它收集器的例子" class="headerlink" title="与groupingBy联合使用的其它收集器的例子"></a>与groupingBy联合使用的其它收集器的例子</h5><ul>
<li>一般来说，通过groupingBy()工厂方法的第二个参数传递的收集器将会对分到同一组中的所有流元素执行进一步归约操作。</li>
</ul>
<ul>
<li>[x] 代码示例：求出所有菜肴热量融合，对每一组Dish求和</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Map&lt;Dish.Type, Integer&gt; collect = menu.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.summingInt(<span class="keyword">new</span> ToIntFunction&lt;Dish&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">applyAsInt</span><span class="params">(Dish value)</span> </span>&#123;</div><div class="line">              <span class="keyword">return</span> value.getCalories();</div><div class="line">          &#125;</div><div class="line">      &#125;)));</div><div class="line"><span class="comment">// 使用方法引用</span></div><div class="line">      Map&lt;Dish.Type, Integer&gt; collect = menu.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.summingInt(Dish::getCalories)));</div><div class="line"></div><div class="line">System.out.println(collect);</div><div class="line"></div><div class="line">outPut:	&#123;MEAT=<span class="number">1900</span>, FISH=<span class="number">850</span>, OTHER=<span class="number">1550</span>&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>与<code>Collectors.groupingBy(...)</code>联合使用的另一个收集器是 <strong>Collectors.mapping(Function mapper,Collector downstream)</strong> 方法生成的。</p>
</blockquote>
<ul>
<li>这个方法接受两个参数<ul>
<li>一个函数对流中元素做变换</li>
<li>另一个将变换的结果对象收集起来。</li>
</ul>
</li>
<li>目的是在累加之前对每个元素应用一个映射函数，这样就可以让接受特定类型元素的收集器适应不同类型的对象</li>
</ul>
<ul>
<li>[x] 代码示例： 想知道每种Dish,菜单中都有哪些CaloricLevel,可以将groupingBy(…)和mapping(…)收集器结合起来</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Map&lt;Dish.Type, Set&lt;CaloricLevel&gt;&gt; collect = menu.stream().collect(Collectors.groupingBy(Dish::getType,      Collectors.mapping(<span class="keyword">new</span> Function&lt;Dish, CaloricLevel&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> CaloricLevel <span class="title">apply</span><span class="params">(Dish dish)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (dish.getCalories() &lt;= <span class="number">400</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> CaloricLevel.DIET;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dish.getCalories() &lt;= <span class="number">700</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> CaloricLevel.NORMAL;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">return</span> CaloricLevel.FAT;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;, Collectors.toSet())));</div><div class="line"></div><div class="line">        Map&lt;Dish.Type, Set&lt;CaloricLevel&gt;&gt; collect = menu.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.mapping(dish -&gt; &#123;</div><div class="line">            <span class="keyword">if</span> (dish.getCalories() &lt;= <span class="number">400</span>) &#123;</div><div class="line">                <span class="keyword">return</span> CaloricLevel.DIET;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dish.getCalories() &lt;= <span class="number">700</span>) &#123;</div><div class="line">                <span class="keyword">return</span> CaloricLevel.NORMAL;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> CaloricLevel.FAT;</div><div class="line">            &#125;</div><div class="line">        &#125;, Collectors.toSet())));</div><div class="line"></div><div class="line">        System.out.println(collect);</div><div class="line"></div><div class="line">		outPut:	MEAT=[FAT, NORMAL, DIET], FISH=[DIET, NORMAL], OTHER=[NORMAL, DIET]</div></pre></td></tr></table></figure>
<ul>
<li>传递给映射方法的转换函数将Dish映射成了它的 CaloricLevel:生成的CaloricLevel流传递给一个toSet收集器，它和toList()类似，不过时将流中的元素累积到一个Set而不是List中，以便仅保留各不相同的值。</li>
</ul>
<blockquote>
<p>此处有个问题，对于返回的Set是什么类型并没有任何保证，但是通过<code>Collectors.toCollection(...)</code>,你就可以更多的控制</p>
</blockquote>
<ul>
<li>[x] 代码示例： 你可以传递一个构造函数引用来要求HashSet</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Map&lt;Dish.Type, HashSet&lt;CaloricLevel&gt;&gt; collect6 = menu.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.mapping(dish -&gt; &#123;</div><div class="line">          <span class="keyword">if</span> (dish.getCalories() &lt;= <span class="number">400</span>) &#123;</div><div class="line">              <span class="keyword">return</span> CaloricLevel.DIET;</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dish.getCalories() &lt;= <span class="number">700</span>) &#123;</div><div class="line">              <span class="keyword">return</span> CaloricLevel.NORMAL;</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">              <span class="keyword">return</span> CaloricLevel.FAT;</div><div class="line">          &#125;</div><div class="line">      &#125;, Collectors.toCollection(HashSet::<span class="keyword">new</span>))));</div></pre></td></tr></table></figure>
<h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><ul>
<li>分区是分组的特殊情况：由一个谓词（返回一个布尔值的函数）作为分类函数,它被称为<strong>分区函数</strong></li>
<li>分区函数返回一个布尔值，这意味着得到的分组Map的键类型是Boolean，于是它最多可以分为两组<ul>
<li><strong>true</strong> 是一组</li>
<li><strong>false</strong> 是一组</li>
</ul>
</li>
<li><code>Collectors.partitioningBy(Predicate predicate)</code>     根据…区分</li>
</ul>
<ul>
<li>[x] 代码示例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Map&lt;Boolean, List&lt;Dish&gt;&gt; partitionMenu = menu.stream().collect(Collectors.partitioningBy(<span class="keyword">new</span> Predicate&lt;Dish&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Dish dish)</span> </span>&#123;</div><div class="line">              <span class="keyword">return</span> dish.isVegetarian();</div><div class="line">          &#125;</div><div class="line">      &#125;));</div><div class="line">      <span class="comment">// 使用Lambda 表达式</span></div><div class="line">      Map&lt;Boolean, List&lt;Dish&gt;&gt; partitionMenu = menu.stream().collect(Collectors.partitioningBy(dish -&gt; dish.isVegetarian()));</div><div class="line">      <span class="comment">// 使用方法引用</span></div><div class="line">      Map&lt;Boolean, List&lt;Dish&gt;&gt; partitionMenu = menu.stream().collect(Collectors.partitioningBy(Dish::isVegetarian));</div><div class="line"></div><div class="line">outPut:&#123;<span class="keyword">false</span>=[<span class="string">'pork'</span>, <span class="string">'beef'</span>, <span class="string">'chicken'</span>, <span class="string">'prawns'</span>], <span class="keyword">true</span>=[ <span class="string">'rice'</span>, <span class="string">'season fruit'</span>, <span class="string">'pizza'</span>]&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意<br>用同样的区分谓词，对菜单List创建的流作筛选，然后把结果收集到另外一个List中也可以获得相同的结果</p>
</blockquote>
<ul>
<li>[x] 代码示例</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;Dish&gt; partitionMenu = menu.stream().filter(Dish::isVegetarian).collect(Collectors.toList());</div><div class="line"></div><div class="line">outPut: [<span class="string">'rice'</span>, <span class="string">'season fruit'</span>, <span class="string">'pizza'</span>]</div></pre></td></tr></table></figure>
<h4 id="分区的优势"><a href="#分区的优势" class="headerlink" title="分区的优势"></a>分区的优势</h4><ul>
<li>分区的好处在于保留了分去函数返回true或false的两套流元素列表。</li>
<li>如果你要得到非素食Dish的list，你可以使用两个筛选操作来访问partitionedMenu这个map中的false键的值：一个利用谓词，一个利用谓词的非。</li>
<li><code>partitioningBy(Predicate predicate)</code>工厂方法有一个重载版本，可以传递而第二个收集器</li>
</ul>
<ul>
<li>[x] 代码示例</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Map&lt;Boolean, Map&lt;Dish.Type, List&lt;Dish&gt;&gt;&gt; collect = menu.stream().collect(Collectors.partitioningBy(</div><div class="line">              Dish::isVegetarian,</div><div class="line">              Collectors.groupingBy(Dish::getType)</div><div class="line">      ));</div><div class="line"></div><div class="line">      System.out.println(collect);</div><div class="line"></div><div class="line">outPut: &#123;<span class="keyword">false</span>=&#123;FISH=[<span class="string">'prawns'</span>, <span class="string">'salmon'</span>], MEAT=[<span class="string">'pork'</span>, <span class="string">'beef'</span>, <span class="string">'chicken'</span>]&#125;, <span class="keyword">true</span>=&#123;OTHER=[<span class="string">'season fruit'</span>, <span class="string">'pizza'</span>]&#125;&#125;</div></pre></td></tr></table></figure>
<ul>
<li>再结合前面的代码举个例子</li>
<li>找出素食和非素食中热量最高的菜</li>
</ul>
<ul>
<li>[x] 代码示例</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">menu.stream().collect(</div><div class="line">              Collectors.partitioningBy(</div><div class="line">                      <span class="keyword">new</span> Predicate&lt;Dish&gt;() &#123;</div><div class="line">                          <span class="meta">@Override</span></div><div class="line">                          <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Dish dish)</span> </span>&#123;</div><div class="line">                              <span class="keyword">return</span> dish.isVegetarian();</div><div class="line">                          &#125;</div><div class="line">                      &#125;, Collectors.collectingAndThen(</div><div class="line">                              Collectors.maxBy(</div><div class="line">                                      <span class="keyword">new</span> Comparator&lt;Dish&gt;() &#123;</div><div class="line">                                          <span class="meta">@Override</span></div><div class="line">                                          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dish o1, Dish o2)</span> </span>&#123;</div><div class="line">                                              <span class="keyword">return</span> o1.getCalories() - o2.getCalories();</div><div class="line">                                          &#125;</div><div class="line">                                      &#125;),</div><div class="line">                                      <span class="keyword">new</span> Function&lt;Optional&lt;Dish&gt;, Dish&gt;() &#123;</div><div class="line">                                          <span class="meta">@Override</span></div><div class="line">                                          <span class="function"><span class="keyword">public</span> Dish <span class="title">apply</span><span class="params">(Optional&lt;Dish&gt; dish)</span> </span>&#123;</div><div class="line">                                              <span class="keyword">return</span> dish.get();</div><div class="line">                                          &#125;</div><div class="line">                                      &#125;)</div><div class="line">              ));</div><div class="line">      <span class="comment">// 使用lambda表达式</span></div><div class="line">      menu.stream().collect(Collectors.partitioningBy(</div><div class="line">              (Dish dish) -&gt; dish.isVegetarian(),</div><div class="line">              Collectors.collectingAndThen(</div><div class="line">                      Collectors.maxBy((o1, o2) -&gt; o1.getCalories() - o2.getCalories()),</div><div class="line">                      (Optional&lt;Dish&gt; dish) -&gt; dish.get())</div><div class="line">      ));</div><div class="line"><span class="comment">// 使用方法引用</span></div><div class="line">	menu.stream().collect(Collectors.partitioningBy(</div><div class="line">              Dish::isVegetarian,</div><div class="line">              Collectors.collectingAndThen(</div><div class="line">                      Collectors.maxBy(</div><div class="line">                              Comparator.comparing(Dish::getCalories))</div><div class="line">                      , Optional::get)</div><div class="line">      ));</div><div class="line"></div><div class="line">      System.out.println(collect);</div><div class="line"></div><div class="line">outPut: &#123;<span class="keyword">false</span>=<span class="string">'pork'</span>, <span class="keyword">true</span>=<span class="string">'pizza'</span>&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>Collectors.partitioningBy(Predicate predicate,Collector downStream)</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Map&lt;Boolean, Long&gt; collect1 = menu.stream()</div><div class="line">              .collect(</div><div class="line">                      Collectors.partitioningBy(</div><div class="line">                              Dish::isVegetarian, Collectors.counting()));</div><div class="line"></div><div class="line">      System.out.println(collect1);</div><div class="line"></div><div class="line">outPut: &#123;<span class="keyword">false</span>=<span class="number">5</span>, <span class="keyword">true</span>=<span class="number">4</span>&#125;</div></pre></td></tr></table></figure>
<h4 id="将数字按质数和非质数分区"><a href="#将数字按质数和非质数分区" class="headerlink" title="将数字按质数和非质数分区"></a>将数字按质数和非质数分区</h4><ul>
<li><p>什么是质数？</p>
<ul>
<li>只有<strong>1</strong>和<strong>它本身</strong>两个约数的数，叫质数。</li>
<li>如：2÷1=2，2÷2=1，所以2的约数只有1和它本身2这两个约数，2就是质数。）</li>
</ul>
</li>
<li><p>先介绍两个方法,在第5张介绍过，再次回顾一下</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>range()</code></td>
<td>生成一组数值范围，不包括结束值的 [x,y)</td>
</tr>
<tr>
<td><code>rangeClosed()</code></td>
<td>生成一组数值范围，包括结束值的 [x,y]</td>
</tr>
</tbody>
</table>
<ul>
<li>[x] 定义一个判断是否为质数的谓词方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> IntStream.range(<span class="number">2</span>, number).noneMatch(<span class="keyword">new</span> IntPredicate() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">               <span class="keyword">return</span> number % value == <span class="number">0</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">       <span class="comment">// 使用Lambda表达式</span></div><div class="line">	<span class="keyword">return</span> IntStream.range(<span class="number">2</span>, number).noneMatch(value -&gt; number % value == <span class="number">0</span>);</div><div class="line">       <span class="comment">// 简化一下</span></div><div class="line">       <span class="keyword">return</span> IntStream.range(<span class="number">2</span>, number).noneMatch(i -&gt; number % i == <span class="number">0</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>[x] 一个简单的优化是仅测试小于等于待测数平方根的因子</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> numberRoot = (<span class="keyword">int</span>) Math.sqrt(number);</div><div class="line">       <span class="keyword">return</span> IntStream.rangeClosed(<span class="number">2</span>, numberRoot).noneMatch(i -&gt; number % i == <span class="number">0</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>为了把前n个数字分为质数和非质数，只要创建一个包含这n个数的流，用刚刚写的isPirme()方法作为谓词，再传给Collectors.partitioningBy()收集器归约就好了</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> numberRoot = (<span class="keyword">int</span>) Math.sqrt(number);</div><div class="line">       <span class="keyword">return</span> IntStream.rangeClosed(<span class="number">2</span>, numberRoot).noneMatch(i -&gt; number % i == <span class="number">0</span>);</div><div class="line">   &#125;</div><div class="line"><span class="comment">//  测试方法</span></div><div class="line">System.out.println(partitionPrimes(<span class="number">10</span>));</div><div class="line"></div><div class="line">outPut: &#123;<span class="keyword">false</span>=[<span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>], <span class="keyword">true</span>=[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]&#125;</div></pre></td></tr></table></figure>
<h5 id="Collectors-类的静态方法"><a href="#Collectors-类的静态方法" class="headerlink" title="Collectors 类的静态方法"></a>Collectors 类的静态方法</h5><table>
<thead>
<tr>
<th>工厂方法</th>
<th>返回类型</th>
<th>用于</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>toList</td>
<td><code>List&lt;T&gt;</code></td>
<td>把流中的所有数据元素收集到List集合中。</td>
<td>stream.collect(toList());             </td>
</tr>
<tr>
<td>toSet</td>
<td><code>Set&lt;T&gt;</code></td>
<td>把流中的所有数据元素收集到Set集合中，以维持Set自身的特性，即不会出现重复项。</td>
<td>stream.collect(toSet());</td>
</tr>
<tr>
<td>toCollection</td>
<td><code>Collection&lt;T&gt;</code></td>
<td>把流中的数据元素收集你所指定的集合中</td>
<td>list.stream().collect(toCollection(ArrayList::new));</td>
</tr>
<tr>
<td>counting</td>
<td><code>Long</code></td>
<td>计算流中元素的个数</td>
<td>list.stream().collect(counting()); </td>
</tr>
<tr>
<td>summingInt</td>
<td><code>Integer</code></td>
<td>对流中所有元素上指定的整数属性求和</td>
<td>list.stream().collect(summingInt(User::getAge));</td>
</tr>
<tr>
<td>averagingInt</td>
<td><code>Double</code></td>
<td>对流中所有元素上指定的整数属性求平均数</td>
<td>list.stream().collect(averagingInt(User::getAge));</td>
</tr>
<tr>
<td>summarizingInt</td>
<td><code>IntSummaryStatistics</code></td>
<td>收集流中所有元素上指定的整数属性的统计值，包括最大值、最小值、总数、平均值</td>
<td>list.stream().collect(summarizingInt(User::getAge));</td>
</tr>
<tr>
<td>joining</td>
<td><code>String</code></td>
<td>连接流中元素上指定的属性</td>
<td>list.stream().map(s -&gt; s).collect(joining(“-“))</td>
</tr>
<tr>
<td>maxBy</td>
<td><code>Optional&lt;T&gt;</code></td>
<td>使用指定的比较器去比较得到流中所有元素上指定属性的最大值</td>
<td>list.stream().collect(maxBy(Comparator.comparing(String::length)))</td>
</tr>
<tr>
<td>minBy</td>
<td><code>Optional&lt;T&gt;</code></td>
<td>使用指定的比较器去比较得到流中所有元素上指定属性的最小值</td>
<td>list.stream().collect(minBy(Comparator.comparing(String::length)))</td>
</tr>
<tr>
<td>reducing</td>
<td>规约操作产生的类型</td>
<td>从一个累加器的初始值开始，使用BinaryOperator与流中的元素逐个集合，最后将流规约为单个值</td>
<td>list.stream().collect(reducing(0, UserVO::getAge, Integer::sum));</td>
</tr>
<tr>
<td>collectingAndThen</td>
<td>转换函数返回的类型</td>
<td>对最终结果转换为另一种类型</td>
<td>list.stream().collect(collectingAndThen(Collectors.toList(), List::size));</td>
</tr>
<tr>
<td>groupingBy</td>
<td><code>Map&lt;k, List&lt;T&gt;&gt;</code></td>
<td>根据指定的属性来分组</td>
<td>views.stream().collect(groupingBy(String::length));</td>
</tr>
<tr>
<td>partitioningBy</td>
<td><code>Map&lt;boolean, List&lt;T&gt;&gt;</code></td>
<td>根据指定的属性来分区</td>
<td>views.stream().collect(partitioningBy(str -&gt; str.startsWith(“ws”))</td>
</tr>
</tbody>
</table>
<h3 id="收集器接口"><a href="#收集器接口" class="headerlink" title="收集器接口"></a>收集器接口</h3><ul>
<li>要开始使用Collector接口，<ul>
<li>要先了解Collector接口是如何定义的</li>
<li>以及他的方法所返回的函数在内部是如何为collect方法所用的</li>
</ul>
</li>
</ul>
<blockquote>
<p>Collector 接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collector</span>&lt;<span class="title">T</span>, <span class="title">A</span>, <span class="title">R</span>&gt; </span>&#123;</div><div class="line">   	</div><div class="line">       <span class="function">Supplier&lt;A&gt; <span class="title">supplier</span><span class="params">()</span></span>;</div><div class="line">       </div><div class="line">   	<span class="function">BiConsumer&lt;A, T&gt; <span class="title">accumulator</span><span class="params">()</span></span>;</div><div class="line">       </div><div class="line">   	<span class="function">BinaryOperator&lt;A&gt; <span class="title">combiner</span><span class="params">()</span></span>;</div><div class="line">       </div><div class="line">   	<span class="function">Function&lt;A, R&gt; <span class="title">finisher</span><span class="params">()</span></span>;</div><div class="line">       </div><div class="line">   	<span class="function">Set&lt;Characteristics&gt; <span class="title">characteristics</span><span class="params">()</span></span>;</div><div class="line">       </div><div class="line">       <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>本列表适用以下定义：<ul>
<li>T 是流中要收集的项目的泛型</li>
<li>A 是累加器的类型，累加器是在收集过程中用于累积部分结果的对象</li>
<li>R 是收集操作得到的对象（通常但并不一定是集合）的类型</li>
</ul>
</li>
</ul>
<ul>
<li>[x] 我们可以实现一个<code>ToListCollector&lt;T&gt;</code>类，将Stream<t>中的所有元素收集到一个List<t>里面，它的签名如下：</t></t></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToListCollector</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Collector</span>&lt;<span class="title">T</span>, <span class="title">List</span>&lt;<span class="title">T</span>&gt;, <span class="title">List</span>&lt;<span class="title">T</span>&gt;&gt;</span></div></pre></td></tr></table></figure>
<h4 id="理解-Collector接口声明的方法"><a href="#理解-Collector接口声明的方法" class="headerlink" title="理解 Collector接口声明的方法"></a>理解 Collector接口声明的方法</h4><ul>
<li>前四个方法都会返回一个会被collect方法调用的函数，而第五个方法characteristics 则提供了一系列特征，也就是一个提示列表，告诉collect方法在执行归约操作的时候可以使用那些优化（比如并行化）</li>
</ul>
<blockquote>
<p>建立新的结果容器：<code>supplier()</code> 方法</p>
</blockquote>
<ul>
<li>supplier() 方法必须返回一个空的Supplier，也就是一个无参数函数，在调用时它会创建一个空的累加器实例，共数据收集过程使用。</li>
<li>在我们的ToListCollector中，supplier返回一个空的List</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T&gt; Supplier&lt;List&lt;T&gt;&gt; supplier()&#123;</div><div class="line">      <span class="keyword">return</span> () -&gt; <span class="keyword">new</span> ArrayList&lt;T&gt;();</div><div class="line">      <span class="comment">// 或者使用构造函数引用</span></div><div class="line">      <span class="keyword">return</span> ArrayList::<span class="keyword">new</span>;</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>将元素添加到结果容器： accumulator() 方法</p>
</blockquote>
<ul>
<li>accumulator() 方法会返回执行归约操作的函数</li>
<li>当遍历到流中第n个元素时，这个函数执行时会有两个参数：<ol>
<li>保存归约结果的累加器（已收集了流中的 n-1 个项目）</li>
<li>第 n 个元素本身</li>
</ol>
</li>
<li>该函数返回void，，因为累加器是原位更新，即函数的执行改变了它的内部状态以体现遍历的元素的想过</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>  &lt;T&gt; BiConsumer&lt;List&lt;T&gt;,T&gt; accumulator()&#123;</div><div class="line">       <span class="keyword">return</span> (list, item) -&gt; list.add(item);</div><div class="line">       <span class="comment">// 使用方法引用</span></div><div class="line">       <span class="keyword">return</span> List::add;</div><div class="line">       </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>对结果容器应用最终转换： finisher() 方法</p>
</blockquote>
<ul>
<li>在遍历完流后，finisher()方法必须返回在累积过程的最后要调用的一个参数，以便累加器对象转换为整个集合操作的最终结果</li>
<li>像ToListCollector()的情况一样，累加器恰好符合预期的最终结果，因此无需转换</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T&gt; Function&lt;List&lt;T&gt;, List&lt;T&gt;&gt; finisher() &#123;</div><div class="line">       <span class="keyword">return</span> Function.identity();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>合并两个结果容器： combiner() 方法</p>
</blockquote>
<ul>
<li>combiner() 方法会返回一个供归约操作使用的函数，它定义了对流的各个部分进行并行处理时，各个子部分古月所得的累加器要如何合并</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T&gt; BinaryOperator&lt;List&lt;T&gt;&gt; combiner()&#123;</div><div class="line">      <span class="keyword">return</span> (list1, list2) -&gt; &#123;</div><div class="line">          list1.addAll(list2);</div><div class="line">          <span class="keyword">return</span> list1;</div><div class="line">      &#125;;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>有了 combiner() 方法就可以对流进行并行归约了</li>
</ul>
<blockquote>
<p>characteristics() 方法</p>
</blockquote>
<ul>
<li>characteristics() 方法会返回一个不可变的Characteristics集合，他定义了收集器的行为<ul>
<li>尤其是关于刘是否可以并行归约，以及可以使用那些优化的提示</li>
</ul>
</li>
<li>characteristics 是一个包含三个项目的枚举<ul>
<li>UNOROERED<ul>
<li>归约结果不受流中项目的遍历和累积顺序的影响</li>
</ul>
</li>
<li>CONCURRENT<ul>
<li>accmulator 函数可以从多个线程同事调用，且该收集器可以并行归约流</li>
<li>如果收集器没有标为UNOROERED，那它仅仅在用于无需数据源时才可以并行归约</li>
</ul>
</li>
<li>IDENTIFITY_FINISH<ul>
<li>这表明完成器方法返回的函数是一个恒等函数，可以跳过</li>
<li>这种情况下，累加器对象将会直接用作归约过程的最终结果，这也意味着，将累加器A不加检查地转换为R是安全的</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>全部融合到一起</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToListCollection</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Collector</span>&lt;<span class="title">T</span>, <span class="title">List</span>&lt;<span class="title">T</span>&gt;, <span class="title">List</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Supplier&lt;List&lt;T&gt;&gt; supplier() &#123;		<span class="comment">// ☆ 创建集合操作的起始点</span></div><div class="line">        <span class="keyword">return</span> ArrayList::<span class="keyword">new</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> BiConsumer&lt;List&lt;T&gt;, T&gt; accumulator() &#123;	<span class="comment">// ☆ 累积遍历过的项目，原位修改累加器</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BiConsumer&lt;List&lt;T&gt;, T&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(List&lt;T&gt; ts, T t)</span> </span>&#123;</div><div class="line">                ts.add(t);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="comment">// 使用Labmda 表达式</span></div><div class="line">        <span class="keyword">return</span> (ts, t) -&gt; ts.add(t);</div><div class="line">        <span class="comment">// 使用方法引用</span></div><div class="line">        <span class="keyword">return</span> List::add;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> BinaryOperator&lt;List&lt;T&gt;&gt; combiner() &#123;	<span class="comment">// ☆ 修改第一个累加器，将与其第二个累加器的内容合并</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BinaryOperator&lt;List&lt;T&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">apply</span><span class="params">(List&lt;T&gt; ts, List&lt;T&gt; ts2)</span> </span>&#123;</div><div class="line">                ts.addAll(ts2);</div><div class="line">                <span class="keyword">return</span> ts;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="comment">// 使用Lambda 表达式</span></div><div class="line">        <span class="keyword">return</span> (ts, ts2) -&gt; &#123;</div><div class="line">            ts.addAll(ts2);</div><div class="line">            <span class="keyword">return</span> ts;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Function&lt;List&lt;T&gt;, List&lt;T&gt;&gt; finisher() &#123;	<span class="comment">// ☆ 恒等函数</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Function&lt;List&lt;T&gt;, List&lt;T&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">apply</span><span class="params">(List&lt;T&gt; ts)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> ts;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="comment">// 使用Lambda 表达式</span></div><div class="line">        <span class="keyword">return</span> ts -&gt; ts;</div><div class="line">        <span class="comment">// 等价于</span></div><div class="line">        <span class="keyword">return</span> Function.identity();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Characteristics&gt; <span class="title">characteristics</span><span class="params">()</span> </span>&#123;	<span class="comment">// ☆ 为收集器添加 IDENTITY_FINISH 和 CONCURRENT标志</span></div><div class="line">        <span class="keyword">return</span> Collections.unmodifiableSet(EnumSet.of(Characteristics.IDENTITY_FINISH, Characteristics.CONCURRENT));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>[x] 进行自定义收集而不去实现 Collector</li>
</ul>
<ul>
<li>对于IDENTITY_FINISH的手机操作，还有一种方法可以得到同样的结果而无需从新实现Collector接口。</li>
<li>Stream 有一个重载的collect方法可以接受另外三个函数【supplier、accumulator和combiner】，其语义和Collector接口的相应方法返回的函数完全相同</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;Dish&gt; collect = menu.stream()</div><div class="line">               .collect(ArrayList::<span class="keyword">new</span>,</div><div class="line">                       List::add, </div><div class="line">                       List::addAll</div><div class="line">               );</div></pre></td></tr></table></figure>
<h3 id="开发你自己的收集器以获得更好的性能"><a href="#开发你自己的收集器以获得更好的性能" class="headerlink" title="开发你自己的收集器以获得更好的性能"></a>开发你自己的收集器以获得更好的性能</h3><h4 id="仅用质数做除数"><a href="#仅用质数做除数" class="headerlink" title="仅用质数做除数"></a>仅用质数做除数</h4><ul>
<li>之前求素数的方法还可以进行优化，看被测试数是否能够被质数整除</li>
</ul>
<blockquote>
<p>定义一个方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;A&gt; <span class="title">takeWhile</span><span class="params">(List&lt;A&gt; list, Predicate&lt;A&gt; predicate)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">       <span class="keyword">for</span> (A item : list) &#123;</div><div class="line">           <span class="keyword">if</span> (!predicate.test(item)) &#123;</div><div class="line">               <span class="keyword">return</span> list.subList(<span class="number">0</span>, i);</div><div class="line">           &#125;</div><div class="line">           i++;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> list;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>利用这个方法，你就可以优化isPrime方法，只用不大于被测数平方根的质数去测试了</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(List&lt;Integer&gt; primes,<span class="keyword">int</span> candicate)</span></span>&#123;</div><div class="line">       <span class="keyword">int</span> candidateRoot = (<span class="keyword">int</span>) Math.sqrt((<span class="keyword">double</span>) candicate);</div><div class="line">       <span class="keyword">return</span> takeWhile(primes, i -&gt; i &lt;= candicate)</div><div class="line">               .stream()</div><div class="line">               .noneMatch(p -&gt; candicate % p == <span class="number">0</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>第一步： 定义Collector类的签名</p>
</blockquote>
<ul>
<li>从类签名开始，Collector接口的定义</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collector</span>&lt;<span class="title">T</span>, <span class="title">A</span>, <span class="title">R</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>其中T,A 和 R 分别是流中元素的类型、用于累积部分结果的对象类型，以及collect操作最终结果的类型。</li>
<li>这里应该收集 Integer 流，而累加器和结果类型则都是<code>Map&lt;Boolean，List&lt;Integer&gt;&gt;</code></li>
<li>键是true和false， 值则分别是质数和非质数的List</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimeNumbersCollector</span> <span class="keyword">implements</span> <span class="title">Collector</span>&lt;</span></div><div class="line">        <span class="title">Integer</span>,        // 流中元素的类型</div><div class="line">        <span class="title">Map</span>&lt;<span class="title">Boolean</span>, <span class="title">List</span>&lt;<span class="title">Integer</span>&gt;&gt;,        // 累加器类型</div><div class="line">        <span class="title">Map</span>&lt;<span class="title">Boolean</span>, <span class="title">List</span>&lt;<span class="title">Integer</span>&gt;&gt;&gt; &#123;      <span class="comment">// collect 操作的结果类型</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>第二步：实现归约过程</p>
</blockquote>
<ul>
<li>接下来你需要实现Collector接口中的五个方法。supplier方法会返回一个在调用时候创建累加器的函数</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Supplier&lt;Map&lt;Boolean, List&lt;Integer&gt;&gt;&gt; supplier() &#123;</div><div class="line">    	<span class="comment">// ☆ 从一个有两个孔List的Map开始收集过程</span></div><div class="line">        <span class="keyword">return</span> () -&gt; <span class="keyword">new</span> HashMap&lt;Boolean, List&lt;Integer&gt;&gt;() &#123;</div><div class="line">            &#123;</div><div class="line">                put(<span class="keyword">true</span>, <span class="keyword">new</span> ArrayList&lt;Integer&gt;());</div><div class="line">                put(<span class="keyword">false</span>, <span class="keyword">new</span> ArrayList&lt;Integer&gt;());</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里不但创建了用作累加器的Map，还为true和false两个键下面初始化了对应的空列表</li>
<li>在收集过程中会把质数和非质数分别添加到这里。</li>
<li><strong>收集器最重要的方法是accumulator() </strong>，因为它定义了如何收集流中元素的逻辑。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">  <span class="keyword">public</span> BiConsumer&lt;Map&lt;Boolean, List&lt;Integer&gt;&gt;, Integer&gt; accumulator() &#123;</div><div class="line">  <span class="comment">// ☆ 根据isPrime方法的返回值，从Map中去质数或非质数列表，将当前的被测数加进去</span></div><div class="line">      <span class="keyword">return</span> (Map&lt;Boolean, List&lt;Integer&gt;&gt; acc,Integer candicate) -&gt;&#123;</div><div class="line">          acc.get(isPrime(acc.get(<span class="keyword">true</span>), candicate)).add(candicate);</div><div class="line">      &#125;;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>第三步： 让收集器并行工作（如果可能）</p>
</blockquote>
<ul>
<li>下一个方法要在并行收集时把两个部分累加器合并起来，这里，它只需要合并两个Map，即将第二个Map中质数和非质数列表中的所有数字合并到第一个Map对应的列表中就行了</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">  <span class="keyword">public</span> BinaryOperator&lt;Map&lt;Boolean, List&lt;Integer&gt;&gt;&gt; combiner() &#123;</div><div class="line">      <span class="comment">// ☆ 将第二个map合并到第一个map</span></div><div class="line">      <span class="keyword">return</span> (Map&lt;Boolean, List&lt;Integer&gt;&gt; map1, Map&lt;Boolean, List&lt;Integer&gt;&gt; map2) -&gt; &#123;</div><div class="line">          map1.get(<span class="keyword">true</span>).addAll(map2.get(<span class="keyword">true</span>));</div><div class="line">          map1.get(<span class="keyword">false</span>).addAll(map2.get(<span class="keyword">false</span>));</div><div class="line">          <span class="keyword">return</span> map1;</div><div class="line">      &#125;;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>实际上 这个收集器是不能并行使用的，因为该算法本身是是顺序的</li>
</ul>
<blockquote>
<p>第四步： finisher方法和收集器的characteristics方法</p>
</blockquote>
<ul>
<li>这两个方法的实现都很简单，前面说过，accumulator正好就是收集器的结果，用不着进一步转换，那么finisher方法就返回identity函数</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"> <span class="keyword">public</span> Function&lt;Map&lt;Boolean, List&lt;Integer&gt;&gt;, Map&lt;Boolean, List&lt;Integer&gt;&gt;&gt; finisher() &#123;</div><div class="line"> <span class="comment">// ☆ 收集过程最后无需转换，因此用 identity函数收尾</span></div><div class="line">     <span class="keyword">return</span> Function.identity();</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> Set&lt;Characteristics&gt; <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">//☆ 这个收集器是 IDENTITY_FINISH ，但既不是 UNORDERED 也不是 CONCURRENT ,因为质数是按顺序发现的</span></div><div class="line">       <span class="keyword">return</span> Collections.unmodifiableSet(EnumSet.of(Characteristics.IDENTITY_FINISH));</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>-[x] 完整代码示例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> test06;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.util.function.*;</div><div class="line"><span class="keyword">import</span> java.util.stream.Collector;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Description:	自定义累加器</div><div class="line"> * Created <span class="doctag">@version</span> 1.0    2016/9/19 13:53 by Benny</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimeNumbersCollector</span> <span class="keyword">implements</span> <span class="title">Collector</span>&lt;</span></div><div class="line">        <span class="title">Integer</span>,        // 流中元素的类型</div><div class="line">        <span class="title">Map</span>&lt;<span class="title">Boolean</span>, <span class="title">List</span>&lt;<span class="title">Integer</span>&gt;&gt;,        // 累加器类型</div><div class="line">        <span class="title">Map</span>&lt;<span class="title">Boolean</span>, <span class="title">List</span>&lt;<span class="title">Integer</span>&gt;&gt;&gt; &#123;      <span class="comment">// collect 操作的结果类型</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Supplier&lt;Map&lt;Boolean, List&lt;Integer&gt;&gt;&gt; supplier() &#123;</div><div class="line">        <span class="keyword">return</span> () -&gt; <span class="keyword">new</span> HashMap&lt;Boolean, List&lt;Integer&gt;&gt;() &#123;</div><div class="line">            &#123;</div><div class="line">                put(<span class="keyword">true</span>, <span class="keyword">new</span> ArrayList&lt;Integer&gt;());</div><div class="line">                put(<span class="keyword">false</span>, <span class="keyword">new</span> ArrayList&lt;Integer&gt;());</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> BiConsumer&lt;Map&lt;Boolean, List&lt;Integer&gt;&gt;, Integer&gt; accumulator() &#123;</div><div class="line">        <span class="keyword">return</span> (Map&lt;Boolean, List&lt;Integer&gt;&gt; acc, Integer candicate) -&gt; &#123;</div><div class="line">            acc.get(isPrime(acc.get(<span class="keyword">true</span>), candicate)).add(candicate);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> BinaryOperator&lt;Map&lt;Boolean, List&lt;Integer&gt;&gt;&gt; combiner() &#123;</div><div class="line">        <span class="keyword">return</span> (Map&lt;Boolean, List&lt;Integer&gt;&gt; map1, Map&lt;Boolean, List&lt;Integer&gt;&gt; map2) -&gt; &#123;</div><div class="line">            map1.get(<span class="keyword">true</span>).addAll(map2.get(<span class="keyword">true</span>));</div><div class="line">            map1.get(<span class="keyword">false</span>).addAll(map2.get(<span class="keyword">false</span>));</div><div class="line">            <span class="keyword">return</span> map1;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Function&lt;Map&lt;Boolean, List&lt;Integer&gt;&gt;, Map&lt;Boolean, List&lt;Integer&gt;&gt;&gt; finisher() &#123;</div><div class="line">        <span class="keyword">return</span> Function.identity();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Characteristics&gt; <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Collections.unmodifiableSet(EnumSet.of(Characteristics.IDENTITY_FINISH));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;Integer&gt; <span class="title">takeWhile</span><span class="params">(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (Integer item : list) &#123;</div><div class="line">            <span class="keyword">if</span> (!predicate.test(item)) &#123;</div><div class="line">                <span class="keyword">return</span> list.subList(<span class="number">0</span>, i);</div><div class="line">            &#125;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(List&lt;Integer&gt; primes, <span class="keyword">int</span> candicate)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> candidateRoot = (<span class="keyword">int</span>) Math.sqrt((<span class="keyword">double</span>) candicate);</div><div class="line">        <span class="keyword">return</span> takeWhile(primes, i -&gt; i &lt;= candicate)</div><div class="line">                .stream()</div><div class="line">                .noneMatch(p -&gt; candicate % p == <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h3><ul>
<li>collect是一个终端操作，它接受的参数是将流中元素累积到汇总结果的各种方式（称为收集器）</li>
<li>预定义收集器包括将流元素归约和汇总到一个值，例如计算最小值、最大值或平均值，这些收集器总结在前面的<code>Collectors 类的静态方法</code></li>
<li>预定义收集器可以用groupingBy对流中元素进行分组，或用partitioningBy进行分区</li>
<li>收集器可以高效的复合起来，进行多级分组、分区和归纳</li>
<li>你可以实现Collector接口中定义的方法来开发你自己的收集器</li>
</ul>
<h2 id="第7章-并行数据处理与性能"><a href="#第7章-并行数据处理与性能" class="headerlink" title="第7章 并行数据处理与性能"></a>第7章 并行数据处理与性能</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于Spring web 做单元测试]]></title>
      <url>/2016/08/18/160818_junit_spirng_mock/</url>
      <content type="html"><![CDATA[<h2 id="基于Spring-web-做单元测试"><a href="#基于Spring-web-做单元测试" class="headerlink" title="基于Spring web 做单元测试"></a>基于Spring web 做单元测试</h2><p><img src="http://ww1.sinaimg.cn/large/7a8aed7bgw1evdga4dimoj20qo0hsmzf.jpg" alt="0824"></p>
<a id="more"></a>
<h2 id="Mock"><a href="#Mock" class="headerlink" title="Mock"></a>Mock</h2><ul>
<li>mock对象就是在调试期间用来作为真实对象的替代品。</li>
<li>mock测试就是在测试过程中，对那些不容易构建的对象用一个虚拟对象来代替测试的方法就叫mock测试。</li>
</ul>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//Mockito-all测试框架</div><div class="line">compile group: &apos;org.mockito&apos;, name: &apos;mockito-all&apos;, version: &apos;2.0.2-beta&apos;</div></pre></td></tr></table></figure>
<ul>
<li>需要在@Before注解的setUp()中进行初始化（下面这个是个测试类的基类）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MockitoBasedTest</span> </span>&#123;</div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// 初始化测试用例类中由Mockito的注解标注的所有模拟对象</span></div><div class="line">        MockitoAnnotations.initMocks(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toIndex</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        List&lt;String&gt; list = Mockito.mock(List.class);</div><div class="line">        </div><div class="line">		<span class="comment">//设置方法预期返回值								     【√】</span></div><div class="line">        Mockito.when(list.get(<span class="number">0</span>)).thenReturn(<span class="string">"helloworld"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//设置方法的预期返回值 不推荐不如上一种方式 可读性不高	【X】</span></div><div class="line">        Mockito.doReturn(<span class="string">"secondhello"</span>).when(list).get(<span class="number">1</span>);</div><div class="line"></div><div class="line">        String str = list.get(<span class="number">0</span>);</div><div class="line">        <span class="comment">//验证方法调用(是否调用了get(0))</span></div><div class="line">        Mockito.verify(list).get(<span class="number">0</span>);</div><div class="line">        <span class="comment">//junit测试</span></div><div class="line">        Assert.assertEquals(str, <span class="string">"helloworld"</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>创建mock对象不能对<code>final</code>，<strong><code>Anonymous</code>(匿名类)</strong> ，<strong><code>primitive</code>（基本数据类型如int、double等和包装类）</strong>类进行mock。</p>
<p>如果mock的话，会给你一个红灯：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">org.mockito.exceptions.base.MockitoException: </div><div class="line">Cannot mock/spy class java.lang.Integer</div><div class="line">Mockito cannot mock/spy following:</div><div class="line">  - final classes</div><div class="line">  - anonymous classes</div><div class="line">  - primitive types</div></pre></td></tr></table></figure>
<ul>
<li>设置方法设定返回异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toIndex</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">      <span class="comment">//创建mock对象，参数可以是类，也可以是接口</span></div><div class="line">       List&lt;String&gt; list = Mockito.mock(List.class);</div><div class="line"></div><div class="line">       <span class="comment">//设置方法设定返回异常</span></div><div class="line">       Mockito.when(list.get(<span class="number">1</span>)).thenThrow(<span class="keyword">new</span> RuntimeException(<span class="string">"这是类型的错误"</span>));</div><div class="line"></div><div class="line">       String result = list.get(<span class="number">1</span>);</div><div class="line">       <span class="comment">//junit测试</span></div><div class="line">       Assert.assertEquals(<span class="string">"helloworld"</span>, result);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>没有返回值的void方法与其设定(支持迭代风格，第一次调用donothing,第二次dothrow抛出runtime异常)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toIndex</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">      <span class="comment">//创建mock对象，参数可以是类，也可以是接口</span></div><div class="line">      List&lt;String&gt; list = Mockito.mock(List.class);</div><div class="line"></div><div class="line">      Mockito.doNothing().doThrow(<span class="keyword">new</span> RuntimeException(<span class="string">"void exception"</span>)).when(list).clear();</div><div class="line">      </div><div class="line">      list.clear();</div><div class="line">      System.out.println(<span class="string">"第一次调用完"</span>);</div><div class="line">      list.clear();</div><div class="line">      System.out.println(<span class="string">"第二次调用完"</span>);</div><div class="line">      </div><div class="line">      <span class="comment">// Mockito.times(N) 调用N次</span></div><div class="line">      Mockito.verify(list,Mockito.times(<span class="number">2</span>)).clear();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="参数匹配器-Argument-Matcher"><a href="#参数匹配器-Argument-Matcher" class="headerlink" title="参数匹配器(Argument Matcher)"></a>参数匹配器(Argument Matcher)</h3><ul>
<li>Matchers类内加你有很多参数匹配器 anyInt、anyString、anyMap…..Mockito类继承于Matchers,Stubbing时使用内建参数匹配器</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toIndex</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">       <span class="comment">//创建mock对象，参数可以是类，也可以是接口</span></div><div class="line">       List&lt;String&gt; list = Mockito.mock(List.class);</div><div class="line">       </div><div class="line">       Mockito.when(list.get(Mockito.anyInt())).thenReturn(<span class="string">"hello"</span>, <span class="string">"world"</span>);</div><div class="line"></div><div class="line">       String result = list.get(<span class="number">0</span>) + list.get(<span class="number">1</span>);</div><div class="line"></div><div class="line">       Mockito.verify(list, Mockito.times(<span class="number">2</span>)).get(Mockito.anyInt());</div><div class="line"></div><div class="line">       Assert.assertEquals(<span class="string">"helloworld"</span>, result);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：如果使用参数匹配器，那么所有的参数都要使用参数匹配器，不管是stubbing还是verify的时候都一样。</p>
</blockquote>
<h3 id="Intellij-Idea-的-converage"><a href="#Intellij-Idea-的-converage" class="headerlink" title="Intellij Idea 的 converage"></a>Intellij Idea 的 converage</h3><blockquote>
<p>真的是好强大</p>
</blockquote>
<h2 id="Spring与单元测试"><a href="#Spring与单元测试" class="headerlink" title="Spring与单元测试"></a>Spring与单元测试</h2><h3 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// https://mvnrepository.com/artifact/junit/junit</span></div><div class="line">compile group: <span class="string">'junit'</span>, name: <span class="string">'junit'</span>, version: <span class="string">'4.12'</span></div><div class="line"></div><div class="line"><span class="comment">// https://mvnrepository.com/artifact/org.mockito/mockito-core</span></div><div class="line">compile group: <span class="string">'org.mockito'</span>, name: <span class="string">'mockito-core'</span>, version: <span class="string">'2.0.106-beta'</span></div><div class="line"></div><div class="line"><span class="comment">//https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test</span></div><div class="line">compile group: <span class="string">'org.springframework.boot'</span>, name: <span class="string">'spring-boot-starter-test'</span>, version: <span class="string">'1.4.0.RELEASE'</span></div></pre></td></tr></table></figure>
<ul>
<li>如果你要用到一些<strong>Spring自带的注解</strong>，比如<code>@Autowired</code>的话，最好是在测试类的基类中，加入如下注解，这样会使得测试时先将<strong>SpringBoot</strong>运行起来。</li>
</ul>
<blockquote>
<p>注意:</p>
<p><code>@SpringgApplicationConfigtation</code>注解在<strong>SpringBoot</strong>的<strong>1.4</strong>版本以后不建议使用</p>
<p>使用<code>SpringBootTest</code>注解替代<code>@SpringgApplicationConfigtation</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="meta">@SpringBootTest</span>(classes = Application.class)</div></pre></td></tr></table></figure>
<ul>
<li>接下来需要在@Before注解的setUp()中进行初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="meta">@SpringBootTest</span>(classes = Application.class)</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MockitoBasedTest</span> </span>&#123;</div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// 初始化测试用例类中由Mockito的注解标注的所有模拟对象</span></div><div class="line">        MockitoAnnotations.initMocks(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="被测类中-Autowired注解，如何控制其中Repository返回值"><a href="#被测类中-Autowired注解，如何控制其中Repository返回值" class="headerlink" title="被测类中@Autowired注解，如何控制其中Repository返回值"></a>被测类中<code>@Autowired</code>注解，如何控制其中Repository返回值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameHelper</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> PointRepository pointRepository;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkLineItem</span><span class="params">(<span class="keyword">final</span> Line line)</span> </span>&#123;</div><div class="line">        Point fromPoint = pointRepository.findById(line.getFromPointId());  <span class="comment">//如何控制这个repository的返回？</span></div><div class="line">        Point toPoint = pointRepository.findById(line.getToPointId());</div><div class="line">        <span class="keyword">return</span> fromPoint.getID().equals(toPoint.getID());<span class="comment">//简化了原函数</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>对被测类中@Autowired的对象，用@Mocks标注；对被测类自己，用@InjectMocks标注。</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameHelperTest</span> </span>&#123;</div><div class="line">    <span class="meta">@Mock</span></div><div class="line">    <span class="keyword">private</span> PointRepository pointRepository;</div><div class="line"></div><div class="line">    <span class="meta">@InjectMocks</span></div><div class="line">    <span class="keyword">private</span> GameHelper gamehelper;   <span class="comment">//pointRepository作为mock对象被注入到gamehelper中，gamehelper其他成员变量不变</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCheckLineItem</span><span class="params">()</span> </span>&#123;</div><div class="line">        Line line = <span class="keyword">new</span> Line(***);</div><div class="line">        when(pointRepository.findById(<span class="number">123L</span>)).thenReturn(<span class="keyword">new</span> Point(***));</div><div class="line">        when(pointRepository.findById(<span class="number">456L</span>)).thenReturn(<span class="keyword">new</span> Point(***));</div><div class="line">        assertTrue(gamehelper.checkLineItem(line));</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>官方解释：</p>
<p>   @InjectMocks - injects mock or spy fields into tested object automatically.</p>
</blockquote>
<ul>
<li>被<code>@Mock</code>标注的对象会自动注入到被<code>@InjectMocks</code>标注的对象中。</li>
<li>在上例中，<strong>GameHelper</strong>中的成员变量pointRepository（的函数），就会被我们用在测试用例中改写过返回值的pointRepository对象替换掉。</li>
</ul>
<blockquote>
<p>另外，经测试，thenReturn返回的是对象引用而不是深复制了对象本身（所以可以减少写thenReturn()的次数）。</p>
</blockquote>
<h3 id="被测函数调用被测类其他函数，怎么控制返回值？"><a href="#被测函数调用被测类其他函数，怎么控制返回值？" class="headerlink" title="被测函数调用被测类其他函数，怎么控制返回值？"></a>被测函数调用被测类其他函数，怎么控制返回值？</h3><p>比如在CreateGameServiceImpl这个类中，有这样一段函数<br>public class CreateGameServiceImpl implements CreateGameService {</p>
<pre><code>...//省略成员变量

public FullGame createGame(String name, Long creatorId, List&lt;Point&gt; points, List&lt;Selection&gt; selections, List&lt;Line&gt; lines) {
    Game gameItem = createBlankGame(name, creatorId);    //createBlankGame()为CreateGameServiceImpl中另一个函数
</code></pre><p>那么，如果我还没实现createBlackGame()，我在测试函数里应该怎么控制它呢？这次用2）中的方法@Mock + @InjectMocks就不行了，因为他们属于同一个类。</p>
<p>（这个问题@Xander 觉得应该实现了被调用的函数才好，但是既然mock的存在很多时候是为了在函数都没实现的情况下编写测试，因此我觉得继续研究。）</p>
<p>后来自己通过查阅<strong>官方的文档，解决办法</strong>是使用spy()命令，结合doReturn()：<br>public class CreateGameServiceImplTest {<br>    //这部分不需要改。省略其他成员变量<br>    @Mock<br>    private GameHelper gameHelper;</p>
<pre><code>@InjectMocks
CreateGameServiceImpl serviceimpl;

@Test
public void testCreateGameStringLongListOfPointListOfSelectionListOfLine() {
    serviceimpl = spy(serviceimpl); //将serviceimpl部分mock化
    doReturn(***).when(serviceimpl).createBlankGame(a, b);  //这里必须用doReturn()而不能是when().thenReturn()
    ...
}
</code></pre><p>}</p>
<p>原因我们在最后解释。</p>
<p>首先我们来看文档中对于Spy()的解释：</p>
<p>You can create spies of real objects. When you use the spy then the methods are called (unless a method was stubbed).</p>
<p>Spying on real objects can be associated with “partial mocking” concept.（重点是，spy与”部分mock”相关。）</p>
<p>对于Spy，官方有个Sample：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">List list = <span class="keyword">new</span> LinkedList();</div><div class="line">List spy = spy(list);</div><div class="line"></div><div class="line"><span class="comment">//optionally, you can stub out some methods:</span></div><div class="line">when(spy.size()).thenReturn(<span class="number">100</span>);</div><div class="line"></div><div class="line"><span class="comment">//using the spy calls real methods</span></div><div class="line">spy.add(<span class="string">"one"</span>);</div><div class="line">spy.add(<span class="string">"two"</span>);</div><div class="line"></div><div class="line"><span class="comment">//prints "one" - 这个函数还是真实的</span></div><div class="line">System.out.println(spy.get(<span class="number">0</span>));</div><div class="line"></div><div class="line"><span class="comment">//100 is printed - size()函数被替换了</span></div><div class="line">System.out.println(spy.size());</div></pre></td></tr></table></figure>
<ul>
<li>通俗来讲，在我个人理解，Spy()可以使一个对象的一部分方法被用户替换。</li>
<li>在我们的例子中，CreateGameServiceImpl中的函数<code>createGame()</code>调用了<code>createBlankGame()</code>，而后者可能是未实现的。</li>
<li>但是此时CreateGameServiceImpl类的注解是<code>@InjectMocks</code>而不是<code>@Mock</code>，只能接收<code>@Mock</code>对象的注入，而自己的方法无法被<strong>mock(stub</strong>)。</li>
<li>因此我们通过<code>spy()</code>，将CreateGameServiceImpl部分<strong>mock</strong>化，从而将createBlankGame()函数替换掉。</li>
<li>不过这里如果遇到private的被调函数就没办法了。</li>
</ul>
<h2 id="在JUnit中集成Spring上下文的支持"><a href="#在JUnit中集成Spring上下文的支持" class="headerlink" title="在JUnit中集成Spring上下文的支持"></a>在JUnit中集成Spring上下文的支持</h2><ul>
<li>使用JUnit 4.x提供的注解<code>@RunWith</code>，可以指定单元测试的“运行类”，运行类必须继承自 <code>org.junit.runner.Runner</code> 并实现 <strong>run</strong> 方法。</li>
<li>Spring Test 框架提供的运行类是 <strong>SpringJUnit4ClassRunner</strong> ，使用该类可以轻松的将<strong>Spring</strong>和<strong>JUnit</strong>进行集成。该类的用法示例如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span> ( SpringJUnit4ClassRunner.class ) <span class="comment">//指定单元测试运行类</span></div><div class="line"><span class="meta">@SpringBootTest</span>(classes = Application.class)</div><div class="line"><span class="comment">//很多情况下单元测试离不开事务，下面的注解指明使用的事务管理器</span></div><div class="line"><span class="comment">//如果defaultRollback为true，测试运行结束后，默认回滚事务，不影响数据库</span></div><div class="line"><span class="meta">@TransactionConfiguration</span> ( transactionManager = <span class="string">"txManager"</span>, defaultRollback = <span class="keyword">true</span> )</div><div class="line"><span class="meta">@Transactional</span> <span class="comment">//指定默认所有测试方法的事务特性</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span></span></div><div class="line">&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="keyword">private</span> SpringManagedBean bean; <span class="comment">//任何Spring管理的Bean都可以注入到单元测试类</span></div><div class="line"> </div><div class="line">    <span class="meta">@BeforeClass</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setUpBeforeClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@AfterClass</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tearDownAfterClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@After</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Repeat</span> ( <span class="number">10</span> )<span class="comment">//重复测试10次</span></div><div class="line">    <span class="comment">//该测试期望抛出IllegalArgumentException，测试超时1秒</span></div><div class="line">    <span class="meta">@Test</span> ( expected = IllegalArgumentException.class, timeout = <span class="number">1000</span> )</div><div class="line">    <span class="meta">@Rollback</span> ( <span class="keyword">true</span> )</div><div class="line">    <span class="comment">//测试完毕后回滚</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Spring-MVC的测试"><a href="#Spring-MVC的测试" class="headerlink" title="Spring MVC的测试"></a>Spring MVC的测试</h2><h3 id="以前的测试方式"><a href="#以前的测试方式" class="headerlink" title="以前的测试方式"></a>以前的测试方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sishuok.mvc.controller;</div><div class="line"><span class="comment">//省略import</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserControllerTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> UserController userController;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</div><div class="line">        userController = <span class="keyword">new</span> UserController();</div><div class="line">        <span class="comment">//安装userCtroller依赖 比如userService</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testView</span><span class="params">()</span> </span>&#123;</div><div class="line">        MockHttpServletRequest req = <span class="keyword">new</span> MockHttpServletRequest();</div><div class="line">        ModelAndView mv = userController.view(<span class="number">1L</span>, req);</div><div class="line"></div><div class="line">        ModelAndViewAssert.assertViewName(mv, <span class="string">"user/view"</span>);</div><div class="line">        ModelAndViewAssert.assertModelAttributeAvailable(mv, <span class="string">"user"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>准备控制器</strong>：我们通过new方式创建一个，然后手工查找依赖注入进去（比如从spring容器获取/new的）；</li>
<li><strong>Mock Request</strong>：此处使用Spring提供的MockAPI模拟一个HttpServletRequest，其他的Servlet API也提供了相应的Mock类，具体请查看Javadoc；</li>
<li><strong>访问控制器方法</strong>：通过直接调用控制器方法进行访问，此处无法验证SpringMVC框架的类型转换、数据验证等是否正常；</li>
<li><strong>ModelAndViewAssert</strong>：通过这个Assert API验证我们的返回值是否正常；</li>
</ul>
<blockquote>
<p>这种方式的缺点：</p>
</blockquote>
<ul>
<li>如不能走Spring MVC完整流程（不能走Servlet的过滤器链、SpringMVC的类型转换、数据验证、数据绑定、拦截器等等），如果做基本的测试没问题，这种方式就是纯粹的单元测试，我们想要的功能其实是一种集成测试，不过后续部分不区分</li>
</ul>
<h2 id="安装测试环境"><a href="#安装测试环境" class="headerlink" title="安装测试环境"></a>安装测试环境</h2><ul>
<li><strong>spring mvc</strong>测试框架提供了两种方式，独立安装和集成Web环境测试（此种方式并不会集成真正的web环境，而是通过相应的Mock API进行模拟测试，无须启动服务器）。</li>
</ul>
<h3 id="独立测试方式"><a href="#独立测试方式" class="headerlink" title="独立测试方式"></a>独立测试方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserControllerStandaloneSetupTest</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;  </div><div class="line">    <span class="meta">@Before</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;  </div><div class="line">        UserController userController = <span class="keyword">new</span> UserController();  </div><div class="line">        mockMvc = MockMvcBuilders.standaloneSetup(userController).build();  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>首先自己创建相应的控制器，注入相应的依赖</li>
<li>通过<strong>MockMvcBuilders.standaloneSetup</strong>模拟一个Mvc测试环境，通过build得到一个MockMvc</li>
<li>MockMvc：是我们以后测试时经常使用的API，后边介绍</li>
</ul>
<h3 id="测试API"><a href="#测试API" class="headerlink" title="测试API"></a>测试API</h3><ul>
<li><p>Spring mvc测试框架提供了测试MVC需要的API，主要包括</p>
<ul>
<li><strong>Servlet/JSPMock</strong></li>
<li><strong>MockMvcBuilder</strong></li>
<li><strong>MockMvc</strong></li>
<li><strong>RequestBuilder</strong></li>
<li><strong>ResultMatcher</strong></li>
<li><strong>ResultHandler</strong></li>
<li><strong>MvcResult</strong> 等</li>
</ul>
</li>
<li><p>另外提供了几个静态工厂方法便于测试：</p>
<ul>
<li><strong>MockMvcBuilders</strong></li>
<li><strong>MockMvcRequestBuilder</strong></li>
<li><strong>MockMvcResultMatchers</strong></li>
<li><strong>MockMvcResultHandler</strong></li>
</ul>
</li>
<li><p>在使用时请使用静态方法导入方便测试，如：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.setup.MockMvcBuilders.*;  </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;  </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;  </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;</div></pre></td></tr></table></figure>
<ul>
<li><strong>Servlet/JSP API Mock</strong> 提供了对Servlet 3 相应API的Mock，如：<ul>
<li><code>MockServletContext</code></li>
<li><code>MockHttpServletRequest</code></li>
<li><code>MockHttpServletResponse</code> </li>
</ul>
</li>
<li>具体请查看spring-test模块的org.springframework.mock.web包。</li>
</ul>
<h3 id="API如下："><a href="#API如下：" class="headerlink" title="API如下："></a>API如下：</h3><h4 id="MockMvcBuilder-MockMvcBuilders主要API："><a href="#MockMvcBuilder-MockMvcBuilders主要API：" class="headerlink" title="MockMvcBuilder/MockMvcBuilders主要API："></a>MockMvcBuilder/MockMvcBuilders主要API：</h4><ul>
<li><strong>MockMvcBuilder</strong>是用来构造<strong>MockMvc</strong>的构造器，其主要有两个实现：<ul>
<li><code>StandaloneMockMvcBuilder</code></li>
<li><code>DefaultMockMvcBuilder</code></li>
</ul>
</li>
<li>分别对应之前的两种测试方式。对于我们来说直接使用静态工厂<strong>MockMvcBuilders</strong>创建即可：</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>API说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>MockMvcBuilders.webAppContextSetup(WebApplicationContextcontext)</code></td>
<td>指定<strong>WebApplicationContext</strong>，将会从该上下文获取相应的控制器并得到相应的<strong>MockMvc</strong>；</td>
</tr>
<tr>
<td><code>MockMvcBuilders.standaloneSetup(Object... controllers)</code></td>
<td>通过参数指定一组控制器，这样就不需要从上下文获取了</td>
</tr>
</tbody>
</table>
<h4 id="DefaultMockMvcBuilder主要API："><a href="#DefaultMockMvcBuilder主要API：" class="headerlink" title="DefaultMockMvcBuilder主要API："></a>DefaultMockMvcBuilder主要API：</h4><table>
<thead>
<tr>
<th>方法</th>
<th>API说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>addFilters(Filter... filters)/addFilter(Filter filter, String... urlPatterns)</code></td>
<td>添加<strong>javax.servlet.Filter</strong>过滤器</td>
</tr>
<tr>
<td><code>defaultRequest(RequestBuilderrequestBuilder)</code></td>
<td>默认的<strong>RequestBuilder</strong>，每次执行时会合并到自定义的R<strong>equestBuilder</strong>中，即提供公共请求数据的；</td>
</tr>
<tr>
<td><code>alwaysExpect(ResultMatcher resultMatcher)</code></td>
<td>定义全局的结果验证器，即每次执行请求时都进行验证的规则；</td>
</tr>
<tr>
<td><code>alwaysDo(ResultHandler resultHandler)</code></td>
<td>定义全局结果处理器，即每次请求时都进行结果处理；</td>
</tr>
<tr>
<td><code>dispatchOptions</code></td>
<td><strong>DispatcherServlet</strong>是否分发<strong>OPTIONS</strong>请求方法到控制器；</td>
</tr>
</tbody>
</table>
<h4 id="StandaloneMockMvcBuilder继承了DefaultMockMvcBuilder"><a href="#StandaloneMockMvcBuilder继承了DefaultMockMvcBuilder" class="headerlink" title="StandaloneMockMvcBuilder继承了DefaultMockMvcBuilder"></a>StandaloneMockMvcBuilder继承了DefaultMockMvcBuilder</h4><table>
<thead>
<tr>
<th>方法</th>
<th>API说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>setMessageConverters(HttpMessageConverter&lt;?&gt;…messageConverters)</td>
<td>设置HTTP消息转换器；</td>
</tr>
<tr>
<td>setValidator(Validator validator) `</td>
<td>设置验证器；</td>
</tr>
<tr>
<td>setConversionService(FormattingConversionService conversionService)</td>
<td>设置转换服务；</td>
</tr>
<tr>
<td>addInterceptors(HandlerInterceptor…interceptors)</td>
<td>添加spring mvc拦截器；</td>
</tr>
<tr>
<td>addMappedInterceptors(String[]pathPatterns,HandlerInterceptor… interceptors)</td>
<td>添加spring mvc拦截器；</td>
</tr>
<tr>
<td>setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager)</td>
<td>设置内容协商管理器；</td>
</tr>
<tr>
<td>setAsyncRequestTimeout(long timeout)</td>
<td>设置异步超时时间；</td>
</tr>
<tr>
<td>setCustomArgumentResolvers(HandlerMethodArgumentResolver… argumentResolvers)</td>
<td>设置自定义控制器方法参数解析器；</td>
</tr>
<tr>
<td>setCustomReturnValueHandlers(HandlerMethodReturnValueHandler… handlers)</td>
<td>设置自定义控制器方法返回值处理器；</td>
</tr>
<tr>
<td>setHandlerExceptionResolvers(List<handlerexceptionresolver></handlerexceptionresolver></td>
<td>exceptionResolvers)/setHandlerExceptionResolvers(HandlerExceptionResolver… exceptionResolvers)</td>
<td>设置异常解析器；</td>
</tr>
<tr>
<td>setViewResolvers(ViewResolver…resolvers)</td>
<td>设置视图解析器；</td>
</tr>
<tr>
<td>setSingleView(View view)</td>
<td>设置单个视图，即视图解析时总是解析到这一个（仅适用于只有一个视图的情况）；</td>
</tr>
<tr>
<td>setLocaleResolver(LocaleResolver localeResolver)</td>
<td>设置Local解析器；</td>
</tr>
<tr>
<td>setFlashMapManager(FlashMapManager flashMapManager)</td>
<td>设置FlashMapManager，如存储重定向数据；</td>
</tr>
<tr>
<td>setUseSuffixPatternMatch(boolean  useSuffixPatternMatch)`</td>
<td>设置是否是后缀模式匹配，如“/user”是否匹配”/user.*”，默认真即匹配；</td>
</tr>
<tr>
<td>setUseTrailingSlashPatternMatch(boolean  useTrailingSlashPatternMatch)</td>
<td>设置是否自动后缀路径模式匹配，如“/user”是否匹配“/user/”，默认真即匹配；</td>
</tr>
<tr>
<td>addPlaceHolderValue(String name, String value)</td>
<td>添加request mapping中的占位符替代；</td>
</tr>
</tbody>
</table>
<h3 id="MockMvc主要API："><a href="#MockMvc主要API：" class="headerlink" title="MockMvc主要API："></a>MockMvc主要API：</h3><ul>
<li>使用之前的<code>MockMvcBuilder.build()</code>得到构建好的<strong>MockMvc</strong>；</li>
<li>这个是mvc测试的核心API，对于该API的使用方式如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MvcResult result = mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/user/1"</span>))  </div><div class="line">       .andExpect(MockMvcResultMatchers.view().name(<span class="string">"user/view"</span>))  </div><div class="line">       .andExpect(MockMvcResultMatchers.model().attributeExists(<span class="string">"user"</span>))  </div><div class="line">       .andDo(MockMvcResultHandlers.print())  </div><div class="line">       .andReturn();</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>方法</th>
<th>API说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>perform</td>
<td>执行一个RequestBuilder请求，会自动执行SpringMVC的流程并映射到相应的控制器执行处理；</td>
</tr>
<tr>
<td>andExpect</td>
<td>添加ResultMatcher验证规则，验证控制器执行完成后结果是否正确；</td>
</tr>
<tr>
<td>andDo</td>
<td>添加ResultHandler结果处理器，比如调试时打印结果到控制台；</td>
</tr>
<tr>
<td>andReturn</td>
<td>最后返回相应的MvcResult；然后进行自定义验证/进行下一步的异步处理；</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td>还提供了以下API</td>
</tr>
<tr>
<td>setDefaultRequest</td>
<td>设置默认的RequestBuilder，用于在每次perform执行相应的RequestBuilder时自动把该默认的RequestBuilder合并到perform的RequestBuilder中；</td>
</tr>
<tr>
<td>setGlobalResultMatchers</td>
<td>设置全局的预期结果验证规则，如我们通过MockMvc测试多个控制器时，假设它们都想验证某个规则时，就可以使用这个；</td>
</tr>
<tr>
<td>setGlobalResultHandlers</td>
<td>设置全局的ResultHandler结果处理器；</td>
</tr>
</tbody>
</table>
<h3 id="RequestBuilder-MockMvcRequestBuilders"><a href="#RequestBuilder-MockMvcRequestBuilders" class="headerlink" title="RequestBuilder / MockMvcRequestBuilders"></a>RequestBuilder <code>/</code> MockMvcRequestBuilders</h3><ul>
<li><p><strong>RequestBuilder</strong>用来构建请求的，其提供了一个方法<strong>buildRequest(ServletContextservletContext)</strong>用于构<strong>建MockHttpServletRequest</strong> 其主要有两个子类。</p>
<ul>
<li><strong>MockHttpServletRequestBuilder</strong></li>
<li><strong>MockMultipartHttpServletRequestBuilder</strong>（如文件上传使用）</li>
</ul>
</li>
<li><p>用来Mock客户端请求需要的所有数据。</p>
</li>
</ul>
<h3 id="MockMvcRequestBuilders主要API："><a href="#MockMvcRequestBuilders主要API：" class="headerlink" title="MockMvcRequestBuilders主要API："></a>MockMvcRequestBuilders主要API：</h3><table>
<thead>
<tr>
<th>方法</th>
<th>API说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>MockHttpServletRequestBuilderget(StringurlTemplate,Object…urlVariables)</td>
<td>根据uri模板和uri变量值得到一个GET请求方式的MockHttpServletRequestBuilder；如get(“/user/{id}”, 1L)；</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilder post(String urlTemplate, Object… urlVariables)</td>
<td>同get类似，但是是POST方法；</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilder put(String urlTemplate, Object… urlVariables)</td>
<td>同get类似，但是是PUT方法；</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilder delete(String urlTemplate, Object… urlVariables)</td>
<td>同get类似，但是是DELETE方法；</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilder options(String urlTemplate, Object…urlVariables)</td>
<td>同get类似，但是是OPTIONS方法；</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilderrequest(HttpMethodhttpMethod,StringurlTemplate,Object…urlVariables)</td>
<td>提供自己的Http请求方法及uri模板和uri变量，如上API都是委托给这个API；</td>
</tr>
<tr>
<td>MockMultipartHttpServletRequestBuilderfileUpload(StringurlTemplate,Object…urlVariables)</td>
<td>提供文件上传方式的请求，得到MockMultipartHttpServletRequestBuilder；</td>
</tr>
<tr>
<td>RequestBuilder asyncDispatch(finalMvcResultmvcResult)</td>
<td>创建一个从启动异步处理的请求的MvcResult进行异步分派的RequestBuilder；</td>
</tr>
</tbody>
</table>
<h3 id="MockHttpServletRequestBuilder和MockMultipartHttpServletRequestBuilder-API："><a href="#MockHttpServletRequestBuilder和MockMultipartHttpServletRequestBuilder-API：" class="headerlink" title="MockHttpServletRequestBuilder和MockMultipartHttpServletRequestBuilder API："></a>MockHttpServletRequestBuilder和MockMultipartHttpServletRequestBuilder API：</h3><h4 id="MockHttpServletRequestBuilder-API："><a href="#MockHttpServletRequestBuilder-API：" class="headerlink" title="MockHttpServletRequestBuilder API："></a>MockHttpServletRequestBuilder API：</h4><table>
<thead>
<tr>
<th>方法</th>
<th>API说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>MockHttpServletRequestBuilderheader(Stringname,Object…values)</td>
<td>添加头信息</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilderheaders(HttpHeaders  httpHeaders)</td>
<td>添加头信息</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilder contentType(MediaType mediaType)</td>
<td>指定请求的contentType头信息</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilderaccept(MediaType…mediaTypes)/MockHttpServletRequestBuilderaccept(String…mediaTypes)</td>
<td>指定请求的Accept头信息</td>
</tr>
<tr>
<td>MockHttpServletRequestBuildercontent(byte[]content)/MockHttpServletRequestBuildercontent(Stringcontent)</td>
<td>指定请求Body体内容</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilder cookie(Cookie… cookies)</td>
<td>指定请求的Cookie</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilder locale(Locale locale</td>
<td>指定请求的Locale</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilder characterEncoding(String encoding)</td>
<td>指定请求字符编码</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilder requestAttr(String name, Object value)</td>
<td>设置请求属性数据</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilder sessionAttr(String name, Object value)</td>
<td>置请求session属性数据；</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilder</td>
<td>sessionAttrs(Map<string, object=""> sessionAttributes)</string,></td>
<td>置请求session属性数据</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilder flashAttr(String name, Object value)</td>
<td>指定请求的flash信息，比如重定向后的属性信息</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilder</td>
<td>flashAttrs(Map<string,object>flashAttributes)</string,object></td>
<td>指定请求的flash信息，比如重定向后的属性信息</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilder session(MockHttpSession session)</td>
<td>指定请求的Session</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilder principal(Principal principal)</td>
<td>指定请求的Principal</td>
</tr>
<tr>
<td>MockHttpServletRequestBuildercontextPath(StringcontextPath)</td>
<td>指定请求的上下文路径，必须以“/”开头，且不能以“/”结尾</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilder pathInfo(String pathInfo)</td>
<td>请求的路径信息，必须以“/”开头</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilder secure(boolean secure)</td>
<td>请求是否使用安全通道</td>
</tr>
<tr>
<td>MockHttpServletRequestBuilderwith(RequestPostProcessorpostProcessor)</td>
<td>请求的后处理器，用于自定义一些请求处理的扩展点</td>
</tr>
</tbody>
</table>
<h4 id="MockMultipartHttpServletRequestBuilder继承自MockHttpServletRequestBuilder，又提供了如下API："><a href="#MockMultipartHttpServletRequestBuilder继承自MockHttpServletRequestBuilder，又提供了如下API：" class="headerlink" title="MockMultipartHttpServletRequestBuilder继承自MockHttpServletRequestBuilder，又提供了如下API："></a>MockMultipartHttpServletRequestBuilder继承自MockHttpServletRequestBuilder，又提供了如下API：</h4><table>
<thead>
<tr>
<th>方法</th>
<th>API说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>MockMultipartHttpServletRequestBuilder file(String name, byte[] content)</td>
<td>指定要上传的文件</td>
</tr>
<tr>
<td>MockMultipartHttpServletRequestBuilder file(MockMultipartFile file)</td>
<td>指定要上传的文件</td>
</tr>
</tbody>
</table>
<h4 id="ResultActions"><a href="#ResultActions" class="headerlink" title="ResultActions"></a>ResultActions</h4><ul>
<li>调用<code>MockMvc.perform(RequestBuilder requestBuilder)</code>后将得到<strong>ResultActions</strong>，通过ResultActions完成如下三件事：<ul>
<li><strong>ResultActions andExpect(ResultMatcher matcher)</strong> ：添加验证断言来判断执行请求后的结果是否是预期的；</li>
<li><strong>ResultActions andDo(ResultHandlerhandler)</strong>：添加结果处理器，用于对验证成功后执行的动作，如输出下请求/结果信息用于调试；</li>
<li><strong>MvcResult andReturn()</strong> ：<strong>返回验证成功后的MvcResult</strong>；用于自定义验证/下一步的异步处理；</li>
</ul>
</li>
</ul>
<h3 id="ResultMatcher-MockMvcResultMatchers"><a href="#ResultMatcher-MockMvcResultMatchers" class="headerlink" title="ResultMatcher / MockMvcResultMatchers"></a>ResultMatcher <code>/</code> MockMvcResultMatchers</h3><ul>
<li><strong>ResultMatcher</strong>用来匹配执行完请求后的结果验证，其就一个 <strong><em>match(MvcResultresult)</em></strong> 断言方法，如果匹配失败将抛出相应的异常；</li>
<li>spring mvc测试框架提供了很多ResultMatchers来满足测试需求。注意这些ResultMatchers并不是ResultMatcher的子类，而是返回ResultMatcher实例的。</li>
<li><p>Spring mvc测试框架为了测试方便提供了<strong><em>MockMvcResultMatchers</em></strong>静态工厂方法方便操作；</p>
</li>
<li><p>具体的API如下：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>API说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>HandlerResultMatchers handler()</td>
<td>请求的Handler验证器，比如验证处理器类型/方法名；此处的Handler其实就是处理请求的控制器；</td>
</tr>
<tr>
<td>RequestResultMatchers request()</td>
<td>得到RequestResultMatchers验证器</td>
</tr>
<tr>
<td>ModelResultMatchers model()</td>
<td>得到模型验证器</td>
</tr>
<tr>
<td>ViewResultMatchers view()</td>
<td>得到视图验证器</td>
</tr>
<tr>
<td>FlashAttributeResultMatchers flash()</td>
<td>得到Flash属性验证</td>
</tr>
<tr>
<td>StatusResultMatchers status()</td>
<td>得到响应状态验证器</td>
</tr>
<tr>
<td>HeaderResultMatchers header()</td>
<td>得到响应Header验证器</td>
</tr>
<tr>
<td>CookieResultMatchers cookie()</td>
<td>得到响应Cookie验证器</td>
</tr>
<tr>
<td>ContentResultMatchers content()</td>
<td>得到响应内容验证器</td>
</tr>
<tr>
<td>JsonPathResultMatchers jsonPath(String expression, Object … args)</td>
<td>得到Json表达式验证器</td>
</tr>
<tr>
<td>ResultMatcher jsonPath(String expression, Matcher<t> matcher)</t></td>
<td>得到Json表达式验证器</td>
</tr>
<tr>
<td>XpathResultMatchers xpath(String expression, Object… args)</td>
<td>得到Xpath表达式验证器</td>
</tr>
<tr>
<td>XpathResultMatchers xpath(String expression,Map<string,string>namespaces,Object…args)</string,string></td>
<td>得到Xpath表达式验证器</td>
</tr>
<tr>
<td>ResultMatcher forwardedUrl(final String expectedUrl)</td>
<td>验证处理完请求后转发的url（绝对匹配）</td>
</tr>
<tr>
<td>ResultMatcher forwardedUrlPattern(final String urlPattern)</td>
<td>验证处理完请求后转发的url（Ant风格模式匹配，@since spring4）</td>
</tr>
<tr>
<td>ResultMatcher redirectedUrl(final String expectedUrl)</td>
<td>验证处理完请求后重定向的url（绝对匹配）</td>
</tr>
<tr>
<td>ResultMatcher redirectedUrlPattern(final StringexpectedUrl)</td>
<td>验证处理完请求后重定向的url（Ant风格模式匹配，@since</td>
<td>spring4）</td>
</tr>
</tbody>
</table>
<ul>
<li>得到相应的<strong>ResultMatchers</strong>后，接着再调用其相应的API得到<strong>ResultMatcher</strong>，</li>
<li>如<code>ModelResultMatchers.attributeExists(final String...names)</code>判断Model属性是否存在。具体请查看相应的API。</li>
</ul>
<h4 id="ResultHandler-MockMvcResultHandlers"><a href="#ResultHandler-MockMvcResultHandlers" class="headerlink" title="ResultHandler/MockMvcResultHandlers"></a>ResultHandler/MockMvcResultHandlers</h4><ul>
<li><strong>ResultHandler</strong>用于对处理的结果进行相应处理的，比如输出整个请求/响应等信息方便调试</li>
<li>Springmvc测试框架提供了<strong><em>MockMvcResultHandlers</em></strong>静态工厂方法，该工厂提供了<code>ResultHandlerprint()</code>返回一个输出<strong>MvcResult</strong>详细信息到控制台的ResultHandler实现。</li>
</ul>
<h4 id="MvcResult"><a href="#MvcResult" class="headerlink" title="MvcResult"></a>MvcResult</h4><ul>
<li>即执行完控制器后得到的整个结果，并不仅仅是返回值，其包含了测试时需要的所有信息，如：</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>API说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>MockHttpServletRequest getRequest()：</td>
<td>得到执行的请求；</td>
</tr>
<tr>
<td>MockHttpServletResponse getResponse()：</td>
<td>得到执行后的响应；</td>
</tr>
<tr>
<td>Object getHandler()：</td>
<td>得到执行的处理器，一般就是控制器；</td>
</tr>
<tr>
<td>HandlerInterceptor[] getInterceptors()：</td>
<td>得到对处理器进行拦截的拦截器；</td>
</tr>
<tr>
<td>ModelAndView getModelAndView()：</td>
<td>得到执行后的ModelAndView；</td>
</tr>
<tr>
<td>Exception getResolvedException()：</td>
<td>得到HandlerExceptionResolver解析后的异常；</td>
</tr>
<tr>
<td>FlashMap getFlashMap()：</td>
<td>得到FlashMap；</td>
</tr>
<tr>
<td>Object getAsyncResult()</td>
<td>得到异步执行的结果；</td>
</tr>
<tr>
<td>Object getAsyncResult(long timeout)</td>
<td>得到异步执行的结果；</td>
</tr>
</tbody>
</table>
<h2 id="测试示例"><a href="#测试示例" class="headerlink" title="测试示例"></a>测试示例</h2><h3 id="测试普通控制器"><a href="#测试普通控制器" class="headerlink" title="测试普通控制器"></a>测试普通控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//测试普通控制器  </span></div><div class="line">mockMvc.perform(get(<span class="string">"/user/&#123;id&#125;"</span>, <span class="number">1</span>)) <span class="comment">//执行请求  </span></div><div class="line">        .andExpect(model().attributeExists(<span class="string">"user"</span>)) <span class="comment">//验证存储模型数据  </span></div><div class="line">        .andExpect(view().name(<span class="string">"user/view"</span>)) <span class="comment">//验证viewName  </span></div><div class="line">        .andExpect(forwardedUrl(<span class="string">"/WEB-INF/jsp/user/view.jsp"</span>))<span class="comment">//验证视图渲染时forward到的jsp  </span></div><div class="line">        .andExpect(status().isOk())<span class="comment">//验证状态码  </span></div><div class="line">        .andDo(print()); <span class="comment">//输出MvcResult到控制台</span></div></pre></td></tr></table></figure>
<h3 id="测试普通控制器，但是URL错误，即404"><a href="#测试普通控制器，但是URL错误，即404" class="headerlink" title="测试普通控制器，但是URL错误，即404"></a>测试普通控制器，但是URL错误，即404</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//找不到控制器，404测试  </span></div><div class="line">MvcResult result = mockMvc.perform(get(<span class="string">"/user2/&#123;id&#125;"</span>, <span class="number">1</span>)) <span class="comment">//执行请求  </span></div><div class="line">        .andDo(print())  </div><div class="line">        .andExpect(status().isNotFound()) <span class="comment">//验证控制器不存在  </span></div><div class="line">        .andReturn();  </div><div class="line">Assert.assertNull(result.getModelAndView()); <span class="comment">//自定义断言</span></div></pre></td></tr></table></figure>
<h3 id="得到MvcResult自定义验证"><a href="#得到MvcResult自定义验证" class="headerlink" title="得到MvcResult自定义验证"></a>得到MvcResult自定义验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MvcResult result = mockMvc.perform(get(<span class="string">"/user/&#123;id&#125;"</span>, <span class="number">1</span>))<span class="comment">//执行请求  </span></div><div class="line">        .andReturn(); <span class="comment">//返回MvcResult  </span></div><div class="line">Assert.assertNotNull(result.getModelAndView().getModel().get(<span class="string">"user"</span>)); <span class="comment">//自定义断言</span></div></pre></td></tr></table></figure>
<h3 id="验证请求参数绑定到模型数据及Flash属性"><a href="#验证请求参数绑定到模型数据及Flash属性" class="headerlink" title="验证请求参数绑定到模型数据及Flash属性"></a>验证请求参数绑定到模型数据及Flash属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mockMvc.perform(post(<span class="string">"/user"</span>).param(<span class="string">"name"</span>, <span class="string">"zhang"</span>)) <span class="comment">//执行传递参数的POST请求(也可以post("/user?name=zhang"))  </span></div><div class="line">        .andExpect(handler().handlerType(UserController.class)) <span class="comment">//验证执行的控制器类型  </span></div><div class="line">        .andExpect(handler().methodName(<span class="string">"create"</span>)) <span class="comment">//验证执行的控制器方法名  </span></div><div class="line">        .andExpect(model().hasNoErrors()) <span class="comment">//验证页面没有错误  </span></div><div class="line">        .andExpect(flash().attributeExists(<span class="string">"success"</span>)) <span class="comment">//验证存在flash属性  </span></div><div class="line">        .andExpect(view().name(<span class="string">"redirect:/user"</span>)); <span class="comment">//验证视图</span></div></pre></td></tr></table></figure>
<h3 id="验证请求参数验证失败出错"><a href="#验证请求参数验证失败出错" class="headerlink" title="验证请求参数验证失败出错"></a>验证请求参数验证失败出错</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mockMvc.perform(post(<span class="string">"/user"</span>).param(<span class="string">"name"</span>, <span class="string">"admin"</span>)) <span class="comment">//执行请求  </span></div><div class="line">        .andExpect(model().hasErrors()) <span class="comment">//验证模型有错误  </span></div><div class="line">        .andExpect(model().attributeDoesNotExist(<span class="string">"name"</span>)) <span class="comment">//验证存在错误的属性  </span></div><div class="line">        .andExpect(view().name(<span class="string">"showCreateForm"</span>)); <span class="comment">//验证视图</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//文件上传  </span></div><div class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;  </div><div class="line">mockMvc.perform(fileUpload(<span class="string">"/user/&#123;id&#125;/icon"</span>, <span class="number">1L</span>).file(<span class="string">"icon"</span>, bytes)) <span class="comment">//执行文件上传  </span></div><div class="line">        .andExpect(model().attribute(<span class="string">"icon"</span>, bytes)) <span class="comment">//验证属性相等性  </span></div><div class="line">        .andExpect(view().name(<span class="string">"success"</span>)); <span class="comment">//验证视图</span></div></pre></td></tr></table></figure>
<h3 id="JSON请求-响应验证"><a href="#JSON请求-响应验证" class="headerlink" title="JSON请求/响应验证"></a>JSON请求/响应验证</h3><ul>
<li>测试时需要安装jackson Json和JsonPath依赖： </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">String requestBody = <span class="string">"&#123;\"id\":1, \"name\":\"zhang\"&#125;"</span>;  </div><div class="line">mockMvc.perform(post(<span class="string">"/user"</span>)  </div><div class="line">            .contentType(MediaType.APPLICATION_JSON).content(requestBody)  </div><div class="line">            .accept(MediaType.APPLICATION_JSON)) <span class="comment">//执行请求  </span></div><div class="line">        .andExpect(content().contentType(MediaType.APPLICATION_JSON)) <span class="comment">//验证响应contentType  </span></div><div class="line">        .andExpect(jsonPath(<span class="string">"$.id"</span>).value(<span class="number">1</span>)); <span class="comment">//使用Json path验证JSON 请参考http://goessner.net/articles/JsonPath/  </span></div><div class="line">  </div><div class="line">String errorBody = <span class="string">"&#123;id:1, name:zhang&#125;"</span>;  </div><div class="line">MvcResult result = mockMvc.perform(post(<span class="string">"/user"</span>)  </div><div class="line">        .contentType(MediaType.APPLICATION_JSON).content(errorBody)  </div><div class="line">        .accept(MediaType.APPLICATION_JSON)) <span class="comment">//执行请求  </span></div><div class="line">        .andExpect(status().isBadRequest()) <span class="comment">//400错误请求  </span></div><div class="line">        .andReturn();  </div><div class="line">  </div><div class="line">Assert.assertTrue(HttpMessageNotReadableException.class.isAssignableFrom(result.getResolvedException().getClass()));<span class="comment">//错误的请求内容体</span></div></pre></td></tr></table></figure>
<h3 id="XML请求-响应验证"><a href="#XML请求-响应验证" class="headerlink" title="XML请求/响应验证"></a>XML请求/响应验证</h3><ul>
<li>测试时需要安装<code>spring oxm</code>和<code>xstream</code>依赖： </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//XML请求/响应  </span></div><div class="line">String requestBody = <span class="string">"&lt;user&gt;&lt;id&gt;1&lt;/id&gt;&lt;name&gt;zhang&lt;/name&gt;&lt;/user&gt;"</span>;  </div><div class="line">mockMvc.perform(post(<span class="string">"/user"</span>)  </div><div class="line">        .contentType(MediaType.APPLICATION_XML).content(requestBody)  </div><div class="line">        .accept(MediaType.APPLICATION_XML)) <span class="comment">//执行请求  </span></div><div class="line">        .andDo(print())  </div><div class="line">        .andExpect(content().contentType(MediaType.APPLICATION_XML)) <span class="comment">//验证响应contentType  </span></div><div class="line">        .andExpect(xpath(<span class="string">"/user/id/text()"</span>).string(<span class="string">"1"</span>)); <span class="comment">//使用XPath表达式验证XML 请参考http://www.w3school.com.cn/xpath/  </span></div><div class="line">  </div><div class="line">String errorBody = <span class="string">"&lt;user&gt;&lt;id&gt;1&lt;/id&gt;&lt;name&gt;zhang&lt;/name&gt;"</span>;  </div><div class="line">MvcResult result = mockMvc.perform(post(<span class="string">"/user"</span>)  </div><div class="line">        .contentType(MediaType.APPLICATION_XML).content(errorBody)  </div><div class="line">        .accept(MediaType.APPLICATION_XML)) <span class="comment">//执行请求  </span></div><div class="line">        .andExpect(status().isBadRequest()) <span class="comment">//400错误请求  </span></div><div class="line">        .andReturn();  </div><div class="line">  </div><div class="line">Assert.assertTrue(HttpMessageNotReadableException.class.isAssignableFrom(result.getResolvedException().getClass()));<span class="comment">//错误的请求内容体</span></div></pre></td></tr></table></figure>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//异常处理  </span></div><div class="line">MvcResult result = mockMvc.perform(get(<span class="string">"/user/exception"</span>)) <span class="comment">//执行请求  </span></div><div class="line">        .andExpect(status().isInternalServerError()) <span class="comment">//验证服务器内部错误  </span></div><div class="line">        .andReturn();  </div><div class="line">  </div><div class="line">Assert.assertTrue(IllegalArgumentException.class.isAssignableFrom(result.getResolvedException().getClass()));</div></pre></td></tr></table></figure>
<h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//静态资源  </span></div><div class="line">mockMvc.perform(get(<span class="string">"/static/app.js"</span>)) <span class="comment">//执行请求  </span></div><div class="line">        .andExpect(status().isOk()) <span class="comment">//验证状态码200  </span></div><div class="line">        .andExpect(content().string(CoreMatchers.containsString(<span class="string">"var"</span>)));<span class="comment">//验证渲染后的视图内容包含var  </span></div><div class="line">  </div><div class="line">mockMvc.perform(get(<span class="string">"/static/app1.js"</span>)) <span class="comment">//执行请求  </span></div><div class="line">        .andExpect(status().isNotFound());  <span class="comment">//验证状态码404</span></div></pre></td></tr></table></figure>
<h3 id="异步测试"><a href="#异步测试" class="headerlink" title="异步测试"></a>异步测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Callable  </span></div><div class="line">MvcResult result = mockMvc.perform(get(<span class="string">"/user/async1?id=1&amp;name=zhang"</span>)) <span class="comment">//执行请求  </span></div><div class="line">        .andExpect(request().asyncStarted())  </div><div class="line">        .andExpect(request().asyncResult(CoreMatchers.instanceOf(User.class))) <span class="comment">//默认会等10秒超时  </span></div><div class="line">        .andReturn();  </div><div class="line">  </div><div class="line">mockMvc.perform(asyncDispatch(result))  </div><div class="line">        .andExpect(status().isOk())  </div><div class="line">        .andExpect(content().contentType(MediaType.APPLICATION_JSON))  </div><div class="line">        .andExpect(jsonPath(<span class="string">"$.id"</span>).value(<span class="number">1</span>));</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//DeferredResult  </span></div><div class="line">result = mockMvc.perform(get(<span class="string">"/user/async2?id=1&amp;name=zhang"</span>)) <span class="comment">//执行请求  </span></div><div class="line">        .andExpect(request().asyncStarted())  </div><div class="line">        .andExpect(request().asyncResult(CoreMatchers.instanceOf(User.class)))  <span class="comment">//默认会等10秒超时  </span></div><div class="line">        .andReturn();  </div><div class="line">  </div><div class="line">mockMvc.perform(asyncDispatch(result))  </div><div class="line">        .andExpect(status().isOk())  </div><div class="line">        .andExpect(content().contentType(MediaType.APPLICATION_JSON))  </div><div class="line">        .andExpect(jsonPath(<span class="string">"$.id"</span>).value(<span class="number">1</span>));</div></pre></td></tr></table></figure>
<ul>
<li>此处请在第一次请求时加上 <strong><em>andExpect(request().asyncResult(CoreMatchers.instanceOf(User.class)))</em></strong> 这样会等待结果返回/超时，无须自己设置线程等待了；此处注意<strong><em>request().asyncResult</em></strong>一定是在第一次请求发出；然后第二次通过<strong><em>asyncDispatch</em></strong>进行异步请求。</li>
</ul>
<h3 id="添加自定义过滤器"><a href="#添加自定义过滤器" class="headerlink" title="添加自定义过滤器"></a>添加自定义过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mockMvc = webAppContextSetup(wac).addFilter(<span class="keyword">new</span> MyFilter(), <span class="string">"/*"</span>).build();  </div><div class="line">mockMvc.perform(get(<span class="string">"/user/1"</span>)).andExpect(request().attribute(<span class="string">"filter"</span>, <span class="keyword">true</span>));</div></pre></td></tr></table></figure>
<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mockMvc = webAppContextSetup(wac)  </div><div class="line">        .defaultRequest(get(<span class="string">"/user/1"</span>).requestAttr(<span class="string">"default"</span>, <span class="keyword">true</span>)) <span class="comment">//默认请求 如果其是Mergeable类型的，会自动合并的哦mockMvc.perform中的RequestBuilder  </span></div><div class="line">        .alwaysDo(print())  <span class="comment">//默认每次执行请求后都做的动作  </span></div><div class="line">        .alwaysExpect(request().attribute(<span class="string">"default"</span>, <span class="keyword">true</span>)) <span class="comment">//默认每次执行后进行验证的断言  </span></div><div class="line">        .build();  </div><div class="line">  </div><div class="line">mockMvc.perform(get(<span class="string">"/user/1"</span>))  </div><div class="line">        .andExpect(model().attributeExists(<span class="string">"user"</span>));</div></pre></td></tr></table></figure>
<h2 id="记住测试步骤，按照步骤操作，整个测试过程是非常容易理解的："><a href="#记住测试步骤，按照步骤操作，整个测试过程是非常容易理解的：" class="headerlink" title="记住测试步骤，按照步骤操作，整个测试过程是非常容易理解的："></a>记住测试步骤，按照步骤操作，整个测试过程是非常容易理解的：</h2><ol>
<li>准备测试环境</li>
<li>通过MockMvc执行请求</li>
<li>添加验证断言</li>
<li>添加结果处理器</li>
<li>得到MvcResult进行自定义断言/进行下一步的异步请求</li>
<li>卸载测试环境</li>
</ol>
<h3 id="集成Web环境方式"><a href="#集成Web环境方式" class="headerlink" title="集成Web环境方式"></a>集成Web环境方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//XML风格  </span></div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)  </div><div class="line"><span class="meta">@WebAppConfiguration</span>(value = <span class="string">"src/main/webapp"</span>)  </div><div class="line"><span class="meta">@ContextHierarchy</span>(&#123;  </div><div class="line">        <span class="meta">@ContextConfiguration</span>(name = <span class="string">"parent"</span>, locations = <span class="string">"classpath:spring-config.xml"</span>),  </div><div class="line">        <span class="meta">@ContextConfiguration</span>(name = <span class="string">"child"</span>, locations = <span class="string">"classpath:spring-mvc.xml"</span>)  </div><div class="line">&#125;)  </div><div class="line">  </div><div class="line"><span class="comment">//注解风格  </span></div><div class="line"><span class="comment">//@RunWith(SpringJUnit4ClassRunner.class)  </span></div><div class="line"><span class="comment">//@WebAppConfiguration(value = "src/main/webapp")  </span></div><div class="line"><span class="comment">//@ContextHierarchy(&#123;  </span></div><div class="line"><span class="comment">//        @ContextConfiguration(name = "parent", classes = AppConfig.class),  </span></div><div class="line"><span class="comment">//        @ContextConfiguration(name = "child", classes = MvcConfig.class)  </span></div><div class="line"><span class="comment">//&#125;)  </span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserControllerWebAppContextSetupTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Autowired</span>  </div><div class="line">    <span class="keyword">private</span> WebApplicationContext wac;  </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;  </div><div class="line">  </div><div class="line">    <span class="meta">@Before</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;  </div><div class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>通过<code>@Autowired</code> WebApplicationContextwac注入web环境的<strong>ApplicationContext</strong>容器；</li>
<li>然后通过<code>MockMvcBuilders.webAppContextSetup(wac).build()</code>创建一个<strong>MockMvc</strong>进行测试；</li>
</ul>
<h3 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testView</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">    MvcResult result = mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/user/1"</span>))  </div><div class="line">            .andExpect(MockMvcResultMatchers.view().name(<span class="string">"user/view"</span>))  </div><div class="line">            .andExpect(MockMvcResultMatchers.model().attributeExists(<span class="string">"user"</span>))  </div><div class="line">            .andDo(MockMvcResultHandlers.print())  </div><div class="line">            .andReturn();  </div><div class="line">      </div><div class="line">    Assert.assertNotNull(result.getModelAndView().getModel().get(<span class="string">"user"</span>));  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><strong>mockMvc.perform</strong> 执行一个请求；</li>
<li><strong>MockMvcRequestBuilders.get(“/user/1”)</strong> 构造一个请求</li>
<li><strong>ResultActions.andExpect</strong> 添加执行完成后的断言</li>
<li><strong>ResultActions.andDo</strong> 添加一个结果处理器，表示要对结果做点什么事情，比如此处使用<strong>MockMvcResultHandlers.print()</strong> 输出整个响应结果信息。</li>
<li><strong>ResultActions.andReturn</strong> 表示执行完成后返回相应的结果。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[YAML]]></title>
      <url>/2016/08/17/160817_yaml/</url>
      <content type="html"><![CDATA[<h2 id="YAML语言"><a href="#YAML语言" class="headerlink" title="YAML语言"></a>YAML语言</h2><ul>
<li><img src="http://ww4.sinaimg.cn/large/610dc034jw1f49s6i5pg7j20go0p043b.jpg" alt="0527"></li>
</ul>
<a id="more"></a>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>YAML 语言（发音 /ˈjæməl/ ）的设计目标，就是方便人类读写。它实质上是一种通用的数据串行化格式。</p>
<ul>
<li>它的基本语法规则如下。<ul>
<li>大小写敏感</li>
<li>使用缩进表示层级关系</li>
<li>缩进时不允许使用Tab键，只允许使用空格。</li>
<li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li>
</ul>
</li>
</ul>
<p><code>#</code> 表示注释，从这个字符一直到行尾，都会被解析器忽略。</p>
<ul>
<li>YAML 支持的数据结构有三种。<ul>
<li><strong>对象</strong>：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</li>
<li><strong>数组</strong>：一组按次序排列的值，又称为序列（sequence） / 列表（list）</li>
<li><strong>纯量</strong>（scalars）：单个的、不可再分的值</li>
</ul>
</li>
</ul>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul>
<li>对象的一组键值对，使用冒号结构表示。</li>
</ul>
<pre><code>animal: pets
</code></pre><ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123; animal: <span class="string">'pets'</span> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>Yaml 也允许另一种写法，将所有键值对写成一个行内对象。</li>
</ul>
<pre><code>hash: { name: Steve, foo: bar } 
</code></pre><ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; hash: &#123; name: <span class="string">'Steve'</span>, foo: <span class="string">'bar'</span> &#125; &#125;</div></pre></td></tr></table></figure>
<p>三、数组</p>
<ul>
<li>一组连词线开头的行，构成一个数组。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- Cat</div><div class="line">- Dog</div><div class="line">- Goldfish</div></pre></td></tr></table></figure>
<ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ <span class="string">'Cat'</span>, <span class="string">'Dog'</span>, <span class="string">'Goldfish'</span> ]</div></pre></td></tr></table></figure>
<ul>
<li>数据结构的子成员是一个数组，则可以在该项下面缩进一个空格。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-</div><div class="line"> - Cat</div><div class="line"> - Dog</div><div class="line"> - Goldfish</div></pre></td></tr></table></figure>
<ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ [ <span class="string">'Cat'</span>, <span class="string">'Dog'</span>, <span class="string">'Goldfish'</span> ] ]</div></pre></td></tr></table></figure>
<ul>
<li>数组也可以采用行内表示法。</li>
</ul>
<pre><code>animal: [Cat, Dog]
</code></pre><ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; animal: [ <span class="string">'Cat'</span>, <span class="string">'Dog'</span> ] &#125;</div></pre></td></tr></table></figure>
<h2 id="四、复合结构"><a href="#四、复合结构" class="headerlink" title="四、复合结构"></a>四、复合结构</h2><ul>
<li>对象和数组可以结合使用，形成复合结构。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">languages:</div><div class="line">    - Ruby</div><div class="line">    - Perl</div><div class="line">    - Python </div><div class="line">websites:</div><div class="line">    YAML: yaml.org </div><div class="line">    Ruby: ruby-lang.org </div><div class="line">    Python: python.org </div><div class="line">    Perl: use.perl.org</div></pre></td></tr></table></figure>
<ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123; languages: [ <span class="string">'Ruby'</span>, <span class="string">'Perl'</span>, <span class="string">'Python'</span> ],</div><div class="line">  websites: </div><div class="line">   &#123; YAML: <span class="string">'yaml.org'</span>,</div><div class="line">     Ruby: <span class="string">'ruby-lang.org'</span>,</div><div class="line">     Python: <span class="string">'python.org'</span>,</div><div class="line">     Perl: <span class="string">'use.perl.org'</span> &#125; &#125;</div></pre></td></tr></table></figure>
<h2 id="五、纯量"><a href="#五、纯量" class="headerlink" title="五、纯量"></a>五、纯量</h2><ul>
<li><p>纯量是最基本的、不可再分的值。以下数据类型都属于 JavaScript 的纯量。</p>
<ul>
<li>字符串</li>
<li>布尔值</li>
<li>整数</li>
<li>浮点数</li>
<li>Null</li>
<li>时间</li>
<li>日期</li>
</ul>
</li>
<li><p>数值直接以字面量的形式表示。</p>
</li>
</ul>
<pre><code>number: 12.30
</code></pre><ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; number: 12.30 &#125;</div></pre></td></tr></table></figure>
<ul>
<li>布尔值用<code>true</code>和<code>false</code>表示。</li>
</ul>
<pre><code>isSet: true
</code></pre><ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; isSet: true &#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>null</strong> 用 <code>~</code> 表示。</li>
</ul>
<pre><code>parent: ~ 
</code></pre><ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; parent: null &#125;</div></pre></td></tr></table></figure>
<ul>
<li>时间采用 <code>ISO8601</code> 格式。</li>
</ul>
<pre><code>iso8601: 2001-12-14t21:59:43.10-05:00 
</code></pre><ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; iso8601: new Date(&apos;2001-12-14t21:59:43.10-05:00&apos;) &#125;</div></pre></td></tr></table></figure>
<ul>
<li>日期采用复合 iso8601 格式的年、月、日表示。</li>
</ul>
<pre><code>date: 1976-07-31
</code></pre><ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; date: new Date(&apos;1976-07-31&apos;) &#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>YAML</strong> 允许使用两个感叹号，强制转换数据类型。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">e: !!str 123</div><div class="line">f: !!str true</div></pre></td></tr></table></figure>
<ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; e: &apos;123&apos;, f: &apos;true&apos; &#125;</div></pre></td></tr></table></figure>
<h2 id="六、字符串"><a href="#六、字符串" class="headerlink" title="六、字符串"></a>六、字符串</h2><ul>
<li>字符串是最常见，也是最复杂的一种数据类型。</li>
<li>字符串默认不使用引号表示。</li>
</ul>
<pre><code>str: 这是一行字符串
</code></pre><ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; str: &apos;这是一行字符串&apos; &#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果字符串之中包含空格或特殊字符，需要放在引号之中。</li>
</ul>
<pre><code>str: &apos;内容： 字符串&apos;
</code></pre><ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; str: &apos;内容: 字符串&apos; &#125;</div></pre></td></tr></table></figure>
<ul>
<li>单引号和双引号都可以使用，<strong>双引号不会对特殊字符转义</strong>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s1: &apos;内容\n字符串&apos;</div><div class="line">s2: &quot;内容\n字符串&quot;</div></pre></td></tr></table></figure>
<ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; s1: &apos;内容\\n字符串&apos;, s2: &apos;内容\n字符串&apos; &#125;</div></pre></td></tr></table></figure>
<ul>
<li>单引号之中如果还有单引号，<strong>必须连续使用两个单引号转</strong>义。</li>
</ul>
<pre><code>str: &apos;labor&apos;&apos;s day&apos; 
</code></pre><ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; str: &apos;labor\&apos;s day&apos; &#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格</strong>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">str: 这是一段</div><div class="line">  多行</div><div class="line">  字符串</div></pre></td></tr></table></figure>
<ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; str: &apos;这是一段 多行 字符串&apos; &#125;</div></pre></td></tr></table></figure>
<ul>
<li>多行字符串可以使用|保留换行符，也可以使用&gt;折叠换行。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">this: |</div><div class="line">  Foo</div><div class="line">  Bar</div><div class="line">that: &gt;</div><div class="line">  Foo</div><div class="line">  Bar</div></pre></td></tr></table></figure>
<ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; this: &apos;Foo\nBar\n&apos;, that: &apos;Foo Bar\n&apos; &#125;</div></pre></td></tr></table></figure>
<ul>
<li>表示保留文字块末尾的换行，-表示删除字符串末尾的换行。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">s1: |</div><div class="line">  Foo</div><div class="line"></div><div class="line">s2: |+</div><div class="line">  Foo</div><div class="line"></div><div class="line"></div><div class="line">s3: |-</div><div class="line">  Foo</div></pre></td></tr></table></figure>
<ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; s1: &apos;Foo\n&apos;, s2: &apos;Foo\n\n\n&apos;, s3: &apos;Foo&apos; &#125;</div></pre></td></tr></table></figure>
<ul>
<li>字符串之中可以插入 HTML 标记。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">message: |</div><div class="line"></div><div class="line">  &lt;p style=&quot;color: red&quot;&gt;</div><div class="line">    段落</div><div class="line">  &lt;/p&gt;</div></pre></td></tr></table></figure>
<ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; message: &apos;\n&lt;p style=&quot;color: red&quot;&gt;\n  段落\n&lt;/p&gt;\n&apos; &#125;</div></pre></td></tr></table></figure>
<h2 id="七、引用"><a href="#七、引用" class="headerlink" title="七、引用"></a>七、引用</h2><ul>
<li>锚点<code>&amp;</code>和别名 <code>*</code> ，可以用来引用。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">defaults: &amp;defaults</div><div class="line">  adapter:  postgres</div><div class="line">  host:     localhost</div><div class="line"></div><div class="line">development:</div><div class="line">  database: myapp_development</div><div class="line">  &lt;&lt;: *defaults</div><div class="line"></div><div class="line">test:</div><div class="line">  database: myapp_test</div><div class="line">  &lt;&lt;: *defaults</div></pre></td></tr></table></figure>
<ul>
<li>[x] 等同于下面的代码。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">defaults:</div><div class="line">  adapter:  postgres</div><div class="line">  host:     localhost</div><div class="line"></div><div class="line">development:</div><div class="line">  database: myapp_development</div><div class="line">  adapter:  postgres</div><div class="line">  host:     localhost</div><div class="line"></div><div class="line">test:</div><div class="line">  database: myapp_test</div><div class="line">  adapter:  postgres</div><div class="line">  host:     localhost</div></pre></td></tr></table></figure>
<ul>
<li><code>&amp;</code> 用来建立锚点（defaults），<code>&lt;&lt;</code>表示合并到当前数据，<code>*</code> 用来引用锚点。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- &amp;showell Steve </div><div class="line">- Clark </div><div class="line">- Brian </div><div class="line">- Oren </div><div class="line">- *showell</div></pre></td></tr></table></figure>
<ul>
<li>[x] 转为 JavaScript 如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ &apos;Steve&apos;, &apos;Clark&apos;, &apos;Brian&apos;, &apos;Oren&apos;, &apos;Steve&apos; ]</div></pre></td></tr></table></figure>
<h2 id="八、函数和正则表达式的转换"><a href="#八、函数和正则表达式的转换" class="headerlink" title="八、函数和正则表达式的转换"></a>八、函数和正则表达式的转换</h2><ul>
<li>这是 <code>JS-YAML</code> 库特有的功能，可以把函数和正则表达式转为字符串。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># example.yml</div><div class="line">——————————————————————————————————</div><div class="line">|   fn: function () &#123; return 1 &#125;  |</div><div class="line">|   reg: /test/                   |</div><div class="line">———————————————————————————————————</div></pre></td></tr></table></figure>
<ul>
<li>[x] 解析上面的 yml 文件的代码如下。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var yaml = require(&apos;js-yaml&apos;);</div><div class="line">var fs   = require(&apos;fs&apos;);</div><div class="line"></div><div class="line">try &#123;</div><div class="line">  var doc = yaml.load(</div><div class="line">    fs.readFileSync(&apos;./example.yml&apos;, &apos;utf8&apos;)</div><div class="line">  );</div><div class="line">  console.log(doc);</div><div class="line">&#125; catch (e) &#123;</div><div class="line">  console.log(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>[x] 从 JavaScript 对象还原到 yaml 文件的代码如下。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var yaml = require(&apos;js-yaml&apos;);</div><div class="line">var fs   = require(&apos;fs&apos;);</div><div class="line"></div><div class="line">var obj = &#123;</div><div class="line">  fn: function () &#123; return 1 &#125;,</div><div class="line">  reg: /test/</div><div class="line">&#125;;</div><div class="line"></div><div class="line">try &#123;</div><div class="line">  fs.writeFileSync(</div><div class="line">    &apos;./example.yml&apos;,</div><div class="line">    yaml.dump(obj),</div><div class="line">    &apos;utf8&apos;</div><div class="line">  );</div><div class="line">&#125; catch (e) &#123;</div><div class="line">  console.log(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Thymeleaf模板]]></title>
      <url>/2016/08/15/160815_Thymeleaf/</url>
      <content type="html"><![CDATA[<h2 id="Thymeleaf模板"><a href="#Thymeleaf模板" class="headerlink" title="Thymeleaf模板"></a>Thymeleaf模板</h2><p><img src="http://ww1.sinaimg.cn/large/610dc034jw1f4kron1wqaj20ia0rf436.jpg" alt="0606"></p>
<a id="more"></a>
<h2 id="Thymeleaf模板-1"><a href="#Thymeleaf模板-1" class="headerlink" title="Thymeleaf模板"></a>Thymeleaf模板</h2><h3 id="访问静态资源"><a href="#访问静态资源" class="headerlink" title="访问静态资源"></a>访问静态资源</h3><ul>
<li>通过<code>@{}</code>引用web静态资源。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;link th:src=&quot;@&#123;bootstrap/css/bootstap.css&#125;&quot;</div><div class="line">&lt;script th:src=&quot;@&#123;bootstrap/js/bootstap.js&#125;&quot;</div></pre></td></tr></table></figure>
<h3 id="访问model中的数据"><a href="#访问model中的数据" class="headerlink" title="访问model中的数据"></a>访问<code>model</code>中的数据</h3><ul>
<li>通过<code>${}</code>访问model中的属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;span th:text=&quot;$&#123;singlePerson.name&#125;&quot;&gt;&lt;/span&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>需要处理的动态内容要加上<code>th：</code>前缀</p>
</blockquote>
<h3 id="Thymeleaf中的迭代"><a href="#Thymeleaf中的迭代" class="headerlink" title="Thymeleaf中的迭代"></a>Thymeleaf中的迭代</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;li class=&quot;list-group&quot; th:each=&quot;person:$&#123;person&#125;&quot;&gt;</div><div class="line">    &lt;span th:text=&quot;$&#123;person.name&#125;&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span th:text=&quot;$&#123;person.age&#125;&quot;&gt;&lt;/span&gt;</div></pre></td></tr></table></figure>
<h3 id="数据判断"><a href="#数据判断" class="headerlink" title="数据判断"></a>数据判断</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div th:if=&quot;$&#123; not #lists.isEmpty(people) &#125;&quot;&gt;</div><div class="line">    ...</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意</p>
</blockquote>
<ul>
<li>通过<code>${ not #lists.isEmpty(people)  }</code>表达式判断people是否为空。</li>
<li><code>Thymeleaf</code> 支持 <code>&gt;</code>、 <code>&lt;</code>、 <code>&gt;=</code>、 <code>&lt;=</code>、 <code>==</code>、 <code>!=</code> 作为比较条件，同时也支持将<code>SpringEL</code>表达式用于条件中。</li>
<li>其中与非格式为<code>${ not #lists.isEmpty(要判断的对象) }</code></li>
</ul>
<h3 id="在-Javascript-中访问-model"><a href="#在-Javascript-中访问-model" class="headerlink" title="在 Javascript 中访问 model"></a>在 Javascript 中访问 model</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script th:inline=&quot;javascript&quot;&gt;</div><div class="line">    var single = [[$&#123;person&#125;]];</div><div class="line">    confole.log(single.name+&quot;/&quot;+single.age);</div></pre></td></tr></table></figure>
<ul>
<li>通过 <code>th:inline=&quot;javascript&quot;</code> 添加到script标签，这样javascript代码即可访问model中的属性</li>
<li><p>通过<code>[[${ ... }]]</code>格式获得实际的值</p>
</li>
<li><p>还有一种是需要在html里访问model的属性</p>
</li>
<li>需要在列表后每一行后面的按钮获得model中的值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;li class=&quot;list-group&quot; th:each=&quot;person:$&#123;person&#125;&quot;&gt;</div><div class="line">    &lt;span th:text=&quot;$&#123;person.name&#125;&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;button class=&quot;ben&quot; th:onclick=&quot;getName(\&apos;&apos; + $&#123;person.name&#125; + &apos;\&apos;)&quot;&gt;获得名字&lt;/button&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意格式：</p>
</blockquote>
<pre><code>`th:onclick = &quot;getName(\&apos;&apos; + ${person.name } \&apos;&apos;)&quot;`
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot]]></title>
      <url>/2016/08/12/160812_spring_boot/</url>
      <content type="html"><![CDATA[<h2 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h2><p><img src="http://ww3.sinaimg.cn/large/610dc034jw1f48mxqcvkvj20lt0pyaed.jpg" alt="0526"></p>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[好用的java模板引擎Beetl]]></title>
      <url>/2016/08/11/160811_beetl/</url>
      <content type="html"><![CDATA[<h2 id="好用的java模板引擎Beetl"><a href="#好用的java模板引擎Beetl" class="headerlink" title="好用的java模板引擎Beetl"></a>好用的java模板引擎Beetl</h2><p><img src="http://ww2.sinaimg.cn/large/610dc034jw1f6pnw6i7lqj20u00u0tbr.jpg" alt="0811"></p>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Guava来编写优雅的代码]]></title>
      <url>/2016/08/10/160810_guava_read/</url>
      <content type="html"><![CDATA[<h2 id="用Guava来编写优雅的代码"><a href="#用Guava来编写优雅的代码" class="headerlink" title="用Guava来编写优雅的代码"></a>用Guava来编写优雅的代码</h2><p><img src="http://ww1.sinaimg.cn/large/610dc034jw1f6nbm78pplj20dw0i2djy.jpg" alt="0809"></p>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Intellij idea的快捷键]]></title>
      <url>/2016/08/08/160808_idea_shortcutKeys/</url>
      <content type="html"><![CDATA[<h2 id="Intellij-idea的快捷键"><a href="#Intellij-idea的快捷键" class="headerlink" title="Intellij idea的快捷键"></a>Intellij idea的快捷键</h2><p><img src="http://ww4.sinaimg.cn/large/610dc034jw1f3zen8idmkj20dw0kun0i.jpg" alt="0518"></p>
<a id="more"></a>
<h2 id="自己觉得有用个快捷键总结"><a href="#自己觉得有用个快捷键总结" class="headerlink" title="自己觉得有用个快捷键总结"></a>自己觉得有用个快捷键总结</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>解释</th>
<th>详细解释</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Ctrl + B</code></td>
<td>转到声明</td>
<td>快速打开光标处的类或方法</td>
</tr>
<tr>
<td><code>Ctrl + Alt + B</code></td>
<td>转向定义</td>
<td>通俗点说从接口跳转到实现类</td>
</tr>
<tr>
<td><code>Ctrl + U</code></td>
<td>转向父类方法或父类</td>
<td>从实现类跳转到接口</td>
</tr>
<tr>
<td><code>Ctrl + Alt + F7</code></td>
<td>查看一个方法或变量被使用的所有地方</td>
<td>弹出一个包含所有使用处的列表，很容易地转向任意一个</td>
</tr>
<tr>
<td><code>Ctrl + N</code></td>
<td>转到类</td>
<td>可以让你使用大写字母和<code>*</code>通配符搜索类名</td>
</tr>
<tr>
<td><code>Ctrl + E</code></td>
<td>最近修改文件</td>
<td>弹出一个窗口包含了最近最常使用的15个文件</td>
</tr>
<tr>
<td><code>Ctrl + F6</code></td>
<td>改变方法签名</td>
<td>要选中方法名,输入快捷键，改变签名</td>
</tr>
<tr>
<td><code>Shift + F6</code></td>
<td>改变方法签名</td>
<td>要选中方法名,输入快捷键，改变签名</td>
</tr>
<tr>
<td><code>ALT  + F7</code></td>
<td>搜索对象被引用的地方</td>
<td>查找整个工程中使用地某一个类、方法或者变量的位置</td>
</tr>
<tr>
<td><code>Ctrl + F7</code></td>
<td>搜索对象在当前文件被引用的地方</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + ~</code></td>
<td>View Mode 审查代码很叼</td>
<td>快速切换方案（界面外观、代码风格、快捷键映射等菜单</td>
</tr>
<tr>
<td><code>Ctrl + Shift + C</code></td>
<td>复制当前文件的全路径</td>
<td></td>
</tr>
<tr>
<td><code>Alt +　2</code></td>
<td>查看收藏(当前书签、断点</td>
<td></td>
</tr>
<tr>
<td><code>Alt +　6</code></td>
<td>查看TODO</td>
<td></td>
</tr>
<tr>
<td><code>Alt +　7</code></td>
<td>查看当前类结构</td>
<td></td>
</tr>
<tr>
<td><code>Shift + 鼠标滚轮</code></td>
<td>左右移动</td>
<td>可以查看横向长度过长的代码</td>
</tr>
<tr>
<td><code>Alt + Home</code>再<code>Alt + insert</code></td>
<td>快速创建文件</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Shift + space</code></td>
<td>代码提示</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Shift + N</code></td>
<td>查找一个文件</td>
<td>可以勾选设置非项目文件也可以,还有旁边筛选器的使用</td>
</tr>
<tr>
<td><code>Ctrl + 单击窗口的文件标题</code></td>
<td>在资源浏览器中显示此文件</td>
<td>弹出该文件路径,可通过此打开文件所在地相当于<code>Ctrl+alt+F12</code></td>
</tr>
<tr>
<td><code>Ctrl+c 或 Ctrl+x</code></td>
<td>复制行,剪切行</td>
<td>光标任意行位置,按下就可以剪切行，复制行</td>
</tr>
<tr>
<td><code>Ctrl + Shift + S</code></td>
<td>在某些情况下,这个模糊查询是很无敌的</td>
<td>（类似正则，你可以这样理解）</td>
</tr>
<tr>
<td><code>Ctrl + Shift + I</code></td>
<td>(视图=&gt;快速定义)</td>
<td>快速查看方法或类的定义,无需在新的编辑页面打开它。</td>
</tr>
<tr>
<td><code>Ctrl + T</code></td>
<td>更新当前窗口下的所有项目</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + H</code></td>
<td>显示类结构图</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + P</code></td>
<td>可以显示参数信息</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl +</code>  <code>[</code> 或 <code>]</code></td>
<td>可以跳到大括号的开头结尾</td>
<td></td>
</tr>
<tr>
<td><strong>版本控制</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Alt + ~</code></td>
<td>版本及控制操作菜单</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + K</code></td>
<td>提交更改</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + T</code></td>
<td>更新项目</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Alt + Shift + D</code></td>
<td>显示变化</td>
<td></td>
</tr>
<tr>
<td><strong>高亮</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + F</code></td>
<td>选中的文字,高亮显示</td>
<td>选中的文字,高亮显示 上下跳到下一个或者上一个</td>
</tr>
<tr>
<td><code>F2 或 Shift + F2</code></td>
<td>高亮错误或警告快速定位</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Shift + F7</code></td>
<td>高亮显示多个关键字</td>
<td>高亮显示光标停留处的多个关键字</td>
</tr>
<tr>
<td><strong>断点</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + F2</code></td>
<td>停止</td>
<td></td>
</tr>
<tr>
<td><code>Alt + Shift + F9</code></td>
<td>选择 Debug</td>
<td></td>
</tr>
<tr>
<td><code>Alt + Shift + F10</code></td>
<td>选择 Run</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Shift + F9</code></td>
<td>编译</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Shift + F10</code></td>
<td>运行</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Shift + F8</code></td>
<td>查看断点</td>
<td></td>
</tr>
<tr>
<td><code>F8</code></td>
<td>步过</td>
<td></td>
</tr>
<tr>
<td><code>F7</code></td>
<td>步入</td>
<td></td>
</tr>
<tr>
<td><code>Shift + F7</code></td>
<td>智能步入</td>
<td></td>
</tr>
<tr>
<td><code>Shift + F8</code></td>
<td>步出</td>
<td></td>
</tr>
<tr>
<td><code>Alt + Shift + F8</code></td>
<td>强制步过</td>
<td></td>
</tr>
<tr>
<td><code>Alt + Shift + F7</code></td>
<td>强制步入</td>
<td></td>
</tr>
<tr>
<td><code>Alt + F9</code></td>
<td>运行至光标处</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl+Alt+F9</code></td>
<td>强制运行至光标处</td>
<td></td>
</tr>
<tr>
<td><code>F9</code></td>
<td>恢复程序</td>
<td></td>
</tr>
<tr>
<td><code>Alt + F10</code></td>
<td>定位到断点</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + F8</code></td>
<td>切换行断点</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + F9</code></td>
<td>生成项目</td>
<td></td>
</tr>
<tr>
<td><strong>重构</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Ctrl+Alt+Shift+T</code></td>
<td>弹出重构菜单</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Alt + N</code></td>
<td>内联</td>
<td></td>
</tr>
<tr>
<td><code>Alt + Delete</code></td>
<td>安全删除</td>
<td></td>
</tr>
<tr>
<td><code>F5</code></td>
<td>复制</td>
<td></td>
</tr>
<tr>
<td><code>F6</code></td>
<td>移动</td>
<td></td>
</tr>
<tr>
<td><code>Shift + F6</code></td>
<td>重命名</td>
<td></td>
</tr>
<tr>
<td><strong>其他快捷方式</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Shift + U</code></td>
<td>切换大小写</td>
<td>切换大小写</td>
</tr>
<tr>
<td><code>CTRL + ALT + F12</code></td>
<td>资源管理器打开文件夹</td>
<td>资源管理器打开文件夹</td>
</tr>
<tr>
<td><code>Shift + Alt + Insert</code></td>
<td>竖行 编辑模式</td>
<td>多行编辑和按住鼠标<code>中键</code>下拉一样的效果</td>
</tr>
<tr>
<td><code>Shift + F6</code></td>
<td>显示类结构图</td>
<td>切换代码上方的<code>tab</code></td>
</tr>
<tr>
<td><code>Ctrl + Q</code></td>
<td>显示注释文档</td>
<td></td>
</tr>
<tr>
<td><code>Shif + 左键</code></td>
<td>关闭<code>tab</code>栏</td>
<td>和<code>Chrome</code> 鼠标中间点击关闭<code>tab</code>一样</td>
</tr>
<tr>
<td><code>Ctrl + Tab</code></td>
<td>转到下一个拆分器<code>Swicher</code></td>
<td>调出<code>swicher</code>后,按<code>Tab</code>是下一个，<code>Shift + Tab</code>上一个</td>
</tr>
<tr>
<td><code>Ctrl + Shift + Tab</code></td>
<td>转到上一个拆分器</td>
<td></td>
</tr>
<tr>
<td><code>Shift + Esc</code></td>
<td>光标返回编辑框,关闭无用的窗口</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + F4</code></td>
<td>关闭窗口</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Alt + Shift + C</code></td>
<td>复制引用</td>
<td>必须选中类名或者方法名</td>
</tr>
<tr>
<td><code>Ctrl + Shift + M</code></td>
<td></td>
<td>选中括号的时候按下可直接跳转到括号结尾处</td>
</tr>
<tr>
<td><strong>复制快捷方式</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>F5</code></td>
<td>拷贝文件快捷方式</td>
<td></td>
</tr>
<tr>
<td><code>CTRL + D</code></td>
<td>复制行</td>
<td></td>
</tr>
<tr>
<td><code>CTRL + X</code></td>
<td>剪切,删除行</td>
<td></td>
</tr>
<tr>
<td><code>CTRL + Shift + V</code></td>
<td>可以复制多个文本</td>
<td></td>
</tr>
<tr>
<td><strong>自动代码</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>ALT+回车</code></td>
<td>导入包,自动修正</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Alt + L</code></td>
<td>格式化代码</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Alt + I</code></td>
<td>自 动缩进</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Alt + O</code></td>
<td>优化导入的类和包</td>
<td></td>
</tr>
<tr>
<td><code>Alt + Insert</code></td>
<td>生成代码(如GET,SET方法,构造函数等)</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + E 或 Alt + Shift + C</code></td>
<td>最近更改的代码</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Shift + Space</code></td>
<td>自动补全代码</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Space</code></td>
<td>代码提示</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + ALT + Space</code></td>
<td>类名或接口名提示</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + P</code></td>
<td>方法参数提示</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + J</code></td>
<td>自动代码</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Alt + T</code></td>
<td>把选中的代码放在Tty{} If{} Else{}里</td>
<td></td>
</tr>
<tr>
<td><strong>查询快捷键</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + N</code></td>
<td>查找类</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Shift + N</code></td>
<td>查找文件</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Shift + Alt + N</code></td>
<td>查找类中的方法或变量</td>
<td></td>
</tr>
<tr>
<td><code>CIRL + B</code></td>
<td>找变量的来源</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Alt + B</code></td>
<td>找所有的子类</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Shift + B</code></td>
<td>找变量的 类</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + G</code></td>
<td>定位行</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + F</code></td>
<td>在当前窗口查找文本</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Shift + F</code></td>
<td>在指定窗口查找文本</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + R</code></td>
<td>在当前窗口替换文本</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Shift + R</code></td>
<td>在指定窗口替换文本</td>
<td></td>
</tr>
<tr>
<td><code>Alt + Shift + C</code></td>
<td>找修改的文件</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + E</code></td>
<td>最近打开的文件</td>
<td></td>
</tr>
<tr>
<td><code>F3</code></td>
<td>向下查找关键字出现位置</td>
<td></td>
</tr>
<tr>
<td><code>Shift + F3</code></td>
<td>向上一个关键字出现位置</td>
<td></td>
</tr>
<tr>
<td><code>F4</code></td>
<td>查找变量来源</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Alt + F7</code></td>
<td>选中的字符 查找工程出现的地方</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Shift + O</code></td>
<td>弹出显示查找内容</td>
<td></td>
</tr>
<tr>
<td><strong>Idea 快捷键总结</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Enter</code></td>
<td>上插一行</td>
<td></td>
</tr>
<tr>
<td><code>Shift + Enter</code></td>
<td>向下插一行</td>
<td></td>
</tr>
<tr>
<td><code>Alt + Home</code></td>
<td>跳转到导航栏</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Alt + Shift + S</code></td>
<td>打开当前项目/模块属性</td>
<td>等同于选中项目后<code>F4</code></td>
</tr>
<tr>
<td><code>Ctrl + G</code></td>
<td>定位行</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + I</code></td>
<td>实现方法</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + W</code></td>
<td>以选择单词继而语句继而行继而函数</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Shift + W</code></td>
<td>取消选择光标所在词</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Shift + J</code></td>
<td>整合两行</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + O</code></td>
<td>重写方法</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + Alt + J</code></td>
<td>用动态模板环绕</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl + J</code></td>
<td>自动代码</td>
<td>例如自己添加的<code>amd</code></td>
</tr>
<tr>
<td><code>！</code></td>
<td>否定完成，输入表达式时按 <code>！</code>键</td>
<td>例如<code>3==2！</code> 按下<code>Tab</code>键，自动变成<code>3!=2</code></td>
</tr>
<tr>
<td><code>Alt +　1</code></td>
<td>查看当前类结构</td>
<td></td>
</tr>
<tr>
<td><code>Shift+F12</code></td>
<td>还原默认布局</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl+Shift+F12</code></td>
<td>隐藏/恢复所有窗口</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim]]></title>
      <url>/2016/08/06/160806_vim/</url>
      <content type="html"><![CDATA[<h2 id="Vim使用笔记"><a href="#Vim使用笔记" class="headerlink" title="Vim使用笔记"></a>Vim使用笔记</h2><p><img src="http://ww4.sinaimg.cn/large/610dc034jw1f47gspphiyj20ia0rf76w.jpg" alt="0525"></p>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【源码阅读】Spring源码阅读]]></title>
      <url>/2016/08/04/160804_sc_spring/</url>
      <content type="html"><![CDATA[<h2 id="Spring源码阅读"><a href="#Spring源码阅读" class="headerlink" title="Spring源码阅读"></a>Spring源码阅读</h2><p><img src="http://ww3.sinaimg.cn/large/610dc034jw1f6gcxc1t7vj20hs0hsgo1.jpg" alt="image"></p>
<a id="more"></a>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入分析Java Web]]></title>
      <url>/2016/08/03/160803_analyze_javaweb/</url>
      <content type="html"><![CDATA[<h2 id="深入分析JavaWeb技术内幕"><a href="#深入分析JavaWeb技术内幕" class="headerlink" title="深入分析JavaWeb技术内幕"></a>深入分析JavaWeb技术内幕</h2><p><img src="http://ww3.sinaimg.cn/large/c85e4a5cjw1f671i8gt1rj20vy0vydsz.jpg" alt="image"></p>
<a id="more"></a>
<h3 id="如何发起一个请求"><a href="#如何发起一个请求" class="headerlink" title="如何发起一个请求"></a>如何发起一个请求</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式之禅]]></title>
      <url>/2016/08/02/160802_designpatern_read/</url>
      <content type="html"><![CDATA[<h2 id="【读书笔记】设计模式之禅"><a href="#【读书笔记】设计模式之禅" class="headerlink" title="【读书笔记】设计模式之禅"></a>【读书笔记】设计模式之禅</h2><p><img src="http://ww3.sinaimg.cn/large/610dc034jw1f69c9e22xjj20u011hjuu.jpg" alt="07月25日"></p>
<a id="more"></a>
<h2 id="六大设计原则"><a href="#六大设计原则" class="headerlink" title="六大设计原则"></a>六大设计原则</h2><ul>
<li>单一职责原则</li>
<li>里氏替换原则</li>
<li>依赖导致原则</li>
<li>接口隔离原则</li>
<li>迪米特法则</li>
<li>开闭原则</li>
</ul>
<h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><ul>
<li>接口、类、方法尽可能做一件事情。</li>
<li>单一职责最难划分的就是职责。一个职责一个接口，但是职责没有标准。</li>
<li>对于接口，我们在设计的时候一定要做到单一</li>
<li>类的话，具体情况具体看</li>
</ul>
<blockquote>
<p>我的建议是接口一定要做到单一职责，类的设计尽量做到只有一个原因引起变化</p>
</blockquote>
<ul>
<li>单一职责原则的好处<ol>
<li>类的复杂性降低，实现什么职责都有清晰明确的定义</li>
<li>可读性提高，复杂性降低，那当然可读性提高了</li>
<li>可维护性提高，可读性提高，那当然更容易维护了</li>
<li>变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修<br>改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有非常大<br>的帮助</li>
</ol>
</li>
</ul>
<h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><ul>
<li>在面向对象的语言中，<strong>继承</strong>不可或缺的，优秀的语言机制</li>
</ul>
<blockquote>
<p>优点如下：</p>
</blockquote>
<ol>
<li>代码共享，减少创建类的工作量，每个子类都拥有父类的方法和属性</li>
<li>提高代码的重用性</li>
<li>子类可以形似父类，但又异于父类，“龙生龙，凤生凤，老鼠生来会打洞”是说子拥有父的“种”，“世界上没有两片完全相同的叶子”是指明子与父的不同</li>
<li>提高代码的可扩展性，实现父类的方法就可以“为所欲为”了，君不见很多开源框架的扩展接口都是通过继承父类来完成的</li>
<li>提高产品或项目的开放性</li>
</ol>
<blockquote>
<p>缺点如下：</p>
</blockquote>
<ol>
<li>继承是侵入性的。<ul>
<li>只要继承，就必须拥有父类的所有属性和方法</li>
</ul>
</li>
<li>降低代码的灵活性。<ul>
<li>子类必须拥有父类的属性和方法，让子类自由的世界中多了些约束；</li>
</ul>
</li>
<li>增强了耦合性<ul>
<li>当父类的常量、变量和方法被修改时，需要考虑子类的修改，而且在缺乏规范的环境下，这种修改可能会导致大量代码需要重构</li>
</ul>
</li>
</ol>
<h4 id="什么是里氏替换原则"><a href="#什么是里氏替换原则" class="headerlink" title="什么是里氏替换原则"></a>什么是里氏替换原则</h4><ul>
<li>第一种定义：<ul>
<li>如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型S是类型T的子类型 </li>
</ul>
</li>
<li>第二种定义 <ul>
<li>所有引用基类的地方必须能透明地使用其子类的<br>对象</li>
</ul>
</li>
</ul>
<blockquote>
<p>第二个定义是最清晰明确的，通俗点讲，只要父类能出现的地方子类就可以出现，而且替换为子类也不会产生任何错误或异常，使用者可能根本就不需要知道是父类还是子类。但是，反过来就不行了，有子类出现的地方，父类未必就能适应<br>父类有的子类有，子类有的父类不一定有</p>
</blockquote>
<ol>
<li>子类必须完全实现父类的方法</li>
<li>子类可以有自己的个性</li>
<li>覆盖或实现父类的方法时输入参数可以被放大</li>
<li>覆写或实现父类的方法时输出结果可以被缩小</li>
</ol>
<blockquote>
<p>在类中调用其他类时务必要使用父类或接口，如果不能使用父类或接口，则说明类的设计已经违背了LSP原则。</p>
</blockquote>
<h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><h3 id="依赖倒置原则的定义"><a href="#依赖倒置原则的定义" class="headerlink" title="依赖倒置原则的定义"></a>依赖倒置原则的定义</h3><ul>
<li>高层模块不应该依赖低层模块，两者都应该依赖其抽象；</li>
<li>抽象不应该依赖细节；</li>
<li>细节应该依赖抽象。</li>
</ul>
<h3 id="依赖倒置原则在Java语言中的表现就是："><a href="#依赖倒置原则在Java语言中的表现就是：" class="headerlink" title="依赖倒置原则在Java语言中的表现就是："></a>依赖倒置原则在Java语言中的表现就是：</h3><ul>
<li>模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的</li>
<li>接口或抽象类不依赖于实现类；</li>
<li>实现类依赖接口或抽象类</li>
</ul>
<blockquote>
<p>更加精简的定义就是“面向接口编程”——OOD（Object-Oriented Design，面向对象设计）的精髓之一。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ArrayList源码阅读]]></title>
      <url>/2016/08/01/160801_sc_arraylist/</url>
      <content type="html"><![CDATA[<h2 id="ArrayList源码阅读【JDK8】"><a href="#ArrayList源码阅读【JDK8】" class="headerlink" title="ArrayList源码阅读【JDK8】"></a>ArrayList源码阅读【JDK8】</h2><p><img src="http://ww2.sinaimg.cn/large/610dc034jw1f65f0oqodoj20qo0hntc9.jpg" alt="07月25日"></p>
<a id="more"></a>
<h3 id="arrayList的类图"><a href="#arrayList的类图" class="headerlink" title="arrayList的类图"></a>arrayList的类图</h3><p><img src="http://7xjlkb.com1.z0.glb.clouddn.com/sourcecode_jdk8_arraylist.png" alt="image"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RSA加密签名]]></title>
      <url>/2016/07/25/160725_rsa_algorithm/</url>
      <content type="html"><![CDATA[<h2 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h2><p><img src="http://ww2.sinaimg.cn/large/c85e4a5cgw1f62hzfvzwwj20hs0qogpo.jpg" alt="就问你美不美"></p>
<a id="more"></a>
<h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><ul>
<li>(1) 甲方选择某一种加密规则，对信息进行加密；　　</li>
<li>(2) 乙方使用同一种规则，对信息进行解密。 </li>
<li>(3) 加密和解秘使用同一种规则，对信息进行解谜</li>
</ul>
<blockquote>
<p>这种加密模式有一个最大弱点：甲方必须把加密规则告诉乙方，否则无法解密。保存和传递密钥，就成了最头疼的问题。    </p>
</blockquote>
<h3 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h3><ul>
<li>(1)乙方生成两把密钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。</li>
<li>(2) 甲方获取乙方的公钥，然后用它对信息加密。</li>
<li>(3) 乙方得到加密后的信息，用私钥解密。</li>
</ul>
<blockquote>
<p>如果公钥加密的信息只有私钥解得开，那么只要私钥不泄漏，通信就是安全的。</p>
</blockquote>
<ul>
<li>三位数学家Rivest、Shamir 和 Adleman 设计了一种算法，这种算法用他门三个人的名字命名，叫做RSA算法。</li>
</ul>
<h3 id="你需要知道的数论知识"><a href="#你需要知道的数论知识" class="headerlink" title="你需要知道的数论知识"></a>你需要知道的数论知识</h3><ul>
<li>(1) 互质关系<ul>
<li>如果两个正整数，除了1以外，没有其他公因子，我们就称这两个数是互质关系（coprime）。</li>
</ul>
</li>
<li>(2) 欧拉函数</li>
<li>(3) 欧拉定理<ul>
<li>如果两个正整数a和n互质，则n的欧拉函数 φ(n)可以让下面的等式成立：</li>
<li><img src="http://chart.googleapis.com/chart?cht=tx&amp;chl=a%5E%7B%5Cphi(n" alt="image">%7D%5Cequiv%5C1%20(mod%5C%20n)&amp;chs=60)</li>
</ul>
</li>
<li>模反元素<ul>
<li>如果两个正整数a和n互质，那么一定可以找到整数b，使得 ab-1被n整除，或者说ab被n除的余数是1。</li>
<li><img src="http://chart.googleapis.com/chart?cht=tx&amp;chl=ab%20%5Cequiv%201%5C%20(mod%5C%20n" alt="image">&amp;chs=40)</li>
<li>这时，b就叫做a的”模反元素”。</li>
</ul>
</li>
</ul>
<h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><ul>
<li>任意给定正整数<code>n</code>，请问在小于等于<code>n</code>的正整数之中，有多少个数与<code>n</code>构成互质关系，计算这个值的方法叫做<code>欧拉函数</code></li>
<li>以<code>φ(n)</code>表示。<ul>
<li>在1到8之中，与8形成互质关系的是1、3、5、7，所以 <code>φ(8) = 4</code>。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><code>第一种情况:如果是1</code><ul>
<li>如果<code>n=1</code>，则 <code>φ(1) = 1</code> 。因为1与任何数（包括自身）都构成互质关系。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><code>第二种情况：如果是质数</code><ul>
<li>如果<code>n</code>是质数，则 <code>φ(n)=n-1</code>。</li>
<li>因为质数与小于它的每一个数，都构成互质关系。比如<code>5</code>与<code>1</code>、<code>2</code>、<code>3</code>、<code>4</code>都构成互质关系。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><code>第三种情况:如果是质数的某一个次方</code><ul>
<li>如果<code>n</code>是质数的某一个次方，即 <code>n = p^k</code>（<code>p</code>为质数，<code>k</code>为大于等于1的整数），则</li>
<li><img src="http://chart.googleapis.com/chart?cht=tx&amp;chl=%5Cphi(p%5E%7Bk%7D" alt="image">%3Dp%5E%7Bk%7D-p%5E%7Bk-1%7D&amp;chs=40)</li>
<li>比如 φ(8) = φ(2^3) =2^3 - 2^2 = 8 -4 = 4。</li>
<li>这是因为只有当一个数不包含质数<code>p</code>，才可能与n互质。而包含质数<code>p</code>的数一共有<code>p^(k-1)</code>个，即1×p、2×p、3×p、…、p^(k-1)×p，把它们去除，剩下的就是与<code>n</code>互质的数。</li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><code>第四种情况：如果n可以分解成两个互质的整数之积</code></p>
</blockquote>
<pre><code>+ 如果n可以分解成两个互质的整数之积

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　n = p1 × p2</div></pre></td></tr></table></figure>


+ 则

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　φ(n) = φ(p1p2) = φ(p1)φ(p2)</div></pre></td></tr></table></figure>

+ 积的欧拉函数等于各个因子的欧拉函数之积。比如，φ(56)=φ(8×7)=φ(8)×φ(7)=4×6=24。
</code></pre><h3 id="模反元素"><a href="#模反元素" class="headerlink" title="模反元素"></a>模反元素</h3><ul>
<li>如果两个正整数a和n互质，那么一定可以找到整数b，使得 ab-1 被n整除，或者说ab被n除的余数是1，也就是<code>ab / n = 1</code></li>
<li><img src="http://chart.googleapis.com/chart?cht=tx&amp;chl=ab%20%5Cequiv%201%5C%20(mod%5C%20n" alt="image">&amp;chs=40)</li>
<li>欧拉定理可以用来证明模反元素必然存在。</li>
<li><img src="http://chart.googleapis.com/chart?cht=tx&amp;chl=a%5E%7B%5Cphi(n" alt="image">%7D%3Da%5Ctimes%20a%5E%7B%5Cphi(n)-1%7D%5Cequiv%5C%201%5C%20(mod%5C%20n)%20&amp;chs=40)</li>
<li>可以看到，a的 φ(n)-1 次方，就是a的模反元素。</li>
<li>比如，3和11互质，那么3的模反元素就是4，因为 (3 × 4)-1 可以被11整除。显然，模反元素不止一个， 4加减11的整数倍都是3的模反元素 {…,-18,-7,4,15,26,…}，即如果b是a的模反元素，则 b+kn 都是a的模反元素。</li>
<li>欧拉定理可以用来证明模反元素必然存在。</li>
</ul>
<h3 id="RSA数学原理"><a href="#RSA数学原理" class="headerlink" title="RSA数学原理"></a>RSA数学原理</h3><ul>
<li>RSA加密 密文 = 明文e次方 Mod (就是%取余的意思) N 公钥 （e,N）  </li>
<li>RSA解密 明文 = 密文d次方 Mod (就是%取余的意思) N 私钥 （d,N） </li>
</ul>
<h3 id="jDK实现"><a href="#jDK实现" class="headerlink" title="jDK实现"></a>jDK实现</h3><table>
<thead>
<tr>
<th>算法</th>
<th>密钥长度</th>
<th>默认密钥长度</th>
<th>工作模式</th>
<th>填充方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>RSA</td>
<td>512~65536 <br>(<code>必须64的倍数</code>)</td>
<td>1024</td>
<td>ECB</td>
<td>NoPadding(常用)、<br>PKCS1Padding(常用)、<br>OAEPWITHMD5AndMGF1Padding</td>
</tr>
</tbody>
</table>
<ul>
<li><code>公钥加密私钥解密</code>–主要用来加密</li>
<li><code>私钥加密公钥解密</code>–主要用来数字签名</li>
</ul>
<h2 id="密钥生成步骤"><a href="#密钥生成步骤" class="headerlink" title="密钥生成步骤"></a>密钥生成步骤</h2><p><img src="http://image.beekka.com/blog/201307/bg2013070302.png" alt="image"></p>
<blockquote>
<p><strong>第一步，随机选择两个不相等的质数p和q。</strong></p>
</blockquote>
<ul>
<li>爱丽丝选择了61和53。（实际应用中，这两个质数越大，就越难破解。）</li>
</ul>
<hr>
<blockquote>
<p>第二步，计算p和q的乘积n。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">n = 61×53 = 3233</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>第三步，计算n的欧拉函数φ(n)。</p>
</blockquote>
<ul>
<li>根据公式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　φ(n) = (p-1)(q-1)</div></pre></td></tr></table></figure>
<ul>
<li>爱丽丝算出φ(3233)等于60×52，即3120。</li>
</ul>
<hr>
<blockquote>
<p>第四步，随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质。</p>
</blockquote>
<ul>
<li>爱丽丝就在1到3120之间，随机选择了17。（实际应用中，常常选择65537。）</li>
</ul>
<hr>
<blockquote>
<p>第五步，计算e对于φ(n)的模反元素d。</p>
</blockquote>
<ul>
<li>所谓”模反元素”就是指有一个整数d，可以使得ed被φ(n)除的余数为1。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ed ≡ 1 (mod φ(n))</div></pre></td></tr></table></figure>
<ul>
<li>这个式子等价于</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　ed - 1 = kφ(n)</div></pre></td></tr></table></figure>
<ul>
<li>于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　ex + φ(n)y = 1</div></pre></td></tr></table></figure>
<ul>
<li>已知 e=17, φ(n)=3120</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">17x + 3120y = 1</div></pre></td></tr></table></figure>
<ul>
<li>这个方程可以用”扩展欧几里得算法”求解，此处省略具体过程。总之，爱丽丝算出一组整数解为 (x,y)=(2753,-15)，即 d=2753。</li>
</ul>
<hr>
<blockquote>
<p>第六步，将n和e封装成公钥，n和d封装成私钥。</p>
</blockquote>
<ul>
<li>在爱丽丝的例子中，n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）。<br>实际应用中，公钥和私钥的数据都采用ASN.1格式表达（实例）。</li>
</ul>
<hr>
<blockquote>
<p>七、RSA算法的可靠性</p>
</blockquote>
<ul>
<li>回顾上面的密钥生成步骤，一共出现六个数字：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">p</div><div class="line">q</div><div class="line">n</div><div class="line">φ(n)</div><div class="line">e</div><div class="line">d</div></pre></td></tr></table></figure>
<ul>
<li>这六个数字之中，公钥用到了两个（n和e），其余四个数字都是不公开的。其中最关键的是d，因为n和d组成了私钥，一旦d泄漏，就等于私钥泄漏。</li>
</ul>
<blockquote>
<p>八、加密和解密</p>
</blockquote>
<ul>
<li><p>（1）加密要用公钥 (n,e)</p>
<ul>
<li>假设鲍勃要向爱丽丝发送加密信息m，他就要用爱丽丝的公钥 (n,e) 对m进行加密。这里需要注意，m必须是整数（字符串可以取ascii值或unicode值），且m必须小于n。</li>
<li><p>所谓”加密”，就是算出下式的c： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　me ≡ c (mod n)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>+ 爱丽丝的公钥是 (3233, 17)，鲍勃的m假设是65，那么可以算出下面的等式：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">6517 ≡ 2790 (mod 3233)</div></pre></td></tr></table></figure>


+ 于是，c等于2790，鲍勃就把2790发给了爱丽丝。
</code></pre><ul>
<li><p>（2）解密要用私钥(n,d)</p>
<ul>
<li><p>爱丽丝拿到鲍勃发来的2790以后，就用自己的私钥(3233, 2753) 进行解密。可以证明，下面的等式一定成立：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　cd ≡ m (mod n)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>+ 也就是说，c的d次方除以n的余数为m。现在，c等于2790，私钥是(3233, 2753)，那么，爱丽丝算出

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">27902753 ≡ 65 (mod 3233)</div></pre></td></tr></table></figure>

+ 因此，爱丽丝知道了鲍勃加密前的原文就是65。
</code></pre><hr>
<blockquote>
<p>九、私钥解密的证明</p>
</blockquote>
<ul>
<li><p>最后，我们来证明，为什么用私钥解密，一定可以正确地得到m。也就是证明下面这个式子：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　cd ≡ m (mod n)</div></pre></td></tr></table></figure>
<ul>
<li><p>因为，根据加密规则
　</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　ｍe ≡ c (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>于是，c可以写成下面的形式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　c = me - kn</div></pre></td></tr></table></figure>
</li>
<li><p>将c代入要我们要证明的那个解密规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(me - kn)d ≡ m (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>它等同于求证</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">med ≡ m (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>由于</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ed ≡ 1 (mod φ(n))</div></pre></td></tr></table></figure>
</li>
<li><p>所以</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ed = hφ(n)+1</div></pre></td></tr></table></figure>
</li>
<li><p>将ed代入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mhφ(n)+1 ≡ m (mod n)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>接下来，分成两种情况证明上面这个式子。</p>
</li>
<li><p>（1）m与n互质。</p>
<ul>
<li><p>根据欧拉定理，此时</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　 mφ(n) ≡ 1 (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>得到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(mφ(n))h × m ≡ m (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>原式得到证明。</p>
</li>
</ul>
</li>
<li><p>（2）m与n不是互质关系。<br>此时，由于n等于质数p和q的乘积，所以m必然等于kp或kq。<br>以 m = kp为例，考虑到这时k与q必然互质，则根据欧拉定理，下面的式子成立：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(kp)q-1 ≡ 1 (mod q)</div></pre></td></tr></table></figure>
<ul>
<li><p>进一步得到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　[(kp)q-1]h(p-1) × kp ≡ kp (mod q)</div></pre></td></tr></table></figure>
</li>
<li><p>即</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　(kp)ed ≡ kp (mod q)</div></pre></td></tr></table></figure>
</li>
<li><p>将它改写成下面的等式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　(kp)ed = tq + kp</div></pre></td></tr></table></figure>
</li>
<li><p>这时t必然能被p整除，即 t=t’p</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　(kp)ed = t&apos;pq + kp</div></pre></td></tr></table></figure>
</li>
<li><p>因为 m=kp，n=pq，所以</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　med ≡ m (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>原式得到证明。</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> rsa;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">* --------------------------------------------**********--------------------------------------------</div><div class="line">*</div><div class="line">* 该算法于1977年由美国麻省理工学院MIT(Massachusetts Institute of Technology)的Ronal Rivest，Adi Shamir和Len Adleman三位年轻教授提出，并以三人的姓氏Rivest，Shamir和Adlernan命名为RSA算法，是一个支持变长密钥的公共密钥算法，需要加密的文件快的长度也是可变的!</div><div class="line">*</div><div class="line"> *所谓RSA加密算法，是世界上第一个非对称加密算法，也是数论的第一个实际应用。它的算法如下：</div><div class="line">*</div><div class="line"> 1.找两个非常大的质数p和q（通常p和q都有155十进制位或都有512十进制位）并计算n=pq，k=(p-1)(q-1)。</div><div class="line"></div><div class="line"> 2.将明文编码成整数M，保证M不小于0但是小于n。</div><div class="line"></div><div class="line"> 3.任取一个整数e，保证e和k互质，而且e不小于0但是小于k。加密钥匙（称作公钥）是(e, n)。 【exponent】</div><div class="line"></div><div class="line"> 4.找到一个整数d，使得ed除以k的余数是1（只要e和n满足上面条件，d肯定存在）。解密钥匙（称作密钥）是(d, n)。</div><div class="line"></div><div class="line"> 加密过程： 加密后的编码C等于M的e次方除以n所得的余数。</div><div class="line"></div><div class="line"> 解密过程： 解密后的编码N等于C的d次方除以n所得的余数。</div><div class="line"></div><div class="line"> 只要e、d和n满足上面给定的条件。M等于N。</div><div class="line"></div><div class="line"></div><div class="line"> --------------------------------------------**********--------------------------------------------</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</div><div class="line"><span class="keyword">import</span> javax.crypto.Cipher;</div><div class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</div><div class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</div><div class="line"><span class="keyword">import</span> java.math.BigInteger;</div><div class="line"><span class="keyword">import</span> java.security.*;</div><div class="line"><span class="keyword">import</span> java.security.interfaces.RSAPrivateKey;</div><div class="line"><span class="keyword">import</span> java.security.interfaces.RSAPublicKey;</div><div class="line"><span class="keyword">import</span> java.security.spec.InvalidKeySpecException;</div><div class="line"><span class="keyword">import</span> java.security.spec.RSAPrivateKeySpec;</div><div class="line"><span class="keyword">import</span> java.security.spec.RSAPublicKeySpec;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line">http:<span class="comment">//my.oschina.net/ousinka/blog/338099</span></div></pre></td></tr></table></figure>
<h2 id="加密算法-1"><a href="#加密算法-1" class="headerlink" title="加密算法"></a>加密算法</h2><h3 id="对称加密算法-1"><a href="#对称加密算法-1" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><ul>
<li>(1) 甲方选择某一种加密规则，对信息进行加密；　　</li>
<li>(2) 乙方使用同一种规则，对信息进行解密。 </li>
<li>(3) 加密和解秘使用同一种规则，对信息进行解谜</li>
</ul>
<blockquote>
<p>这种加密模式有一个最大弱点：甲方必须把加密规则告诉乙方，否则无法解密。保存和传递密钥，就成了最头疼的问题。    </p>
</blockquote>
<h3 id="非对称加密算法-1"><a href="#非对称加密算法-1" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h3><ul>
<li>(1)乙方生成两把密钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。</li>
<li>(2) 甲方获取乙方的公钥，然后用它对信息加密。</li>
<li>(3) 乙方得到加密后的信息，用私钥解密。</li>
</ul>
<blockquote>
<p>如果公钥加密的信息只有私钥解得开，那么只要私钥不泄漏，通信就是安全的。</p>
</blockquote>
<ul>
<li>三位数学家Rivest、Shamir 和 Adleman 设计了一种算法，这种算法用他门三个人的名字命名，叫做RSA算法。</li>
</ul>
<h3 id="你需要知道的数论知识-1"><a href="#你需要知道的数论知识-1" class="headerlink" title="你需要知道的数论知识"></a>你需要知道的数论知识</h3><ul>
<li>(1) 互质关系<ul>
<li>如果两个正整数，除了1以外，没有其他公因子，我们就称这两个数是互质关系（coprime）。</li>
</ul>
</li>
<li>(2) 欧拉函数</li>
<li>(3) 欧拉定理<ul>
<li>如果两个正整数a和n互质，则n的欧拉函数 φ(n)可以让下面的等式成立：</li>
<li><img src="http://chart.googleapis.com/chart?cht=tx&amp;chl=a%5E%7B%5Cphi(n" alt="image">%7D%5Cequiv%5C1%20(mod%5C%20n)&amp;chs=60)</li>
</ul>
</li>
<li>模反元素<ul>
<li>如果两个正整数a和n互质，那么一定可以找到整数b，使得 ab-1被n整除，或者说ab被n除的余数是1。</li>
<li><img src="http://chart.googleapis.com/chart?cht=tx&amp;chl=ab%20%5Cequiv%201%5C%20(mod%5C%20n" alt="image">&amp;chs=40)</li>
<li>这时，b就叫做a的”模反元素”。</li>
</ul>
</li>
</ul>
<h3 id="欧拉函数-1"><a href="#欧拉函数-1" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><ul>
<li>任意给定正整数<code>n</code>，请问在小于等于<code>n</code>的正整数之中，有多少个数与<code>n</code>构成互质关系，计算这个值的方法叫做<code>欧拉函数</code></li>
<li>以<code>φ(n)</code>表示。<ul>
<li>在1到8之中，与8形成互质关系的是1、3、5、7，所以 <code>φ(8) = 4</code>。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><code>第一种情况:如果是1</code><ul>
<li>如果<code>n=1</code>，则 <code>φ(1) = 1</code> 。因为1与任何数（包括自身）都构成互质关系。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><code>第二种情况：如果是质数</code><ul>
<li>如果<code>n</code>是质数，则 <code>φ(n)=n-1</code>。</li>
<li>因为质数与小于它的每一个数，都构成互质关系。比如<code>5</code>与<code>1</code>、<code>2</code>、<code>3</code>、<code>4</code>都构成互质关系。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><code>第三种情况:如果是质数的某一个次方</code><ul>
<li>如果<code>n</code>是质数的某一个次方，即 <code>n = p^k</code>（<code>p</code>为质数，<code>k</code>为大于等于1的整数），则</li>
<li><img src="http://chart.googleapis.com/chart?cht=tx&amp;chl=%5Cphi(p%5E%7Bk%7D" alt="image">%3Dp%5E%7Bk%7D-p%5E%7Bk-1%7D&amp;chs=40)</li>
<li>比如 φ(8) = φ(2^3) =2^3 - 2^2 = 8 -4 = 4。</li>
<li>这是因为只有当一个数不包含质数<code>p</code>，才可能与n互质。而包含质数<code>p</code>的数一共有<code>p^(k-1)</code>个，即1×p、2×p、3×p、…、p^(k-1)×p，把它们去除，剩下的就是与<code>n</code>互质的数。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p><code>第四种情况：如果n可以分解成两个互质的整数之积</code></p>
<ul>
<li><p>如果n可以分解成两个互质的整数之积</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　n = p1 × p2</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>+ 则

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　φ(n) = φ(p1p2) = φ(p1)φ(p2)</div></pre></td></tr></table></figure>

+ 积的欧拉函数等于各个因子的欧拉函数之积。比如，φ(56)=φ(8×7)=φ(8)×φ(7)=4×6=24。
</code></pre><h3 id="模反元素-1"><a href="#模反元素-1" class="headerlink" title="模反元素"></a>模反元素</h3><ul>
<li>如果两个正整数a和n互质，那么一定可以找到整数b，使得 ab-1 被n整除，或者说ab被n除的余数是1，也就是<code>ab / n = 1</code></li>
<li><img src="http://chart.googleapis.com/chart?cht=tx&amp;chl=ab%20%5Cequiv%201%5C%20(mod%5C%20n" alt="image">&amp;chs=40)</li>
<li>欧拉定理可以用来证明模反元素必然存在。</li>
<li><img src="http://chart.googleapis.com/chart?cht=tx&amp;chl=a%5E%7B%5Cphi(n" alt="image">%7D%3Da%5Ctimes%20a%5E%7B%5Cphi(n)-1%7D%5Cequiv%5C%201%5C%20(mod%5C%20n)%20&amp;chs=40)</li>
<li>可以看到，a的 φ(n)-1 次方，就是a的模反元素。</li>
<li>比如，3和11互质，那么3的模反元素就是4，因为 (3 × 4)-1 可以被11整除。显然，模反元素不止一个， 4加减11的整数倍都是3的模反元素 {…,-18,-7,4,15,26,…}，即如果b是a的模反元素，则 b+kn 都是a的模反元素。</li>
<li>欧拉定理可以用来证明模反元素必然存在。</li>
</ul>
<h3 id="RSA数学原理-1"><a href="#RSA数学原理-1" class="headerlink" title="RSA数学原理"></a>RSA数学原理</h3><ul>
<li>RSA加密 密文 = 明文e次方 Mod (就是%取余的意思) N 公钥 （e,N）  </li>
<li>RSA解密 明文 = 密文d次方 Mod (就是%取余的意思) N 私钥 （d,N） </li>
</ul>
<h3 id="jDK实现-1"><a href="#jDK实现-1" class="headerlink" title="jDK实现"></a>jDK实现</h3><table>
<thead>
<tr>
<th>算法</th>
<th>密钥长度</th>
<th>默认密钥长度</th>
<th>工作模式</th>
<th>填充方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>RSA</td>
<td>512~65536 <br>(<code>必须64的倍数</code>)</td>
<td>1024</td>
<td>ECB</td>
<td>NoPadding(常用)、<br>PKCS1Padding(常用)、<br>OAEPWITHMD5AndMGF1Padding</td>
</tr>
</tbody>
</table>
<ul>
<li><code>公钥加密私钥解密</code>–主要用来加密</li>
<li><code>私钥加密公钥解密</code>–主要用来数字签名</li>
</ul>
<h2 id="密钥生成步骤-1"><a href="#密钥生成步骤-1" class="headerlink" title="密钥生成步骤"></a>密钥生成步骤</h2><p><img src="http://image.beekka.com/blog/201307/bg2013070302.png" alt="image"></p>
<blockquote>
<p><strong>第一步，随机选择两个不相等的质数p和q。</strong></p>
</blockquote>
<ul>
<li>爱丽丝选择了61和53。（实际应用中，这两个质数越大，就越难破解。）</li>
</ul>
<hr>
<blockquote>
<p>第二步，计算p和q的乘积n。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">n = <span class="number">61</span>×<span class="number">53</span> = <span class="number">3233</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>第三步，计算n的欧拉函数φ(n)。</p>
</blockquote>
<ul>
<li>根据公式</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　φ(n) = (p-<span class="number">1</span>)(q-<span class="number">1</span>)</div></pre></td></tr></table></figure>
<ul>
<li>爱丽丝算出φ(3233)等于60×52，即3120。</li>
</ul>
<hr>
<blockquote>
<p>第四步，随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质。</p>
</blockquote>
<ul>
<li>爱丽丝就在1到3120之间，随机选择了17。（实际应用中，常常选择65537。）</li>
</ul>
<hr>
<blockquote>
<p>第五步，计算e对于φ(n)的模反元素d。</p>
</blockquote>
<ul>
<li>所谓”模反元素”就是指有一个整数d，可以使得ed被φ(n)除的余数为1。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ed ≡ <span class="number">1</span> (mod φ(n))</div></pre></td></tr></table></figure>
<ul>
<li>这个式子等价于</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　ed - <span class="number">1</span> = kφ(n)</div></pre></td></tr></table></figure>
<ul>
<li>于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　ex + φ(n)y = <span class="number">1</span></div></pre></td></tr></table></figure>
<ul>
<li>已知 e=17, φ(n)=3120</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">17</span>x + <span class="number">3120</span>y = <span class="number">1</span></div></pre></td></tr></table></figure>
<ul>
<li>这个方程可以用”扩展欧几里得算法”求解，此处省略具体过程。总之，爱丽丝算出一组整数解为 (x,y)=(2753,-15)，即 d=2753。</li>
</ul>
<hr>
<blockquote>
<p>第六步，将n和e封装成公钥，n和d封装成私钥。</p>
</blockquote>
<ul>
<li>在爱丽丝的例子中，n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）。<br>实际应用中，公钥和私钥的数据都采用ASN.1格式表达（实例）。</li>
</ul>
<hr>
<blockquote>
<p>七、RSA算法的可靠性</p>
</blockquote>
<ul>
<li>回顾上面的密钥生成步骤，一共出现六个数字：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">p</div><div class="line">q</div><div class="line">n</div><div class="line">φ(n)</div><div class="line">e</div><div class="line">d</div></pre></td></tr></table></figure>
<ul>
<li>这六个数字之中，公钥用到了两个（n和e），其余四个数字都是不公开的。其中最关键的是d，因为n和d组成了私钥，一旦d泄漏，就等于私钥泄漏。</li>
</ul>
<blockquote>
<p>八、加密和解密</p>
</blockquote>
<ul>
<li><p>（1）加密要用公钥 (n,e)</p>
<ul>
<li>假设鲍勃要向爱丽丝发送加密信息m，他就要用爱丽丝的公钥 (n,e) 对m进行加密。这里需要注意，m必须是整数（字符串可以取ascii值或unicode值），且m必须小于n。</li>
<li><p>所谓”加密”，就是算出下式的c： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　me ≡ c (mod n)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>+ 爱丽丝的公钥是 (3233, 17)，鲍勃的m假设是65，那么可以算出下面的等式：

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">6517</span> ≡ <span class="number">2790</span> (mod <span class="number">3233</span>)</div></pre></td></tr></table></figure>


+ 于是，c等于2790，鲍勃就把2790发给了爱丽丝。
</code></pre><ul>
<li><p>（2）解密要用私钥(n,d)</p>
<ul>
<li><p>爱丽丝拿到鲍勃发来的2790以后，就用自己的私钥(3233, 2753) 进行解密。可以证明，下面的等式一定成立：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　cd ≡ m (mod n)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>+ 也就是说，c的d次方除以n的余数为m。现在，c等于2790，私钥是(3233, 2753)，那么，爱丽丝算出

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">27902753</span> ≡ <span class="number">65</span> (mod <span class="number">3233</span>)</div></pre></td></tr></table></figure>

+ 因此，爱丽丝知道了鲍勃加密前的原文就是65。
</code></pre><hr>
<blockquote>
<p>九、私钥解密的证明</p>
</blockquote>
<ul>
<li><p>最后，我们来证明，为什么用私钥解密，一定可以正确地得到m。也就是证明下面这个式子：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　cd ≡ m (mod n)</div></pre></td></tr></table></figure>
<ul>
<li><p>因为，根据加密规则
　</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　ｍe ≡ c (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>于是，c可以写成下面的形式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　c = me - kn</div></pre></td></tr></table></figure>
</li>
<li><p>将c代入要我们要证明的那个解密规则：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(me - kn)d ≡ m (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>它等同于求证</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">med ≡ m (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>由于</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ed ≡ <span class="number">1</span> (mod φ(n))</div></pre></td></tr></table></figure>
</li>
<li><p>所以</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ed = hφ(n)+<span class="number">1</span></div></pre></td></tr></table></figure>
</li>
<li><p>将ed代入：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mhφ(n)+<span class="number">1</span> ≡ m (mod n)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>接下来，分成两种情况证明上面这个式子。</p>
</li>
<li><p>（1）m与n互质。</p>
<ul>
<li><p>根据欧拉定理，此时</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　 mφ(n) ≡ <span class="number">1</span> (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>得到</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(mφ(n))h × m ≡ m (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>原式得到证明。</p>
</li>
</ul>
</li>
<li><p>（2）m与n不是互质关系。<br>此时，由于n等于质数p和q的乘积，所以m必然等于kp或kq。<br>以 m = kp为例，考虑到这时k与q必然互质，则根据欧拉定理，下面的式子成立：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(kp)q-<span class="number">1</span> ≡ <span class="number">1</span> (mod q)</div></pre></td></tr></table></figure>
<ul>
<li><p>进一步得到</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　[(kp)q-<span class="number">1</span>]h(p-<span class="number">1</span>) × kp ≡ kp (mod q)</div></pre></td></tr></table></figure>
</li>
<li><p>即</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　(kp)ed ≡ kp (mod q)</div></pre></td></tr></table></figure>
</li>
<li><p>将它改写成下面的等式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　(kp)ed = tq + kp</div></pre></td></tr></table></figure>
</li>
<li><p>这时t必然能被p整除，即 t=t’p</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　　(kp)ed = t<span class="string">'pq + kp</span></div></pre></td></tr></table></figure>
</li>
<li><p>因为 m=kp，n=pq，所以</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    　med ≡ m (mod n)</div></pre></td></tr></table></figure>
</li>
<li><p>原式得到证明。</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> rsa;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">* --------------------------------------------**********--------------------------------------------</div><div class="line">*</div><div class="line">* 该算法于1977年由美国麻省理工学院MIT(Massachusetts Institute of Technology)的Ronal Rivest，Adi Shamir和Len Adleman三位年轻教授提出，并以三人的姓氏Rivest，Shamir和Adlernan命名为RSA算法，是一个支持变长密钥的公共密钥算法，需要加密的文件快的长度也是可变的!</div><div class="line">*</div><div class="line"> *所谓RSA加密算法，是世界上第一个非对称加密算法，也是数论的第一个实际应用。它的算法如下：</div><div class="line">*</div><div class="line"> 1.找两个非常大的质数p和q（通常p和q都有155十进制位或都有512十进制位）并计算n=pq，k=(p-1)(q-1)。</div><div class="line"></div><div class="line"> 2.将明文编码成整数M，保证M不小于0但是小于n。</div><div class="line"></div><div class="line"> 3.任取一个整数e，保证e和k互质，而且e不小于0但是小于k。加密钥匙（称作公钥）是(e, n)。 【exponent】</div><div class="line"></div><div class="line"> 4.找到一个整数d，使得ed除以k的余数是1（只要e和n满足上面条件，d肯定存在）。解密钥匙（称作密钥）是(d, n)。</div><div class="line"></div><div class="line"> 加密过程： 加密后的编码C等于M的e次方除以n所得的余数。</div><div class="line"></div><div class="line"> 解密过程： 解密后的编码N等于C的d次方除以n所得的余数。</div><div class="line"></div><div class="line"> 只要e、d和n满足上面给定的条件。M等于N。</div></pre></td></tr></table></figure>
<h3 id="过程中遇到的问题总结"><a href="#过程中遇到的问题总结" class="headerlink" title="过程中遇到的问题总结"></a>过程中遇到的问题总结</h3><ul>
<li>加密后的数据需要用Base64将bytes转换成字符串不然会乱码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">byte</span>[] bytes = RSA.encryptByPrivateKey(b, privateKeyStr);</div><div class="line">        String s2 = Base64Util.encode2String(bytes);</div><div class="line">        String s = <span class="keyword">new</span> String(bytes);</div><div class="line">        System.out.println(<span class="string">"私钥加密的数据"</span> + s2);</div></pre></td></tr></table></figure>
<ul>
<li>解密后的数据不需要用Base64将bytes转换成字符串，直接<code>new String(bytes)</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">byte</span>[] bytes1 = RSA.decryptByPublicKey(bytes, publicKeyStr);</div><div class="line">        String s1 = <span class="keyword">new</span> String(bytes1);</div><div class="line">        System.out.println(<span class="string">"公钥解密的数据"</span> + s1);</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>RSAUtil.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> rsa;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</div><div class="line"><span class="keyword">import</span> javax.crypto.Cipher;</div><div class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</div><div class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</div><div class="line"><span class="keyword">import</span> java.security.*;</div><div class="line"><span class="keyword">import</span> java.security.interfaces.RSAPrivateKey;</div><div class="line"><span class="keyword">import</span> java.security.interfaces.RSAPublicKey;</div><div class="line"><span class="keyword">import</span> java.security.spec.InvalidKeySpecException;</div><div class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</div><div class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> by benny on 2016/7/23.</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> * <span class="doctag">@description</span> 加密解密签名工具类 使用RSA算法</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RSAUtil</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//算法类型</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_ALGORITHM = <span class="string">"RSA"</span>;</div><div class="line">    <span class="comment">//钥匙的长度</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEY_SIZE = <span class="number">1024</span>;</div><div class="line">    <span class="comment">//RSA公钥</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PUBLIC_KEY = <span class="string">"RSAPublicKey"</span>;</div><div class="line">    <span class="comment">//RSA私钥</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PRIVATE_KEY = <span class="string">"RSAPrivateKey"</span>;</div><div class="line">    <span class="comment">//签名算法类型</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String SIGN_ALGORITHM = <span class="string">"SHA1WithRSA"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化密钥</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">initKeyPair</span><span class="params">()</span> </span>&#123;</div><div class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(KEY_ALGORITHM);</div><div class="line">            keyPairGenerator.initialize(KEY_SIZE);</div><div class="line">            KeyPair keyPair = keyPairGenerator.generateKeyPair();</div><div class="line">            <span class="comment">//公钥</span></div><div class="line">            RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();</div><div class="line">            <span class="comment">//私钥</span></div><div class="line">            RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();</div><div class="line">            map.put(PUBLIC_KEY, publicKey);</div><div class="line">            map.put(PRIVATE_KEY, privateKey);</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> map;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获得公钥</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RSAPublicKey <span class="title">getPublicKey</span><span class="params">(Map&lt;String, Object&gt; keyMap)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (RSAPublicKey) initKeyPair().get(PUBLIC_KEY);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获得公钥</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RSAPrivateKey <span class="title">getPrivateKey</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (RSAPrivateKey) initKeyPair().get(PRIVATE_KEY);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 取得公钥，并转化为String类型</div><div class="line">     * <span class="doctag">@param</span> keyMap</div><div class="line">     * <span class="doctag">@return</span> 公钥</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPublicKeyStr</span><span class="params">(Map&lt;String, Object&gt; keyMap)</span> </span>&#123;</div><div class="line">        Key publicKey = (Key) keyMap.get(PUBLIC_KEY);</div><div class="line">        <span class="keyword">return</span> Base64Util.encode2String(publicKey.getEncoded());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 取得私钥，并转化为String类型</div><div class="line">     * <span class="doctag">@param</span> keyMap</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPrivateKeyStr</span><span class="params">(Map&lt;String, Object&gt; keyMap)</span> </span>&#123;</div><div class="line">        Key privateKey = (Key) keyMap.get(PRIVATE_KEY);</div><div class="line">        <span class="keyword">return</span> Base64Util.encode2String(privateKey.getEncoded());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 用公钥加密</div><div class="line">     * <span class="doctag">@param</span> bytes	加密数据</div><div class="line">     * <span class="doctag">@param</span> publicKeyStr	密钥</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptByPublicKey(<span class="keyword">byte</span>[] bytes, String publicKeyStr) &#123;</div><div class="line">        <span class="comment">//对公钥解密</span></div><div class="line">        <span class="keyword">byte</span>[] publicKeyBytes = Base64Util.decodeString2Base64(publicKeyStr);</div><div class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 根据字节数组取得公钥</span></div><div class="line">            X509EncodedKeySpec x509EncodedKeySpec = <span class="keyword">new</span> X509EncodedKeySpec(publicKeyBytes);</div><div class="line">            KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</div><div class="line">            Key publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</div><div class="line">            <span class="comment">//对数据加密</span></div><div class="line">            Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</div><div class="line">            cipher.init(Cipher.ENCRYPT_MODE, publicKey);</div><div class="line">            <span class="comment">//加密后的byte数组</span></div><div class="line">            result = cipher.doFinal(bytes);</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (InvalidKeySpecException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 用私钥加密</div><div class="line">     * <span class="doctag">@param</span> bytes	加密数据</div><div class="line">     * <span class="doctag">@param</span> privateKeyStr	密钥</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptByPrivateKey(<span class="keyword">byte</span>[] bytes, String privateKeyStr) &#123;</div><div class="line">        <span class="comment">//对私钥解密</span></div><div class="line">        <span class="keyword">byte</span>[] privateKeyBytes = Base64Util.decodeString2Base64(privateKeyStr);</div><div class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 取得私钥</span></div><div class="line">            PKCS8EncodedKeySpec pkcs8EncodedKeySpec = <span class="keyword">new</span> PKCS8EncodedKeySpec(privateKeyBytes);</div><div class="line">            KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</div><div class="line">            Key privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</div><div class="line">            <span class="comment">// 对数据加密</span></div><div class="line">            Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</div><div class="line">            cipher.init(Cipher.ENCRYPT_MODE, privateKey);</div><div class="line">            result = cipher.doFinal(bytes);</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (InvalidKeySpecException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 用公钥解密</div><div class="line">     * <span class="doctag">@param</span> bytes	加密数据</div><div class="line">     * <span class="doctag">@param</span> publicKeyStr	私钥</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decryptByPublicKey(<span class="keyword">byte</span>[] bytes, String publicKeyStr) &#123;</div><div class="line">        <span class="comment">//对公钥解密</span></div><div class="line">        <span class="keyword">byte</span>[] publicKeyBytes = Base64Util.decodeString2Base64(publicKeyStr);</div><div class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//取得公钥</span></div><div class="line">            X509EncodedKeySpec x509EncodedKeySpec = <span class="keyword">new</span> X509EncodedKeySpec(publicKeyBytes);</div><div class="line">            KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</div><div class="line">            Key publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</div><div class="line"></div><div class="line">            <span class="comment">//用公钥解密</span></div><div class="line">            Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</div><div class="line">            cipher.init(Cipher.DECRYPT_MODE, publicKey);</div><div class="line">            result = cipher.doFinal(bytes);</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (InvalidKeySpecException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 用私钥解密</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decryptByPrivateKey(<span class="keyword">byte</span>[] bytes, String privateKeyStr) &#123;</div><div class="line">        <span class="comment">//对私钥解密</span></div><div class="line">        <span class="keyword">byte</span>[] privateKeyBytes = Base64Util.decodeString2Base64(privateKeyStr);</div><div class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//根据字节数组获得私钥</span></div><div class="line">            PKCS8EncodedKeySpec pkcs8EncodedKeySpec = <span class="keyword">new</span> PKCS8EncodedKeySpec(privateKeyBytes);</div><div class="line"></div><div class="line">            KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</div><div class="line">            Key privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</div><div class="line">            <span class="comment">//解密数据</span></div><div class="line">            Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</div><div class="line">            cipher.init(Cipher.DECRYPT_MODE, privateKey);</div><div class="line">            <span class="comment">//解密后的byte数组</span></div><div class="line">            result = cipher.doFinal(bytes);</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (InvalidKeySpecException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * RSA签名</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> bytes         待签名数据</div><div class="line">     * <span class="doctag">@param</span> privateKeyStr 商户私钥</div><div class="line">     * <span class="doctag">@return</span> 签名值</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">signByPrivateKey</span><span class="params">(<span class="keyword">byte</span>[] bytes, String privateKeyStr)</span> </span>&#123;</div><div class="line">        <span class="comment">//base64解密私钥</span></div><div class="line">        <span class="keyword">byte</span>[] privateKeyBytes = Base64Util.decodeString2Base64(privateKeyStr);</div><div class="line">        String result = <span class="string">""</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//取得私钥</span></div><div class="line">            PKCS8EncodedKeySpec pkcs8EncodedKeySpec = <span class="keyword">new</span> PKCS8EncodedKeySpec(privateKeyBytes);</div><div class="line">            <span class="comment">//指定加密算法</span></div><div class="line">            KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</div><div class="line">            PrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</div><div class="line">            <span class="comment">//用私钥对信息生成数字签名</span></div><div class="line">            Signature signature = Signature.getInstance(SIGN_ALGORITHM);</div><div class="line">            signature.initSign(privateKey);</div><div class="line">            signature.update(bytes);</div><div class="line">            result = Base64Util.encode2String(signature.sign());</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (InvalidKeySpecException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * RSA签名验证</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> bytes        待签名数据</div><div class="line">     * <span class="doctag">@param</span> signByte         签名值</div><div class="line">     * <span class="doctag">@param</span> publicKeyStr 分配给开发商公钥</div><div class="line">     * <span class="doctag">@return</span> 布尔值</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkSignature</span><span class="params">(<span class="keyword">byte</span>[] bytes, <span class="keyword">byte</span>[] signByte, String publicKeyStr)</span> </span>&#123;</div><div class="line">        <span class="comment">//base64解密公钥</span></div><div class="line">        <span class="keyword">byte</span>[] publicKeyBytes = Base64Util.decodeString2Base64(publicKeyStr);</div><div class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//构造X509EncodedKeySpec对象</span></div><div class="line">            X509EncodedKeySpec x509EncodedKeySpec = <span class="keyword">new</span> X509EncodedKeySpec(publicKeyBytes);</div><div class="line">            <span class="comment">//指定加密算法</span></div><div class="line">            KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</div><div class="line">            <span class="comment">//取公钥匙对象</span></div><div class="line">            PublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</div><div class="line">            Signature signature = Signature.getInstance(SIGN_ALGORITHM);</div><div class="line">            signature.initVerify(publicKey);</div><div class="line">            signature.update(bytes);</div><div class="line">            result = signature.verify(signByte);</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (InvalidKeySpecException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Base64Util.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> rsa;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> sun.misc.BASE64Decoder;</div><div class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> by benny on 2016/7/23.</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> * <span class="doctag">@description</span> Base64 编码工具</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base64Util</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 加密成字符串</div><div class="line">     * <span class="doctag">@param</span> key</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode2String</span><span class="params">(<span class="keyword">byte</span>[] key)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BASE64Encoder().encode(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 解密成字节数组</div><div class="line">     * <span class="doctag">@param</span> key</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decodeString2Base64(String key)&#123;</div><div class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            result =  <span class="keyword">new</span> BASE64Decoder().decodeBuffer(key);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="RSAUtil使用说明"><a href="#RSAUtil使用说明" class="headerlink" title="RSAUtil使用说明"></a>RSAUtil使用说明</h2><h3 id="公钥加密-私钥解密"><a href="#公钥加密-私钥解密" class="headerlink" title="公钥加密 私钥解密"></a>公钥加密 私钥解密</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">String resource = <span class="string">"我是加密的数据"</span>;</div><div class="line"></div><div class="line">Map&lt;String, Object&gt; keyMap = RSAUtil.initKeyPair();</div><div class="line"></div><div class="line">&lt;!--获得公钥--&gt;</div><div class="line">String publicKeyStr = RSAUtil.getPublicKeyStr(keyMap);</div><div class="line">&lt;!--获得私钥--&gt;</div><div class="line">String privateKeyStr = RSAUtil.getPrivateKeyStr(keyMap);</div><div class="line"></div><div class="line">&lt;!--将要加密的字符串转成字节数组--&gt;</div><div class="line"><span class="keyword">byte</span>[] bytes = resource.getBytes();</div><div class="line"></div><div class="line">&lt;!--公钥加密--&gt;</div><div class="line"><span class="keyword">byte</span>[] encryptBytes = RSAUtil.encryptByPublicKey(bytes, publicKeyStr);</div><div class="line">&lt;!--加密后的字符串--&gt;</div><div class="line">String encryptStr = Base64Util.encode2String(encryptBytes);</div><div class="line"></div><div class="line">&lt;!--私钥解密--&gt;</div><div class="line"><span class="keyword">byte</span>[] decryptBytes = RSAUtil.decryptByPrivateKey(bytes, privateKeyStr);</div><div class="line">&lt;!--解密后的字符串--&gt;</div><div class="line">String decryptStr = <span class="keyword">new</span> String(decryptBytes);</div></pre></td></tr></table></figure>
<h3 id="私钥加密-公钥解密-（签名）"><a href="#私钥加密-公钥解密-（签名）" class="headerlink" title="私钥加密 公钥解密 （签名）"></a>私钥加密 公钥解密 （签名）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">String resource = <span class="string">"我是加密的数据"</span>;</div><div class="line"></div><div class="line">Map&lt;String, Object&gt; keyMap = RSAUtil.initKeyPair();</div><div class="line"></div><div class="line">&lt;!--获得公钥--&gt;</div><div class="line">String publicKeyStr = RSAUtil.getPublicKeyStr(keyMap);</div><div class="line">&lt;!--获得私钥--&gt;</div><div class="line">String privateKeyStr = RSAUtil.getPrivateKeyStr(keyMap);</div><div class="line"></div><div class="line">&lt;!--将要加密的字符串转成字节数组--&gt;</div><div class="line"><span class="keyword">byte</span>[] b = resource.getBytes();</div><div class="line"></div><div class="line">&lt;!--生成签名字符串--&gt;</div><div class="line">String s1 = RSAUtil.signByPrivateKey(b, privateKeyStr);</div><div class="line">   </div><div class="line">&lt;!--验证签名--&gt;</div><div class="line"><span class="keyword">boolean</span> result = RSAUtil.checkSignature(b12, Base64Util.decodeString2Base64(s1), publicKeyStr);</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">true</span> 签名正确  <span class="keyword">else</span> 签名失败</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于Linux命令的那点小事]]></title>
      <url>/2016/07/06/160706_linuxcommand/</url>
      <content type="html"><![CDATA[<h2 id="Linux命令那点事—ls命令-list"><a href="#Linux命令那点事—ls命令-list" class="headerlink" title="Linux命令那点事—ls命令[list]"></a>Linux命令那点事—<code>ls</code>命令[list]</h2><p><img src="http://ww3.sinaimg.cn/large/610dc034gw1f59lsn7wjnj20du0ku40c.jpg" alt="就问你美不美"></p>
<a id="more"></a>
<ul>
<li><p><code>命令格式</code></p>
<blockquote>
<p>ls  [选项] [目录名]</p>
</blockquote>
</li>
<li><p><code>命令功能</code></p>
<blockquote>
<p>列出目标目录中所有的子目录和文件。</p>
</blockquote>
</li>
<li><p><code>常用参数</code></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>列出目录下的所有文件，包括以 . 开头的隐含文件。</td>
</tr>
<tr>
<td>-b</td>
<td>把文件名中不可输出的字符用反斜杠加字符编号(就象在C语言里一样)的形式列出。</td>
</tr>
<tr>
<td>-c</td>
<td>输出文件的 i 节点的修改时间，并以此排序。</td>
</tr>
<tr>
<td>-d</td>
<td>将目录象文件一样显示，而不是显示其下的文件。</td>
</tr>
<tr>
<td>-e</td>
<td>输出时间的全部信息，而不是输出简略信息。</td>
</tr>
<tr>
<td>-f</td>
<td>-U 对输出的文件不排序。</td>
</tr>
<tr>
<td>-g</td>
<td>无用。</td>
</tr>
<tr>
<td>-i</td>
<td>输出文件的 i 节点的索引信息。</td>
</tr>
<tr>
<td>-k</td>
<td>以 k 字节的形式表示文件的大小。</td>
</tr>
<tr>
<td>-l</td>
<td>列出文件的详细信息。</td>
</tr>
<tr>
<td>-m</td>
<td>横向输出文件名，并以“，”作分格符。</td>
</tr>
<tr>
<td>-n</td>
<td>用数字的 UID,GID 代替名称。</td>
</tr>
<tr>
<td>-o</td>
<td>显示文件的除组信息外的详细信息。</td>
</tr>
<tr>
<td>-p -F</td>
<td>在每个文件名后附上一个字符以说明该文件的类型，“*”表示可执行的普通文件；“/”表示目录；“@”表示符号链接；“</td>
<td>”表示FIFOs；“”表示套接字(sockets)。</td>
</tr>
<tr>
<td>-q</td>
<td>用?代替不可输出的字符。</td>
</tr>
<tr>
<td>-r</td>
<td>对目录反向排序。</td>
</tr>
<tr>
<td>-s</td>
<td>在每个文件名后输出该文件的大小。</td>
</tr>
<tr>
<td>-t</td>
<td>以时间排序。</td>
</tr>
<tr>
<td>-u</td>
<td>以文件上次被访问的时间排序。</td>
</tr>
<tr>
<td>-x</td>
<td>按列输出，横向排序。</td>
</tr>
<tr>
<td>-A</td>
<td>显示除 “.”和“..”外的所有文件。</td>
</tr>
<tr>
<td>-B</td>
<td>不输出以 “~”结尾的备份文件。</td>
</tr>
<tr>
<td>-C</td>
<td>按列输出，纵向排序。</td>
</tr>
<tr>
<td>-F</td>
<td>在每个文件名后附上一个字符以说明该文件的类型，见-p -F命令。</td>
</tr>
<tr>
<td>-G</td>
<td>输出文件的组的信息。</td>
</tr>
<tr>
<td>-L</td>
<td>列出链接文件名而不是链接到的文件。</td>
</tr>
<tr>
<td>-N</td>
<td>不限制文件长度。</td>
</tr>
<tr>
<td>-Q</td>
<td>把输出的文件名用双引号括起来。</td>
</tr>
<tr>
<td>-R</td>
<td>列出所有子目录下的文件。</td>
</tr>
<tr>
<td>-S</td>
<td>以文件大小排序。</td>
</tr>
<tr>
<td>-X</td>
<td>以文件的扩展名(最后一个 . 后的字符)排序。</td>
</tr>
<tr>
<td>-1</td>
<td>一行只输出一个文件。</td>
</tr>
</tbody>
</table>
<hr>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>–colorno</td>
<td>不显示彩色文件名</td>
</tr>
<tr>
<td>–help</td>
<td>在标准输出上显示帮助信息。</td>
</tr>
<tr>
<td>–version</td>
<td>在标准输出上输出版本信息并退出。</td>
</tr>
</tbody>
</table>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li>最近修改的文件显示在最上面</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost /]# ls -t </div><div class="line">tmp root etc dev lib boot sys proc data home bin sbin usr var lost+found media mnt opt selinux srv misc</div></pre></td></tr></table></figure>
<ul>
<li>显示递归文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# ls -R</div><div class="line">.: anaconda-ks.cfg install.log install.log.syslog satools ./satools: black.txt freemem.sh iptables.sh lnmp.sh mysql php502_check.sh ssh_safe.sh</div></pre></td></tr></table></figure>
<ul>
<li>列出可读文件和文件夹详细信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost /]# ls -n</div><div class="line"></div><div class="line">total 254</div><div class="line">drwxr-xr-x   2 0 0  4096 Jun 12 04:03 bin</div><div class="line">drwxr-xr-x   4 0 0  1024 Jun 15 14:45 boot</div><div class="line">drwxr-xr-x   6 0 0  4096 Jun 12 10:26 data</div><div class="line">drwxr-xr-x  10 0 0  3520 Sep 26 15:38 dev</div><div class="line">drwxr-xr-x  75 0 0  4096 Oct 16 04:02 etc</div></pre></td></tr></table></figure>
<ul>
<li><p>ls命令和它的别名  <code>alias ls=&quot;ls -l&quot;</code></p>
<ul>
<li><p>我们可以通过不加任何参数的alias命令来看到目前系统中可用的所有alias设置，当然它们同时也可以unalias来取消。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># alias</div><div class="line">alias cp=&apos;cp -i&apos;</div><div class="line">alias l.=&apos;ls -d .* --color=auto&apos;</div><div class="line">alias ll=&apos;ls -l --color=auto&apos;</div><div class="line">alias ls=&apos;ls --color=auto&apos;</div><div class="line">alias mv=&apos;mv -i&apos;</div><div class="line">alias rm=&apos;rm -i&apos;</div><div class="line">alias which=&apos;alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>+ 删除一项之前定义的alias设置，只需用unalias命令即可。

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># unalias ls</div></pre></td></tr></table></figure>
</code></pre><ul>
<li>显示文件夹信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost /]# ls -ld /etc/ </div><div class="line">drwxr-xr-x 75 root root 4096 Oct 16 04:02 /etc/</div></pre></td></tr></table></figure>
<ul>
<li>计算当前目录下的文件数量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -|*|grep &quot;^-&quot;| wc -|</div></pre></td></tr></table></figure>
<ul>
<li>linux下文件颜色的含义</li>
</ul>
<table>
<thead>
<tr>
<th>颜色</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>绿色</td>
<td>代表可执行文件</td>
</tr>
<tr>
<td>红色</td>
<td>代表压缩文件</td>
</tr>
<tr>
<td>深蓝色</td>
<td>代表目录</td>
</tr>
<tr>
<td>浅蓝色</td>
<td>代表链接文件</td>
</tr>
<tr>
<td>灰色</td>
<td>代表其它的文件</td>
</tr>
</tbody>
</table>
<ul>
<li>列出当前目录下的所有文件（包括隐藏文件）的绝对路径， 对目录不做递归</li>
</ul>
<blockquote>
<p>命令： find $PWD -maxdepth 1 | xargs ls -ld</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost opt]# find $PWD -maxdepth 1 | xargs ls -ld</div><div class="line">drwxr-xr-x 8 root root 4096 10-11 03:43 /opt</div><div class="line">drwxr-xr-x 2 root root 4096 2012-03-08 /opt/log</div><div class="line">drwxr-xr-x 2 root root 4096 2012-03-08 /opt/script</div><div class="line">drwxr-xr-x 5 root root 4096 10-11 03:21 /opt/soft</div><div class="line">drwxr-xr-x 2 root root 4096 2012-03-08 /opt/src</div><div class="line">drwxr-xr-x 4 root root 4096 10-11 05:22 /opt/svndata</div><div class="line">drwxr-xr-x 4 root root 4096 10-09 00:45 /opt/web</div></pre></td></tr></table></figure>
<ul>
<li>递归列出当前目录下的所有文件（包括隐藏文件）的绝对路径</li>
</ul>
<blockquote>
<p>命令：  find $PWD | xargs ls -ld </p>
</blockquote>
<ul>
<li>指定文件时间输出格式</li>
</ul>
<blockquote>
<p>命令 ：ls -tl –time-style=full-iso</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost soft]# ls -tl --time-style=full-iso </div><div class="line">总计 350644</div><div class="line">drwxr-xr-x 16 1016 1016 4096 2012-10-11 03:25:58.000000000 +0800 subversion-1.6.1</div></pre></td></tr></table></figure>
<blockquote>
<p>命令 ：ls -ctl –time-style=long-iso</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost soft]# ls -ctl --time-style=long-iso</div><div class="line">总计 350644</div><div class="line">drwxr-xr-x 16 1016 1016      4096 2012-10-11 03:25 subversion-1.6.1</div></pre></td></tr></table></figure>
<ul>
<li>使用<code>ls -lh</code> 可以将文件大小显示为符合人类阅读习惯的格式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ lib]# ls -l -h</div><div class="line">total 168K</div><div class="line">drwxr-xr-x 2 root   root    4.0K Aug 18  2014 alternatives</div><div class="line">drwxr-xr-x 2 root   root    4.0K Jul 14  2008 bluetooth</div><div class="line">drwxr-xr-x 2 root   root    4.0K Aug  2  2012 cs</div><div class="line">drwx------ 2 apache apache  4.0K Sep 16  2014 dav</div><div class="line">drwxr-xr-x 2 root   root    4.0K Oct  2  2013 dbus</div><div class="line">drwxr-xr-x 2 root   root    4.0K Jan 23  2013 dhclient</div><div class="line">drwxr-x--- 2 root   root    4.0K Mar  6  2011 dhcpv6</div><div class="line">drwxr-xr-x 2 root   root    4.0K May 11  2011 games</div><div class="line">drwxr-xr-x 2 root   root    4.0K Jan  9  2013 hal</div><div class="line">drwxr-xr-x 8 root   root    4.0K Aug 18  2014 iscsi</div></pre></td></tr></table></figure>
<ul>
<li>列出文件并标记颜色分类</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx-1.2.1]# ls --color=auto </div><div class="line">auto CHANGES CHANGES.ru conf configure contrib html LICENSE Makefile man objs README src</div></pre></td></tr></table></figure>
<h2 id="ls-l-文件列表权限详解"><a href="#ls-l-文件列表权限详解" class="headerlink" title="ls -l 文件列表权限详解"></a><code>ls -l</code> 文件列表权限详解</h2><ul>
<li>使用 ls -l 命令 执行结果如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@iZ251fgdsaZ var]#ls -l</div><div class="line">-rwxrwxrwx  1 root root     1290 May 31 11:08 home.php</div><div class="line">-rwxrwxrwx  1 root root     5669 May 31 11:08 index.php</div><div class="line">drwxrwxrwx  5 root root     4096 Jun 27 17:02 install</div><div class="line">-rwxrwxrwx  1 root root     1025 May 31 11:08 member.php</div><div class="line">-rwxrwxrwx  1 root root     2462 May 31 11:08 misc.php</div><div class="line">-rwxrwxrwx  1 root root     1757 May 31 11:08 plugin.php</div><div class="line">-rwxrwxrwx  1 root root      988 May 31 11:08 portal.php</div><div class="line">-rwxrwxrwx  1 root root      582 May 31 11:08 robots.txt</div><div class="line">-rwxrwxrwx  1 root root     1161 May 31 11:08 search.php</div><div class="line">drwxrwxrwx 10 root root     4096 Jun 27 11:13 source</div><div class="line">drwxrwxrwx  6 root  adm     4096 Jun 11 22:41 tomcat9</div><div class="line">drwxrwxrwx  5 root root     4096 Jun 13 02:21 template</div></pre></td></tr></table></figure>
<ul>
<li>文件列表权限图解</li>
</ul>
<p><img src="http://7xjlkb.com1.z0.glb.clouddn.com/lsAuthority.png" alt="文件列表权限详解"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">第一列 ： “drwxr-x---”  表识文件的类型 和文件权限 </div><div class="line"></div><div class="line">第二列： “2”是纯数字 ，表示 文件链接个数</div><div class="line"></div><div class="line">第三列 ： “root” 表示文件的所有者 </div><div class="line"></div><div class="line">第四列：“adm” 表示为文件的所在群组 </div><div class="line"></div><div class="line">第五列：“4096”，表示为文件长度（大小）</div><div class="line"></div><div class="line">第六列：“2016-08-07 11:03”，表示文件最后更新（修改）时间</div><div class="line"></div><div class="line">第七列：“tomcat9” 表示文件的名称</div></pre></td></tr></table></figure>
<blockquote>
<p><code>drwxrwxrwx</code>第一列共有10个字符，第一个字符代表文件的类型，后面9个字符表示文件的权限</p>
</blockquote>
<ul>
<li><p><code>d rwx rwx rwx</code> </p>
</li>
<li><p><code>d</code>代表是目录， </p>
</li>
<li>第一个<code>rwx</code>  代表所有者的读、写、执行的权限</li>
<li>第二个<code>rwx</code>  代表用户组读、写、执行的权限</li>
<li>第三个<code>rwx</code>  代表其他用户读、写、执行的权限</li>
<li>如果没有权限的话，用<code>-</code>来代替，例如：<code>drwx-w-r--</code></li>
</ul>
<h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><p><img src="http://7xjlkb.com1.z0.glb.clouddn.com/permission.png" alt="文件列表权限详解"></p>
<ul>
<li>文件类型和文件权限 ，即为列表第一列内容：</li>
</ul>
<blockquote>
<p>“drwxr-x—” 含义：有两部分组成 ，一部分是第一列即为“d” ,表示文件类型（目录或文件夹），另一部分是“rwxr-x—” 表示文件权限，权限有分为三段：即为 “ rwx ”,“  r-x  ”和 “ —  ”分别表示 ，文件所有者的权限，文件所属组的权限 和其他用户对文件的权限。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">d ：目录   </div><div class="line">- ：文件   </div><div class="line">l ：链接   </div><div class="line">s ：socket   </div><div class="line">p ：named pipe   </div><div class="line">b ：block device   </div><div class="line">c  ：character device</div></pre></td></tr></table></figure>
<ul>
<li>文件权限 ：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">r :含义为 “可读”，用数字 4 表示   </div><div class="line">  </div><div class="line"> w:含义为 “可写”用数字 2 表示  </div><div class="line">  </div><div class="line"> X（小X）：含义为“可执行”用数字 1 表示  </div><div class="line">  </div><div class="line"> -：含义为“无权限”用数字0 表示  </div><div class="line">  </div><div class="line">X （大X）：含义为只有目标文件对某些用户是可执行的或该目标文件是目录时才追加x 属性。   </div><div class="line">s：含义为 在文件执行时把进程的属主或组ID置为该文件的文件属主。方式“u＋s”设置文件的用         户ID位，“g＋s”设置组ID位。</div></pre></td></tr></table></figure>
<h2 id="文件权限的修改"><a href="#文件权限的修改" class="headerlink" title="文件权限的修改"></a>文件权限的修改</h2><ul>
<li><p>命令：  chmod  文件权限 文件名称 [-R]</p>
<ul>
<li><p>(1) 直接给文件赋相应的权限即为 :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod   a+x  auth.log   #含义为 给 auth.log 文件赋予所有者可执行权限</div></pre></td></tr></table></figure>
</li>
<li><p>(2) 使用数字方式代替权限 ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 777 auth.log #含义为给auth.log文件赋予任何可读，可写，可执行权限</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>数字含义详见下表 </p>
</li>
</ul>
<table>
<thead>
<tr>
<th>所有者</th>
<th>群组</th>
<th>其他</th>
<th>三位代表权限的数字</th>
</tr>
</thead>
<tbody>
<tr>
<td>rwx</td>
<td>rwx</td>
<td>rwx</td>
<td>实际结果</td>
</tr>
<tr>
<td>521</td>
<td>521</td>
<td>521</td>
<td>777</td>
</tr>
<tr>
<td>421</td>
<td>401</td>
<td>401</td>
<td>705</td>
</tr>
</tbody>
</table>
<h2 id="文件所有者的更改"><a href="#文件所有者的更改" class="headerlink" title="文件所有者的更改"></a>文件所有者的更改</h2><ul>
<li>命令： chown  用户名  文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown MySQL auth.log #含义为 把 文件 auth.log 的所有者更改为 mysql</div></pre></td></tr></table></figure>
<h2 id="文件所在组的更改"><a href="#文件所在组的更改" class="headerlink" title="文件所在组的更改"></a>文件所在组的更改</h2><ul>
<li>命令 chgrp [-R]  群组名称  文件名称</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chgrp  -R  mysql  apache2  #含义为 ，把 目录apache2 的所在组更改为mysql</div></pre></td></tr></table></figure>
<h2 id="Linux-命令英文缩写"><a href="#Linux-命令英文缩写" class="headerlink" title="Linux 命令英文缩写"></a>Linux 命令英文缩写</h2><table>
<thead>
<tr>
<th>缩写</th>
<th>完整</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>ls</td>
<td>list</td>
<td>(列出目录内容)</td>
</tr>
<tr>
<td>cd</td>
<td>Change Directory</td>
<td>（改变目录）</td>
</tr>
<tr>
<td>su</td>
<td>switch user</td>
<td>切换用户</td>
</tr>
<tr>
<td>rpm</td>
<td>redhat package manager</td>
<td>红帽子打包管理器</td>
</tr>
<tr>
<td>pwd</td>
<td>print work directory</td>
<td>打印当前目录 显示出当前工作目录的绝对路径</td>
</tr>
<tr>
<td>ps</td>
<td>process status</td>
<td>(进程状态，类似于windows的任务管理器) 常用参数</td>
<td>－auxf</td>
</tr>
<tr>
<td>ps -auxf</td>
<td>显示进程状态</td>
</tr>
<tr>
<td>df</td>
<td>disk free</td>
<td>其功能是显示磁盘可用空间数目信息及空间结点信息。换句话说，就是报告在任何安装的设备或目录中，还剩多少自由的空间。</td>
</tr>
<tr>
<td>rpm</td>
<td>即RedHat Package Management</td>
<td>是RedHat的发明之一</td>
</tr>
<tr>
<td>rmdir</td>
<td>Remove Directory</td>
<td>（删除目录）</td>
</tr>
<tr>
<td>rm</td>
<td>Remove</td>
<td>（删除目录或文件）</td>
</tr>
<tr>
<td>cat</td>
<td>concatenate</td>
<td>连锁 cat file1 file2&gt;&gt;file3把文件1和文件2的内容联合起来放到file3中</td>
</tr>
<tr>
<td>insmod</td>
<td>install module</td>
<td>,载入模块</td>
</tr>
<tr>
<td>ln -s</td>
<td>link -soft</td>
<td>创建一个软链接，相当于创建一个快捷方式</td>
</tr>
<tr>
<td>mkdir</td>
<td>Make Directory</td>
<td>(创建目录</td>
</tr>
<tr>
<td>touch</td>
</tr>
<tr>
<td>man</td>
<td>Manual</td>
</tr>
<tr>
<td>pwd</td>
<td>Print working directory</td>
</tr>
<tr>
<td>su</td>
<td>Swith user</td>
</tr>
<tr>
<td>cd</td>
<td>Change directory</td>
</tr>
<tr>
<td>ls</td>
<td>List files</td>
</tr>
<tr>
<td>ps</td>
<td>Process Status</td>
</tr>
<tr>
<td>mkdir</td>
<td>Make directory</td>
</tr>
<tr>
<td>rmdir</td>
<td>Remove directory</td>
</tr>
<tr>
<td>mkfs</td>
<td>Make file system</td>
</tr>
<tr>
<td>fsck</td>
<td>File system check</td>
</tr>
<tr>
<td>cat</td>
<td>Concatenate</td>
</tr>
<tr>
<td>uname</td>
<td>Unix name</td>
</tr>
<tr>
<td>df</td>
<td>Disk free</td>
</tr>
<tr>
<td>du</td>
<td>Disk usage</td>
</tr>
<tr>
<td>lsmod</td>
<td>List modules</td>
</tr>
<tr>
<td>mv</td>
<td>Move file</td>
</tr>
<tr>
<td>rm</td>
<td>Remove file</td>
</tr>
<tr>
<td>cp</td>
<td>Copy file</td>
</tr>
<tr>
<td>ln</td>
<td>Link files</td>
</tr>
<tr>
<td>fg</td>
<td>Foreground</td>
</tr>
<tr>
<td>bg</td>
<td>Background</td>
</tr>
<tr>
<td>chown</td>
<td>Change owner</td>
</tr>
<tr>
<td>chgrp</td>
<td>Change group</td>
</tr>
<tr>
<td>chmod</td>
<td>Change mode</td>
</tr>
<tr>
<td>umount</td>
<td>Unmount</td>
</tr>
<tr>
<td>dd</td>
<td>本来应根据其功能描述“Convert an copy”命名为“cc”，但“cc”已经被用以代表“C Complier”，所以命名为“dd”</td>
</tr>
<tr>
<td>tar</td>
<td>Tape archive</td>
</tr>
<tr>
<td>ldd</td>
<td>List dynamic dependencies</td>
</tr>
<tr>
<td>insmod</td>
<td>Install module</td>
</tr>
<tr>
<td>rmmod</td>
<td>Remove module</td>
</tr>
<tr>
<td>lsmod</td>
<td>List module</td>
</tr>
<tr>
<td>文件结尾的”rc”（如.bashrc、.xinitrc等）</td>
<td>Resource configuration</td>
</tr>
<tr>
<td>Knnxxx / Snnxxx（位于rcx.d目录下）</td>
<td>K（Kill）；S(Service)；nn（执行顺序号）；xxx（服务标识）</td>
</tr>
<tr>
<td>.a（扩展名a）</td>
<td>Archive，static library</td>
</tr>
<tr>
<td>.so（扩展名so）</td>
<td>Shared object，dynamically linked library</td>
</tr>
<tr>
<td>.o（扩展名o）</td>
<td>Object file，complied result of C/C++ source file</td>
</tr>
<tr>
<td>RPM</td>
<td>Red hat package manager</td>
</tr>
<tr>
<td>dpkg</td>
<td>Debian package manager</td>
</tr>
<tr>
<td>apt</td>
<td>Advanced package tool（Debian或基于Debian的发行版中提供）</td>
</tr>
<tr>
<td>部分Linux命令缩</td>
</tr>
<tr>
<td>bin</td>
<td>BINaries</td>
<td>#下面的是一些二进制程序文件</td>
</tr>
<tr>
<td>/dev</td>
<td>DEVices</td>
<td>#下面的是一些硬件驱动</td>
</tr>
<tr>
<td>/etc</td>
<td>ETCetera</td>
<td>#目录存放着各种系统配置文件, 类似于windows下的system</td>
</tr>
<tr>
<td>/lib</td>
<td>LIBrary</td>
</tr>
<tr>
<td>/proc</td>
<td>PROCesses</td>
</tr>
<tr>
<td>/sbin</td>
<td>Superuser BINaries</td>
</tr>
<tr>
<td>/tmp</td>
<td>TeMPorary</td>
</tr>
<tr>
<td>/usr</td>
<td>Unix Shared Resources </td>
</tr>
<tr>
<td>/var</td>
<td>VARiable ?</td>
</tr>
<tr>
<td>/bootboot</td>
<td>#下面的是开机启动文件</td>
</tr>
<tr>
<td>FIFO</td>
<td>First In, First Out</td>
</tr>
<tr>
<td>GRUB</td>
<td>GRand Unified Bootloader</td>
</tr>
<tr>
<td>IFS</td>
<td>Internal Field Seperators</td>
</tr>
<tr>
<td>LILO</td>
<td>LInux LOader</td>
</tr>
<tr>
<td>MySQ</td>
<td>My是最初作者女儿的名字，SQL  Structured Query Language</td>
</tr>
<tr>
<td>PHP</td>
<td>Personal Home Page Tools  PHP Hypertext Preprocessor</td>
</tr>
<tr>
<td>PS</td>
<td>Prompt String</td>
</tr>
<tr>
<td>Perl</td>
<td>“Pratical Extraction and Report Language”  “Pathologically Eclectic Rubbish Lister”</td>
</tr>
<tr>
<td>Python</td>
<td>得名于电视剧Monty Python’s Flying Circus</td>
</tr>
<tr>
<td>Tcl</td>
<td>Tool Command Language</td>
</tr>
<tr>
<td>Tk</td>
<td>ToolKit</td>
</tr>
<tr>
<td>VT</td>
<td>Video Terminal</td>
</tr>
<tr>
<td>YaST</td>
<td>Yet Another Setup Tool</td>
</tr>
<tr>
<td>apache</td>
<td>“a patchy” server</td>
</tr>
<tr>
<td>apt</td>
<td>Advanced Packaging Tool</td>
</tr>
<tr>
<td>ar</td>
<td>archiver</td>
</tr>
<tr>
<td>as</td>
<td>assembler</td>
</tr>
<tr>
<td>awk</td>
<td>“Aho Weiberger and Kernighan” 三个作者的姓的第一个字母</td>
</tr>
<tr>
<td>bash</td>
<td>Bourne Again SHell</td>
</tr>
<tr>
<td>bc</td>
<td>Basic (Better) Calculator</td>
</tr>
<tr>
<td>bg</td>
<td>BackGround</td>
</tr>
<tr>
<td>biff</td>
<td>作者Heidi Stettner在U.C.Berkely养的一条狗,喜欢对邮递员汪汪叫。</td>
</tr>
<tr>
<td>cal</td>
<td>CALendar</td>
</tr>
<tr>
<td>cat</td>
<td>CATenate</td>
</tr>
<tr>
<td>cd</td>
<td>Change Directory</td>
</tr>
<tr>
<td>chgrp</td>
<td>CHange GRouP</td>
</tr>
<tr>
<td>chmod</td>
<td>CHange MODe</td>
</tr>
<tr>
<td>chown</td>
<td>CHange OWNer</td>
</tr>
<tr>
<td>chsh</td>
<td>CHange SHell</td>
</tr>
<tr>
<td>cmp</td>
<td>compare</td>
</tr>
<tr>
<td>cobra</td>
<td>Common Object Request Broker Architecture</td>
</tr>
<tr>
<td>comm</td>
<td>common</td>
</tr>
<tr>
<td>cp</td>
<td>CoPy</td>
</tr>
<tr>
<td>cpio</td>
<td>CoPy In and Out</td>
</tr>
<tr>
<td>cpp</td>
<td>C Pre Processor</td>
</tr>
<tr>
<td>cron</td>
<td>Chronos 希腊文时间</td>
</tr>
<tr>
<td>cups</td>
<td>Common Unix Printing System</td>
</tr>
<tr>
<td>cvs</td>
<td>Current Version System</td>
</tr>
<tr>
<td>daemon</td>
<td>Disk And Execution MONitor</td>
</tr>
<tr>
<td>dc</td>
<td>Desk Calculator</td>
</tr>
<tr>
<td>dd</td>
<td>Disk Dump</td>
</tr>
<tr>
<td>df</td>
<td>Disk Free</td>
</tr>
<tr>
<td>diff</td>
<td>DIFFerence</td>
</tr>
<tr>
<td>dmesg</td>
<td>diagnostic message</td>
</tr>
<tr>
<td>du</td>
<td>Disk Usage</td>
</tr>
<tr>
<td>ed</td>
<td>editor</td>
</tr>
<tr>
<td>egrep</td>
<td>Extended GREP</td>
</tr>
<tr>
<td>elf</td>
<td>Extensible Linking Format</td>
</tr>
<tr>
<td>elm</td>
<td>ELectronic Mail</td>
</tr>
<tr>
<td>emacs</td>
<td>Editor MACroS</td>
</tr>
<tr>
<td>eval</td>
<td>EVALuate</td>
</tr>
<tr>
<td>ex</td>
<td>EXtended</td>
</tr>
<tr>
<td>exec</td>
<td>EXECute</td>
</tr>
<tr>
<td>fd</td>
<td>file descriptors</td>
</tr>
<tr>
<td>fg</td>
<td>ForeGround</td>
</tr>
<tr>
<td>fgrep</td>
<td>Fixed GREP</td>
</tr>
<tr>
<td>fmt</td>
<td>format</td>
</tr>
<tr>
<td>fsck</td>
<td>File System ChecK</td>
</tr>
<tr>
<td>fstab</td>
<td>FileSystem TABle</td>
</tr>
<tr>
<td>fvwm</td>
<td>F<em>*</em> Virtual Window Manager</td>
</tr>
<tr>
<td>gawk</td>
<td>GNU AWK</td>
</tr>
<tr>
<td>gpg</td>
<td>GNU Privacy Guard</td>
</tr>
<tr>
<td>groff</td>
<td>GNU troff</td>
</tr>
<tr>
<td>hal</td>
<td>Hardware Abstraction Layer</td>
</tr>
<tr>
<td>joe</td>
<td>Joe’s Own Editor</td>
</tr>
<tr>
<td>ksh</td>
<td>Korn SHell</td>
</tr>
<tr>
<td>lame</td>
<td>Lame Ain’t an MP3 Encoder</td>
</tr>
<tr>
<td>lex</td>
<td>LEXical analyser</td>
</tr>
<tr>
<td>lisp</td>
<td>LISt Processing  Lots of Irritating Superfluous Parentheses</td>
</tr>
<tr>
<td>ln</td>
<td>LiNk</td>
</tr>
<tr>
<td>lpr</td>
<td>Line PRint</td>
</tr>
<tr>
<td>ls</td>
<td>list</td>
</tr>
<tr>
<td>lsof</td>
<td>LiSt Open Files</td>
</tr>
<tr>
<td>m4</td>
<td>Macro processor Version 4</td>
</tr>
<tr>
<td>man</td>
<td>MANual pages</td>
</tr>
<tr>
<td>mawk</td>
<td>Mike Brennan’s AWK</td>
</tr>
<tr>
<td>mc</td>
<td>Midnight Commander</td>
</tr>
<tr>
<td>mkfs</td>
<td>MaKe FileSystem</td>
</tr>
<tr>
<td>mknod</td>
<td>MaKe NODe</td>
</tr>
<tr>
<td>motd</td>
<td>Message of The Day</td>
</tr>
<tr>
<td>mozilla</td>
<td>MOsaic GodZILLa</td>
</tr>
<tr>
<td>mtab</td>
<td>Mount TABle</td>
</tr>
<tr>
<td>mv</td>
<td>MoVe</td>
</tr>
<tr>
<td>nano</td>
<td>Nano’s ANOther editor</td>
</tr>
<tr>
<td>nawk</td>
<td>New AWK</td>
</tr>
<tr>
<td>nl</td>
<td>Number of Lines</td>
</tr>
<tr>
<td>nm</td>
<td>names</td>
</tr>
<tr>
<td>nohup</td>
<td>No HangUP</td>
</tr>
<tr>
<td>nroff</td>
<td>New ROFF</td>
</tr>
<tr>
<td>od</td>
<td>Octal Dump</td>
</tr>
<tr>
<td>passwd</td>
<td>PASSWorD</td>
</tr>
<tr>
<td>pg</td>
<td>pager</td>
</tr>
<tr>
<td>pico</td>
<td>PIne’s message COmposition editor</td>
</tr>
<tr>
<td>pine</td>
<td>“Program for Internet News &amp; Email”  “Pine is not Elm”</td>
</tr>
<tr>
<td>ping</td>
<td>拟声 又  Packet InterNet Grouper</td>
</tr>
<tr>
<td>pirntcap</td>
<td>PRINTer CAPability</td>
</tr>
<tr>
<td>popd</td>
<td>POP Directory</td>
</tr>
<tr>
<td>pr</td>
<td>pre</td>
</tr>
<tr>
<td>printf</td>
<td>PRINT Formatted</td>
</tr>
<tr>
<td>ps</td>
<td>Processes Status</td>
</tr>
<tr>
<td>pty</td>
<td>pseudo tty</td>
</tr>
<tr>
<td>pushd</td>
<td>PUSH Directory</td>
</tr>
<tr>
<td>pwd</td>
<td>Print Working Directory</td>
</tr>
<tr>
<td>rc</td>
<td>runcom  run command, rc还是plan9的shell</td>
</tr>
<tr>
<td>rev</td>
<td>REVerse</td>
</tr>
<tr>
<td>rm</td>
<td>ReMove</td>
</tr>
<tr>
<td>rn</td>
<td>Read News</td>
</tr>
<tr>
<td>roff</td>
<td>RunOFF</td>
</tr>
<tr>
<td>rpm</td>
<td>RPM Package Manager  RedHat Package Manager</td>
</tr>
<tr>
<td>rsh, rlogin, rvim中的r</td>
<td>Remote</td>
</tr>
<tr>
<td>rxvt</td>
<td>ouR XVT</td>
</tr>
<tr>
<td>seamoneky</td>
<td>我</td>
</tr>
<tr>
<td>sed</td>
<td>Stream EDitor</td>
</tr>
<tr>
<td>seq</td>
<td>SEQuence</td>
</tr>
<tr>
<td>shar</td>
<td>SHell ARchive</td>
</tr>
<tr>
<td>slrn</td>
<td>S-Lang rn</td>
</tr>
<tr>
<td>ssh</td>
<td>Secure SHell</td>
</tr>
<tr>
<td>ssl</td>
<td>Secure Sockets Layer</td>
</tr>
<tr>
<td>stty</td>
<td>Set TTY</td>
</tr>
<tr>
<td>su</td>
<td>Substitute User</td>
</tr>
<tr>
<td>svn</td>
<td>SubVersioN</td>
</tr>
<tr>
<td>tar</td>
<td>Tape ARchive</td>
</tr>
<tr>
<td>tcsh</td>
<td>TENEX C shell</td>
</tr>
<tr>
<td>tee</td>
<td>T (T形水管接口)</td>
</tr>
<tr>
<td>telnet</td>
<td>TEminaL over Network</td>
</tr>
<tr>
<td>termcap</td>
<td>terminal capability</td>
</tr>
<tr>
<td>terminfo</td>
<td>terminal information</td>
</tr>
<tr>
<td>tex</td>
<td>τέχνη的缩写，希腊文art</td>
</tr>
<tr>
<td>tr</td>
<td>traslate</td>
</tr>
<tr>
<td>troff</td>
<td>Typesetter new ROFF</td>
</tr>
<tr>
<td>tsort</td>
<td>Topological SORT</td>
</tr>
<tr>
<td>tty</td>
<td>TeleTypewriter</td>
</tr>
<tr>
<td>twm</td>
<td>Tom’s Window Manager</td>
</tr>
<tr>
<td>tz</td>
<td>TimeZone</td>
</tr>
<tr>
<td>udev</td>
<td>Userspace DEV</td>
</tr>
<tr>
<td>ulimit</td>
<td>User’s LIMIT</td>
</tr>
<tr>
<td>umask</td>
<td>User’s MASK</td>
</tr>
<tr>
<td>uniq</td>
<td>UNIQue</td>
</tr>
<tr>
<td>vi</td>
<td>VIsual  Very Inconvenient</td>
</tr>
<tr>
<td>vim</td>
<td>Vi IMproved</td>
</tr>
<tr>
<td>wall</td>
<td>write all</td>
</tr>
<tr>
<td>wc</td>
<td>Word Count</td>
</tr>
<tr>
<td>wine</td>
<td>WINE Is Not an Emulator</td>
</tr>
<tr>
<td>xargs</td>
<td>eXtended ARGuments</td>
</tr>
<tr>
<td>xdm</td>
<td>X Display Manager</td>
</tr>
<tr>
<td>xlfd</td>
<td>X Logical Font Description</td>
</tr>
<tr>
<td>xmms</td>
<td>X Multimedia System</td>
</tr>
<tr>
<td>xrdb</td>
<td>X Resources DataBase</td>
</tr>
<tr>
<td>xwd</td>
<td>X Window Dump</td>
</tr>
<tr>
<td>yacc</td>
<td>yet another compiler compiler</td>
</tr>
<tr>
<td>Fish</td>
<td>the Friendly Interactive SHell</td>
</tr>
<tr>
<td>su</td>
<td>Switch User</td>
</tr>
<tr>
<td>MIME</td>
<td>Multipurpose Internet Mail Extensions</td>
</tr>
<tr>
<td>ECMA</td>
<td>European Computer Manufacturers Association</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[plantUML的使用]]></title>
      <url>/2016/07/05/160705_plantuml/</url>
      <content type="html"><![CDATA[<h2 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h2><p><img src="http://ww1.sinaimg.cn/large/610dc034jw1f566a296rpj20lc0sggoj.jpg" alt="就问你美不美"></p>
<a id="more"></a>
<hr>
<table>
<thead>
<tr>
<th>注释</th>
<th>符号</th>
<th>图释</th>
<th>箭头指向</th>
<th>关系</th>
<th>代码体现</th>
</tr>
</thead>
<tbody>
<tr>
<td>Extension Generalization<br>(<strong>泛化</strong>也就是<strong>继承</strong>)</td>
<td><code>&lt;l-</code>&nbsp;&nbsp;&nbsp;</td>
<td><img src="http://hi.csdn.net/attachment/201104/22/0_1303436788Qi60.gif" alt="image"></td>
<td>带三角箭头的实线，箭头指向父类</td>
<td>是一种继承关系,它指定了子类如何特化父类的所有特征和行为</td>
<td></td>
</tr>
<tr>
<td>Composition(聚合)</td>
<td><code>o--</code></td>
<td><img src="http://hi.csdn.net/attachment/201104/22/0_1303436811y36B.gif" alt="image"></td>
<td>带空心菱形的实心线，菱形指向整体</td>
<td>是整体与部分的关系</td>
<td>成员变量</td>
</tr>
<tr>
<td>Aggregation(组合)</td>
<td><code>*--</code></td>
<td><img src="http://hi.csdn.net/attachment/201104/22/0_1303436817mqXK.gif" alt="image"></td>
<td>带实心菱形的实线，菱形指向整体</td>
<td>是整体与部分的关系</td>
<td>成员变量</td>
</tr>
<tr>
<td>Realization(实现)</td>
<td><code>..l&gt;</code></td>
<td><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_47.gif" alt="image"></td>
<td>带三角箭头的虚线，箭头指向接口</td>
<td>是一种类与接口的关系，表示类是接口所有特征和行为的实现</td>
<td></td>
</tr>
<tr>
<td>Association(关联)</td>
<td><code>--&gt;</code></td>
<td><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_41.gif" alt="image"></td>
<td>带普通箭头的实心线，指向被拥有者</td>
<td>是一种拥有的关系,它使一个类知道另一个类的属性和方法</td>
<td>成员变量</td>
</tr>
<tr>
<td>Dependency(依赖)</td>
<td><code>..&gt;</code></td>
<td><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_129.gif" alt="image"></td>
<td>带箭头的虚线，指向被使用者</td>
<td>是一种使用的关系,所以要尽量不使用双向的互相依赖</td>
<td>局部变量、方法的参数或者对静态方法的调用</td>
</tr>
</tbody>
</table>
<p><img src="http://www.hubwiz.com/course/54f40b69e564e50cfccbad4c/img/relationships2.png" alt="image"></p>
<blockquote>
<p>各种关系的强弱顺序</p>
<ul>
<li>泛化(继承) = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖</li>
</ul>
</blockquote>
<hr>
<p><img src="http://hi.csdn.net/attachment/201202/29/0_1330497855hqk2.gif" alt="各种类图关系"></p>
<h2 id="关系上的标识"><a href="#关系上的标识" class="headerlink" title="关系上的标识"></a>关系上的标识</h2><h2 id="添加方法"><a href="#添加方法" class="headerlink" title="添加方法"></a>添加方法</h2><h2 id="定义可访问性"><a href="#定义可访问性" class="headerlink" title="定义可访问性"></a>定义可访问性</h2><table>
<thead>
<tr>
<th>符号</th>
<th style="text-align:center">字段图标</th>
<th style="text-align:center">方法图标</th>
<th>权限</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-</code></td>
<td style="text-align:center"><img src="http://zh.plantuml.com/PRIVATE_FIELD.png" alt="image"></td>
<td style="text-align:center"><img src="http://zh.plantuml.com/PRIVATE_METHOD.png" alt="image"></td>
<td>private</td>
</tr>
<tr>
<td><code>#</code></td>
<td style="text-align:center"><img src="http://zh.plantuml.com/PROTECTED_FIELD.png" alt="image"></td>
<td style="text-align:center"><img src="http://zh.plantuml.com/PROTECTED_METHOD.png" alt="image"></td>
<td>protected</td>
</tr>
<tr>
<td><code>~</code></td>
<td style="text-align:center"><img src="http://zh.plantuml.com/PACKAGE_PRIVATE_FIELD.png" alt="image"></td>
<td style="text-align:center"><img src="http://zh.plantuml.com/PACKAGE_PRIVATE_METHOD.png" alt="image"></td>
<td>package private</td>
</tr>
<tr>
<td><code>+</code></td>
<td style="text-align:center"><img src="http://zh.plantuml.com/PUBLIC_FIELD.png" alt="image"></td>
<td style="text-align:center"><img src="http://zh.plantuml.com/PUBLIC_METHOD.png" alt="image"></td>
<td>public</td>
</tr>
</tbody>
</table>
<ul>
<li>通常情况这样是不容易被理解的<blockquote>
<p><img src="http://s.plantuml.com/imgp/h0_classes_006.png" alt="image"></p>
</blockquote>
</li>
<li>我们可以设置不显示图片，以<code>-</code>、<code>#</code>、<code>~</code>、<code>+</code>来表是，加上这句话<code>skinparam classAttributeIconSize 0</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">skinparam classAttributeIconSize <span class="number">0</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</div><div class="line">    - String driver</div><div class="line">    + String oil</div><div class="line">    </div><div class="line">    + <span class="function">String <span class="title">say</span><span class="params">()</span></span></div><div class="line">    # String <span class="title">do</span><span class="params">()</span></div><div class="line">    ~ String <span class="title">eat</span><span class="params">()</span></div><div class="line">    - String <span class="title">lov</span><span class="params">()</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">class bmw implements Car&#123;</div><div class="line">    + <span class="function"><span class="keyword">private</span> <span class="title">drive</span><span class="params">()</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xjlkb.com1.z0.glb.clouddn.com/visibatily1.png" alt="image"><br><img src="http://7xjlkb.com1.z0.glb.clouddn.com/visibatily2.png" alt="image"></p>
<h2 id="高级类体"><a href="#高级类体" class="headerlink" title="高级类体"></a>高级类体</h2><ul>
<li>可以自己指定分隔符</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">abstract class CarFactory&#123;</div><div class="line"></div><div class="line">.. 此处是属性 ..</div><div class="line">    &#123;static&#125; String hello   :静态属性 下划线</div><div class="line"></div><div class="line">-- 此处是方法 --</div><div class="line">     - String say()</div><div class="line"></div><div class="line">==此处是抽象方法==</div><div class="line">    &#123;abstract&#125; void methods()   :抽象方法 斜体</div><div class="line">&#125;</div><div class="line"></div><div class="line">abstract class CarFactory2&#123;</div><div class="line">    &#123;static&#125; String hello   :静态属性 下划线</div><div class="line">    - String say()</div><div class="line">    &#123;abstract&#125; void methods()   :抽象方法 斜体</div><div class="line">&#125;</div><div class="line">abstract class CarFactory3&#123;</div><div class="line"></div><div class="line">    &#123;static&#125; String hello   :静态属性 下划线</div><div class="line">    - String say()</div><div class="line">    &#123;abstract&#125; void methods()   :抽象方法 斜体</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xjlkb.com1.z0.glb.clouddn.com/separate.png" alt="分隔符"></p>
<ul>
<li>代码可以看出来，如果属性不仅跟着类下方写的话，访问权限的图标就会由图片变成<strong><code>-</code></strong>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">abstract class CarFactory&lt;&lt;Car&gt;&gt;&#123;</div><div class="line">    &#123;abstract&#125; Car build()</div><div class="line">&#125;</div><div class="line">note left: 我不知道该说啥</div><div class="line"></div><div class="line">class CarBuilder</div><div class="line">note right : 我是一个车</div><div class="line">class CarBuilder&lt;&lt;Car&gt;&gt; &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Cars&#123;</div><div class="line">    String word()</div><div class="line">&#125;</div><div class="line">note top : &quot;hello &lt;/br&gt;&quot;</div><div class="line"></div><div class="line">annotation superwarnings</div><div class="line"></div><div class="line">enum Time&#123;</div><div class="line">    DAYS</div><div class="line">    HOURS</div><div class="line">&#125;</div><div class="line">/&apos;设置note的颜色&apos;/</div><div class="line">note top of CarBuilder #pink</div><div class="line">  In java, &lt;size:18&gt;every&lt;/size&gt; &lt;u&gt;class&lt;/u&gt;</div><div class="line">  &lt;b&gt;extends&lt;/b&gt;</div><div class="line">  &lt;i&gt;this&lt;/i&gt; one.</div><div class="line">end note</div></pre></td></tr></table></figure>
<p><img src="http://7xjlkb.com1.z0.glb.clouddn.com/umlnote2.png" alt="umlnote"></p>
<h2 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class Foo&lt;? extends Element&gt; &#123;</div><div class="line">  int size()</div><div class="line">&#125;</div><div class="line">Foo *- Element</div></pre></td></tr></table></figure>
<p><img src="http://s.plantuml.com/imgp/h0_classes_017.png" alt="image"></p>
<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">package &quot;Classic Collections&quot; #DDDDDD &#123;</div><div class="line">  Object &lt;|-- ArrayList</div><div class="line">&#125;</div><div class="line"></div><div class="line">package net.sourceforge.plantuml &#123;</div><div class="line">  Object &lt;|-- Demo1</div><div class="line">  Demo1 *- Demo2</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://s.plantuml.com/imgp/h0_classes_019.png" alt="image"></p>
<h2 id="包的样式"><a href="#包的样式" class="headerlink" title="包的样式"></a>包的样式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">scale 750 width</div><div class="line">package foo1 &lt;&lt;Node&gt;&gt; &#123;</div><div class="line">  class Class1</div><div class="line">&#125;</div><div class="line"></div><div class="line">package foo2 &lt;&lt;Rect&gt;&gt; &#123;</div><div class="line">  class Class2</div><div class="line">&#125;</div><div class="line"></div><div class="line">package foo3 &lt;&lt;Folder&gt;&gt; &#123;</div><div class="line">  class Class3</div><div class="line">&#125;</div><div class="line"></div><div class="line">package foo4 &lt;&lt;Frame&gt;&gt; &#123;</div><div class="line">  class Class4</div><div class="line">&#125;</div><div class="line"></div><div class="line">package foo5 &lt;&lt;Cloud&gt;&gt; &#123;</div><div class="line">  class Class5</div><div class="line">&#125;</div><div class="line"></div><div class="line">package foo6 &lt;&lt;Database&gt;&gt; &#123;</div><div class="line">  class Class6</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://s.plantuml.com/imgp/h0_classes_020.png" alt="image"></p>
<h2 id="类之间的关系-1"><a href="#类之间的关系-1" class="headerlink" title="类之间的关系"></a>类之间的关系</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class Student &#123;</div><div class="line">  Name</div><div class="line">&#125;</div><div class="line">Student &quot;0..*&quot; - &quot;1..*&quot; Course</div><div class="line">(Student, Course) .. Enrollment</div><div class="line"></div><div class="line">class Enrollment &#123;</div><div class="line">  drop()</div><div class="line">  cancel()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://s.plantuml.com/imgp/h0_classes_031.png" alt="image"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class Student &#123;</div><div class="line">  Name</div><div class="line">&#125;</div><div class="line">Student &quot;0..*&quot; -- &quot;1..*&quot; Course  //决定因素 就在于 是一个-还是--</div><div class="line">(Student, Course) . Enrollment</div><div class="line"></div><div class="line">class Enrollment &#123;</div><div class="line">  drop()</div><div class="line">  cancel()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://s.plantuml.com/imgp/h0_classes_032.png" alt="image"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux Shell 命令行及脚本编程]]></title>
      <url>/2016/07/03/160703_linuxShellLine/</url>
      <content type="html"><![CDATA[<h2 id="Linux-及-Linux-Shell-简介"><a href="#Linux-及-Linux-Shell-简介" class="headerlink" title="Linux 及 Linux Shell 简介"></a>Linux 及 Linux Shell 简介</h2><p><img src="http://ww3.sinaimg.cn/large/610dc034gw1f5pu0w0r56j20m80rsjuy.jpg" alt="image"></p>
<a id="more"></a>
<h3 id="1-1-5-Linux的理念"><a href="#1-1-5-Linux的理念" class="headerlink" title="1.1.5 Linux的理念"></a>1.1.5 Linux的理念</h3><ul>
<li>小即是美</li>
<li>让程序只做好一件事</li>
<li>可移植性比效率更重要</li>
<li>一切皆文件</li>
<li>使用<code>Shell</code>脚本来提高效率和可移植性</li>
<li>避免使用可定制性低下的用户界面</li>
<li>所有程序都是数据的过滤器</li>
</ul>
<h3 id="1-2-什么是Linux-Shell"><a href="#1-2-什么是Linux-Shell" class="headerlink" title="1.2 什么是Linux Shell"></a>1.2 什么是Linux Shell</h3><ul>
<li><code>Shell</code> 是一个用户程序，或是一个为用户与系统交互提供的环境。</li>
<li><code>Shell</code> 是一个执行从标准输入设备读入命令的语言解释程序。</li>
<li>当你登录活或打开控制台时<code>Shell</code>就会执行。</li>
<li><code>Shell</code> 不是系统内核的一部分，但是它使用系统内核执行程序，创建文件等。</li>
<li><code>Shell</code>进程会提供一个命令行提示符，普通用户用<code>$</code>作提示符，超级用户(<code>root</code>)用<code>#</code>作提示符。</li>
</ul>
<blockquote>
<p><code>Shell</code>编辑和回调命令</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>CTRL + W</td>
<td>删除光标位置钱的单词</td>
</tr>
<tr>
<td>CTRL + U</td>
<td>清空行</td>
</tr>
<tr>
<td>Tab</td>
<td>自动补全文件名的单词</td>
</tr>
<tr>
<td>CTRL + R</td>
<td>搜索先前使用的命令</td>
</tr>
<tr>
<td>CTRL + C</td>
<td>中止当前命令</td>
</tr>
<tr>
<td>CTRL + D</td>
<td>退出登录</td>
</tr>
<tr>
<td>ECS + T</td>
<td>调换光标钱的两个单词</td>
</tr>
<tr>
<td>上/下箭头</td>
<td>删除光标位置钱的单词</td>
</tr>
</tbody>
</table>
<blockquote>
<p>当用户准备结束登陆对话进程时，可以输入<code>logout</code>、<code>exit</code>或<code>CTRL + D</code>组合键结束登录。</p>
</blockquote>
<h3 id="1-3-Shell-的种类"><a href="#1-3-Shell-的种类" class="headerlink" title="1.3 Shell 的种类"></a>1.3 Shell 的种类</h3><ul>
<li><code>Shell</code> 有多种类型，最常用的有三种，<code>Bourne(sh)</code>、<code>C Shell</code>、<code>Korn Shell</code>。</li>
<li>使用 <code>cat /etc/shells</code>命令查看系统中所有可用的Shell。</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>cat   /etc/shells</td>
<td>查看系统中所有可用的Shell</td>
</tr>
<tr>
<td>grep root /etc/passwd</td>
<td>查看用户使用的哪种Shell</td>
</tr>
<tr>
<td>echo $SHELL</td>
<td>查看用户使用的哪种Shell</td>
</tr>
<tr>
<td>ps -p $$</td>
<td>查看用户使用的哪种Shell</td>
</tr>
</tbody>
</table>
<h3 id="1-5-Shell脚本是什么"><a href="#1-5-Shell脚本是什么" class="headerlink" title="1.5 Shell脚本是什么"></a>1.5 Shell脚本是什么</h3><ul>
<li><code>Shell</code> 脚本是<code>Linux/Unix</code>编程环境的重要组成部分。</li>
<li><code>Shell</code> 脚本一般有以下及部分组成。</li>
</ul>
<table>
<thead>
<tr>
<th>解释</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Shell关键字</td>
<td>例如：if…else、for do … done</td>
</tr>
<tr>
<td>Shell 命令</td>
<td>例如:export、echo、exit、pwd、return</td>
</tr>
<tr>
<td>Linux 命令</td>
<td>例如:date、rm、mkdir</td>
</tr>
<tr>
<td>文本处理功能</td>
<td>例如:awk、cut、sed、grep</td>
</tr>
<tr>
<td>函数</td>
<td>例如:通常函数吧一些常用的功能放在一起。例如，/etc/init.d 目录中的大部分或全部系统Shell脚本所使用的函数都包含在文件 /etc/init.d/functions中。</td>
</tr>
<tr>
<td>控制流语句</td>
<td>例如:例如 if…then…else 或 执行重复操作的Shell循环。</td>
</tr>
</tbody>
</table>
<h3 id="1-6-为什么使用Shell脚本"><a href="#1-6-为什么使用Shell脚本" class="headerlink" title="1.6 为什么使用Shell脚本"></a>1.6 为什么使用Shell脚本</h3><blockquote>
<p>使用<code>Shell</code>的简单原因</p>
</blockquote>
<ul>
<li>使用简单</li>
<li>节省时间</li>
<li>可以创建你自己的自动化工具和应用程序</li>
<li>使系统管理任务自动化</li>
<li>因为脚本经过很好的测试，所以使用脚本做类似配置服务或系统管理任务时，发生错误的机会将大大减少。</li>
</ul>
<hr>
<blockquote>
<p>我们经常使用的脚本实例有</p>
</blockquote>
<ul>
<li>监控你的<code>Linux</code>系统</li>
<li>备份数据和创建快照</li>
<li>创建邮件告警系统</li>
<li>查找耗尽系统资源的进程</li>
<li>查找是否所有的网络服务都正常运行等等。</li>
</ul>
<h3 id="1-7-创建你的第一个Shell-脚本"><a href="#1-7-创建你的第一个Shell-脚本" class="headerlink" title="1.7 创建你的第一个Shell 脚本"></a>1.7 创建你的第一个Shell 脚本</h3><ul>
<li>一个<code>Shell</code>脚本就是一个包含<code>ASCII</code>文本的文件。</li>
</ul>
<blockquote>
<p>如果你像成功的写一个<code>Shell</code>脚本，你需要做一下三件事情。</p>
<ul>
<li>写一个脚本</li>
<li>允许<code>Shell</code>执行它</li>
<li>把它放在<code>Shell</code>可以找到的地方</li>
</ul>
</blockquote>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash				(1)</div><div class="line"># My First Script		(2)</div><div class="line">ls -l .*				(3)</div></pre></td></tr></table></figure>
<ul>
<li>脚本的第一行是很重要的，他是一个告诉<code>Shell</code>使用什么程序解释器的特别指示。</li>
<li>上面例子中使用的是<code>/bin/bash</code>。如果使用其他脚本语言比如<code>Perl</code>、<code>awk</code>、<code>python</code>等也同样使用这个机制。</li>
<li>脚本的第二行是一个注释。每一行中出现在<code>#</code>符号后面的任何内容都将被<code>bash</code>忽略。</li>
<li>默认情况下，<code>Linux</code>是不允许文件执行的（权限不足）,使用下面命令赋予权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chmod 755 myscript</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>权限</th>
<th>注释</th>
</tr>
</thead>
<tbody>
<tr>
<td>777</td>
<td>全部权限</td>
</tr>
<tr>
<td>755</td>
<td>读写和执行的权限</td>
</tr>
<tr>
<td>700</td>
<td>脚本私有，只有你可以读写和执行</td>
</tr>
</tbody>
</table>
<ul>
<li>切换到你保存脚本的目录，执行脚本。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./ myscript</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="初识Linux-Shell"><a href="#初识Linux-Shell" class="headerlink" title="初识Linux Shell"></a>初识Linux Shell</h2><h3 id="2-1-Bash-Shell"><a href="#2-1-Bash-Shell" class="headerlink" title="2.1 Bash Shell"></a>2.1 Bash Shell</h3><h3 id="2-1-1-Bash-简介"><a href="#2-1-1-Bash-简介" class="headerlink" title="2.1.1 Bash 简介"></a>2.1.1 Bash 简介</h3><ul>
<li><code>Bash</code>是一个与<code>Bourne Shell</code>兼容的、执行从输入设备或文件读取命令的命令语言解释器。</li>
<li><code>Bash</code> 与原来的<code>Unix sh Shell</code>向后兼容，并且融合了一些有用的<code>Korn Shell</code> 和 <code>C Shell</code>的特性。它相对于<code>sh</code>在编程和交互式使用两方面都做了功能改进。</li>
<li><code>Bash</code>具有很好的一致性，它使用构建时发现编译平台特征的配置系统，因此可以构建在几乎任何一种<code>Unix</code>版本上。</li>
</ul>
<h3 id="2-1-2-Bash-提供的改进"><a href="#2-1-2-Bash-提供的改进" class="headerlink" title="2.1.2 Bash 提供的改进"></a>2.1.2 Bash 提供的改进</h3><ul>
<li><code>Bash</code> 语法是<code>Bourne Shell</code> 语法的一个改进版本。大多数情况下<code>Bourne Shel</code>l脚本可以被<code>Bash</code>正常地运行。</li>
</ul>
<h2 id="2-2-Shell-在Linux环境中的角色"><a href="#2-2-Shell-在Linux环境中的角色" class="headerlink" title="2.2 Shell 在Linux环境中的角色"></a>2.2 Shell 在Linux环境中的角色</h2><h3 id="2-2-1-与登录Shell相关的文件"><a href="#2-2-1-与登录Shell相关的文件" class="headerlink" title="2.2.1 与登录Shell相关的文件"></a>2.2.1 与登录Shell相关的文件</h3><ul>
<li>用户登录时<code>Bash</code>将会使用以下初始化文件和启动脚本。</li>
</ul>
<table>
<thead>
<tr>
<th>文件目录</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/etc/profile</code></td>
<td>系统级的初始化文件，定义了一些环境变量，由登录<code>Shell</code>调用执行</td>
</tr>
<tr>
<td><code>/etc/bash.bashrc</code> 、 <code>/etc/bashrc</code></td>
<td>其文件名根据不同的<code>Linux</code>发行版本而异，每个交互式Shell的系统级的启动脚本，定义了一些函数和别名</td>
</tr>
<tr>
<td><code>/etc/bash.logout</code></td>
<td>系统级的登录<code>Shell</code>清理脚本，当登录<code>Shell</code>退出时执行，部分<code>Linux</code>发行版默认没有此文件</td>
</tr>
<tr>
<td><code>$HOME/.bash_profile</code>、<code>$HOME/.bash_login</code>、<code>$HOME/.profile</code></td>
<td>用户个人初始化脚本，由登录Shell调用执行。这三个脚本只有一个会被执行，按照此顺序查找，第一个才能在的将被执行。</td>
</tr>
<tr>
<td><code>$Home/.bashrc</code></td>
<td>用户个人的每个交互式<code>Shell</code>的启动脚本</td>
</tr>
<tr>
<td><code>$HOME/.bash_logout</code></td>
<td>用户个人的登录<code>Shell</code>清理脚本，当登录<code>Shell</code>退出时执行</td>
</tr>
<tr>
<td><code>$HOME/.inputrc</code></td>
<td>用户个人的由<code>readline</code>使用的启动脚本，定义了处理某些情况下的键盘映射</td>
</tr>
</tbody>
</table>
<h3 id="2-2-2-Bash-启动脚本"><a href="#2-2-2-Bash-启动脚本" class="headerlink" title="2.2.2 Bash 启动脚本"></a>2.2.2 Bash 启动脚本</h3><ul>
<li>在用户登录时自动执行的脚本主要用来设置一些环境变量，例如设置<code>JAVA_HOME</code>的路径。</li>
</ul>
<table>
<thead>
<tr>
<th>目录</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/etc/profile</code></td>
<td>当用户在运行级别3登录系统时首先运行</td>
</tr>
<tr>
<td><code>/etc/profile.d</code></td>
<td>当<code>/etc/profile</code>运行时，会调用该目录下的脚本</td>
</tr>
<tr>
<td><code>$HOME/.bash_profile</code>、<code>$HOME/.bash_login</code>和<code>$HOME/.profile</code></td>
<td>在<code>/etc/profile</code>运行后第一个存在的被运行</td>
</tr>
<tr>
<td><code>$HOME/.bashrc</code></td>
<td>上述脚本的第一个运行后即调用此脚本</td>
</tr>
<tr>
<td><code>/etc/bashrc</code></td>
<td>将被<code>$HOME/.bashrc</code>调用运行</td>
</tr>
<tr>
<td><code>/etc/profile.d</code></td>
<td>此目录下的脚本将被<code>/etc/bashrc</code>或<code>/etc/bash.bashrc</code>调用运行</td>
</tr>
</tbody>
</table>
<blockquote>
<p><code>Bash</code>启动脚本主要设置的环境有</p>
</blockquote>
<ul>
<li>设置环境变量<code>PATH</code>和<code>PSI</code></li>
<li>通过变量<code>EDITOR</code>设置默认的文本编辑器</li>
<li>设置默认的<code>umask</code>（文件或目录的权限属性）</li>
<li>覆盖活移除不想要的变量或别名</li>
<li>设置别名</li>
<li>加载函数</li>
</ul>
<h3 id="2-2-3-定制自己的Bash登录脚本"><a href="#2-2-3-定制自己的Bash登录脚本" class="headerlink" title="2.2.3 定制自己的Bash登录脚本"></a>2.2.3 定制自己的Bash登录脚本</h3><h3 id="2-2-4-Bash-退出脚本"><a href="#2-2-4-Bash-退出脚本" class="headerlink" title="2.2.4 Bash 退出脚本"></a>2.2.4 Bash 退出脚本</h3><blockquote>
<p>当登录<code>Shell</code>退出时，如果<code>$HOME/.bash_logout</code>脚本存在的话，Bash会读取并执行脚本的内容，此脚本的主要用途：</p>
</blockquote>
<ul>
<li>使用<code>clear</code>命令清理你的屏幕终端输出</li>
<li>移除一些临时文件</li>
<li>自动运行一些命令或脚本等</li>
</ul>
<h3 id="2-2-5-定制自己的Bash-退出脚本"><a href="#2-2-5-定制自己的Bash-退出脚本" class="headerlink" title="2.2.5 定制自己的Bash 退出脚本"></a>2.2.5 定制自己的Bash 退出脚本</h3><h3 id="2-2-6-有效的登录Shell路径"><a href="#2-2-6-有效的登录Shell路径" class="headerlink" title="2.2.6 有效的登录Shell路径"></a>2.2.6 有效的登录<code>Shell</code>路径</h3><ul>
<li><code>/etc/shells</code> 是一个包含有效的登录<code>Shell</code>全路径名的文本文件，这个文件会被<code>chsh</code>命令（变更你的登录Shell）所使用也可被其他程序查询使用。比如<code>ftp</code>服务，查看<code>etc/shells</code>的内容。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/shells</div><div class="line">out:</div><div class="line">/bin/sh</div><div class="line">/bin/bash</div><div class="line">/bin/nologin</div><div class="line">/bin/tcsh</div><div class="line">/bin/cs</div><div class="line">/bin/ksh</div></pre></td></tr></table></figure>
<blockquote>
<p>你也可以使用which命令显示shell的全路径</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ which bash</div><div class="line">out:	</div><div class="line">/bin/bash</div></pre></td></tr></table></figure>
<h2 id="2-3-SHell中的变量"><a href="#2-3-SHell中的变量" class="headerlink" title="2.3 SHell中的变量"></a>2.3 SHell中的变量</h2><h3 id="2-3-1-Shell-中变量的类型"><a href="#2-3-1-Shell-中变量的类型" class="headerlink" title="2.3.1 Shell 中变量的类型"></a>2.3.1 Shell 中变量的类型</h3><ul>
<li>Shell中有两种变量的类型：系统变量（环境变量）和用户自定义的变量（本地变量或Shell变量）</li>
<li>系统变量由<code>Linux Bash Shell</code> 创建和维护的变量，你可以通过修改系统变量，如<code>PS1</code>、<code>PATH</code>、<code>LANG</code>、<code>HISTSIZE</code>、<code>ISPLAY</code>等，配置<code>Shell</code>的样式</li>
<li>常用的系统变量（环境变量）</li>
</ul>
<table>
<thead>
<tr>
<th>系统变量</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>BASH_VERSION</code></td>
<td>保存<code>bash</code>实例的版本</td>
</tr>
<tr>
<td><code>DISPLAY</code></td>
<td>设置<code>X display</code>名字</td>
</tr>
<tr>
<td><code>EDITOR</code></td>
<td>设置默认的文本编辑器</td>
</tr>
<tr>
<td><code>HISTFILE</code></td>
<td>保存命令历史的文件名</td>
</tr>
<tr>
<td><code>HISTFILESIZE</code></td>
<td>命令历史文件所能包含的最大行数</td>
</tr>
<tr>
<td><code>HISTSIZE</code></td>
<td>记录在命令历史中的命令数</td>
</tr>
<tr>
<td><code>HOME</code></td>
<td>当前用户的主目录</td>
</tr>
<tr>
<td><code>HOSTNAME</code></td>
<td>你的计算机的主机名</td>
</tr>
<tr>
<td><code>IFS</code></td>
<td>定义<code>Shell</code>的内部字段分隔符，一般是空格符、制表符和换行符</td>
</tr>
<tr>
<td><code>PATH</code></td>
<td>搜索命令的路径。它是以冒号分隔的目录列表。<code>Linux</code>下的标准命令之所以能在<code>Shell</code>命令行下的任何路径直接使用，就是因为这些标准命令所在的目录的路径定义在了<code>PATH</code>变量中，<code>Shell</code>会在<code>PATH</code>环境变量指定的全部路径中搜索任何匹配的可执行文件</td>
</tr>
<tr>
<td><code>PS1</code></td>
<td>你的提示符设定</td>
</tr>
<tr>
<td><code>PWD</code></td>
<td>当前工作目录。由<code>cd</code>命令设置</td>
</tr>
<tr>
<td><code>SHELL</code></td>
<td>设置登录<code>Shell</code>的路径</td>
</tr>
<tr>
<td><code>TERM</code></td>
<td>设置你的登录终端的类型</td>
</tr>
<tr>
<td><code>TMOUT</code></td>
<td>用于<code>Shell</code>内建命令<code>read</code>的默认超时时间。单位为秒。在交互式的<code>Shell</code>中，此变量的值作为发出命令后等待用户输入的秒数，如果没有输入用户将会自动退出</td>
</tr>
</tbody>
</table>
<ul>
<li>你可以添加上述变量到你账号的home目录下的初始化文件中，比如<code>~/.bash_profile</code>文件。这样每次登录系统时，这些变量会自动设置成你需要的值。</li>
<li>使用<code>env</code>或者<code>printenv</code>查看当前<code>Shell</code>的所有系统变量。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ env</div><div class="line">或者</div><div class="line">$ printenv</div><div class="line">out:</div><div class="line">USER=BENNY</div><div class="line">LOGNAME=BENNY</div><div class="line">HOME=/home/usr</div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="2-3-2-如何自定义变量和给变量赋值"><a href="#2-3-2-如何自定义变量和给变量赋值" class="headerlink" title="2.3.2 如何自定义变量和给变量赋值"></a>2.3.2 如何自定义变量和给变量赋值</h3><ul>
<li>在<code>Shell</code>中创建和设置变量是很简单的，其语法如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">varName=varValue</div></pre></td></tr></table></figure>
<blockquote>
<p>使用<code>=</code>给变量赋值，输入的次序是：<code>变量名</code>、<code>赋值操作符</code>、<code>赋予的值</code>。<br>赋值操作符<strong><code>=</code></strong>的周围<strong>不要有任何空格</strong>,比如下面的变量定义将会得到<code>command not found</code>的错误。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">varName=  varValue</div><div class="line">varName  =varValue</div><div class="line">varName=  varValue</div></pre></td></tr></table></figure>
<ul>
<li>可以将任意字符集合复制给一个变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ username=&quot;benny&quot;</div></pre></td></tr></table></figure>
<ul>
<li>或者</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ username=benny</div></pre></td></tr></table></figure>
<ul>
<li>将一个数字复制给变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ var=1</div></pre></td></tr></table></figure>
<ul>
<li>需要注意的是Shell的默认复制是字符串赋值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ var=$var+1</div><div class="line">$ echo $var</div><div class="line">out:</div><div class="line">1+1</div></pre></td></tr></table></figure>
<ul>
<li>在<code>Bash</code>中，要将算数表达式的数值给一个变量，可以使用<strong><code>let</code></strong>命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ let var=2+1</div><div class="line">$ echo $var</div><div class="line">out:</div><div class="line">3</div></pre></td></tr></table></figure>
<ul>
<li>将一个变量的值直接复制给另一个变量，如下所示：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ a=3</div><div class="line">$ b=$a</div><div class="line">$ echo $b</div><div class="line">out:</div><div class="line">3</div></pre></td></tr></table></figure>
<ul>
<li>将命令的执行结果复制给变量，如下所示：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ var=$(pwd)</div><div class="line">$ echo $var</div><div class="line">out：</div><div class="line">/home/benny</div></pre></td></tr></table></figure>
<ul>
<li>将<code>Bash</code>的内置命令<code>read</code>读入的内容复制给变量：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ echo -n &quot;Enter var:&quot;; read var</div><div class="line">Enter var:	此处需要你自己输入（比如输入520）</div><div class="line">$ echo $var</div><div class="line">out:</div><div class="line">520</div></pre></td></tr></table></figure>
<h3 id="2-3-3-变量命名规则"><a href="#2-3-3-变量命名规则" class="headerlink" title="2.3.3 变量命名规则"></a>2.3.3 变量命名规则</h3><ul>
<li>变量名必须以<strong>字母</strong>或<strong>下划线</strong>字符<strong><code>_</code></strong>开头，后面跟字母、数字或下划线字符，第一个字符不能为数字。不要使用<strong><code>？</code></strong> <strong><code>、</code></strong> <strong><code>*</code></strong>和其他特殊字符命名你的变量。</li>
<li>变量名是大小写敏感的，比如定义几个变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ echo $var</div><div class="line">out:	123</div><div class="line">$ echo $Var</div><div class="line">out:	1</div><div class="line">$ echo $vAR</div><div class="line">out:	2</div><div class="line">$ echo $VAR</div><div class="line">out:	3</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-3-4-实例：使用echo和printf-打印变量的值"><a href="#2-3-4-实例：使用echo和printf-打印变量的值" class="headerlink" title="2.3.4 实例：使用echo和printf 打印变量的值"></a>2.3.4 实例：使用echo和printf 打印变量的值</h3><ul>
<li>使用echo命令显示变量值，还可以使用printf命令显示变量值。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ var=123</div><div class="line">$ printf &quot;%s\n&quot; $var</div><div class="line">out:</div><div class="line">123</div></pre></td></tr></table></figure>
<ul>
<li>printf 命令的语法格式如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">printf &lt;FORMAT&gt; &lt;ARGUMENTS...&gt;</div></pre></td></tr></table></figure>
<ul>
<li>一个典型的    <code>printf</code>命令调用如下所示：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">printf &quot;FirstName&quot; : %s\nLastName:%s&quot;  &quot;$FIRSTNAME&quot;  &quot;LASTNAME&quot;</div></pre></td></tr></table></figure>
<ul>
<li><code>$FIRSTNAME</code>是格式规范，而后面的两个变量则是作为参数传入。格式用字符串中的<code>%s</code>是指示打印参数的格式类型的分类符，这些分类符有不同的名字。</li>
<li>分类符表</li>
<li>参考书中<code>page</code>20</li>
<li>转义字符表</li>
<li>参考书中<code>page</code>20</li>
<li>与<code>printf</code>命令不同，<code>echo</code>命令没有提供格式化选项，因此<code>echo</code>命令比<code>printf</code>命令简单易用</li>
<li><code>echo</code>命令也提供转义字符的功能，可以是用转义字符与<code>printf</code>命令中的基本相同，但需使用<code>-e</code>选项激活转义字符功能。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ var=10</div><div class="line">$ echo &quot;the number is $var&quot;</div><div class="line">out:</div><div class="line">the number is 10</div><div class="line">$ echo -e &quot;Username: $USER\tHome directory:$HOME\n&quot;</div><div class="line">out:</div><div class="line">Username:benny Home directory: /home/beny</div></pre></td></tr></table></figure>
<ul>
<li>有时，你需要使用<strong><code>${}</code></strong>避免一些歧义</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ LOGDIR=&quot;/var/log/&quot;</div><div class="line">$ echo &quot;the log file is $LOGDIRmessage&quot;</div><div class="line">out:</div><div class="line">the log file is</div></pre></td></tr></table></figure>
<ul>
<li>Bash将尝试找一个LOGDIRmessages的变量，而不是$LOGDIR,为了避免这种歧义，我们需要使用${}语法，如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo &quot;the log file is $&#123;LOGDIR&#125;messages&quot;</div><div class="line">the log file is /var/log/messages</div></pre></td></tr></table></figure>
<h3 id="2-3-5-变量的引用"><a href="#2-3-5-变量的引用" class="headerlink" title="2.3.5 变量的引用"></a>2.3.5 变量的引用</h3><ul>
<li>引用一个变量的时候，最好使用双引号将变量名括起来。例如：`”$cariable”‘</li>
<li>这样可以防止被引用的变量值中的特殊字符（除：$、<code>&#39;</code>和<code>\</code>）被解释为其他错误含义。</li>
<li>使用双引号可以防止变量中的值中由多个单词租车发给你的字符串分离，一个双引号括起来的变量使它自身编程一个单一词组，即使值中包含空格。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ var]# for var in $list</div><div class="line">&gt; do </div><div class="line">&gt; echo &quot;$var&quot;</div><div class="line">&gt; done</div><div class="line"></div><div class="line">one</div><div class="line">two</div><div class="line">three</div><div class="line"></div><div class="line">[root@iZ251k7t70aZ var]# for var in &quot;$list&quot;</div><div class="line">&gt; do echo &quot;$var&quot;</div><div class="line">&gt; done</div><div class="line"></div><div class="line">one two three</div></pre></td></tr></table></figure>
<ul>
<li><code>注意：</code> 单引号的操作类似与双引号，但是它不允许引用变量，因为在单引号中字符<code>&#39;$&#39;</code>的特殊含义将会失效。每个特殊的字符，除了字符<code>&#39;</code>，都将按字面含义解释。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ var]# var=123</div><div class="line">[root@iZ251k7t70aZ var]# echo &apos;$var&apos;</div><div class="line">$var</div><div class="line">[root@iZ251k7t70aZ var]# echo &quot;$var&quot;</div><div class="line">123</div></pre></td></tr></table></figure>
<h3 id="2-3-6-export"><a href="#2-3-6-export" class="headerlink" title="2.3.6 export"></a>2.3.6 export</h3><ul>
<li>使用<code>export</code>命令可以将变量被子<code>Shell</code>引用，可以使用<code>export</code>命令将变量进行输出</li>
</ul>
<blockquote>
<p>命令：export [-fnp] [变量或函数名称]=[变量设置值] </p>
</blockquote>
<ul>
<li><code>-f</code>表示<code>export</code>的一个函数；<code>-n</code>表示将<code>export</code>属性从指定变量多函数上移除   <code>p</code>表示打印当前Shell所有输出的变量，与单独执行<code>export</code>命令结果相同</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[root@iZ251k7t70aZ var]# echo $$</div><div class="line">17691</div><div class="line">[root@iZ251k7t70aZ var]# java_home=/usr/local</div><div class="line">[root@iZ251k7t70aZ var]# echo $java_home</div><div class="line">/usr/local</div><div class="line">[root@iZ251k7t70aZ var]# bash</div><div class="line">[root@iZ251k7t70aZ var]# echo $$</div><div class="line">17738</div><div class="line">[root@iZ251k7t70aZ var]# echo $java_home</div><div class="line"></div><div class="line">[root@iZ251k7t70aZ var]# exit</div><div class="line">exit</div><div class="line">[root@iZ251k7t70aZ var]# export java_home</div><div class="line">[root@iZ251k7t70aZ var]# bash</div><div class="line">[root@iZ251k7t70aZ var]# echo $$</div><div class="line">17750</div><div class="line">[root@iZ251k7t70aZ var]# echo $java_home</div><div class="line">/usr/local</div><div class="line">[root@iZ251k7t70aZ var]# bash</div><div class="line">[root@iZ251k7t70aZ var]# echo $$</div><div class="line">17762</div><div class="line">[root@iZ251k7t70aZ var]# echo $java_home </div><div class="line">/usr/local</div><div class="line">[root@iZ251k7t70aZ var]#</div></pre></td></tr></table></figure>
<blockquote>
<p>系统变量会自动输出到后续命令的执行环境</p>
</blockquote>
<hr>
<h3 id="2-3-7-如何删除变量"><a href="#2-3-7-如何删除变量" class="headerlink" title="2.3.7　如何删除变量"></a>2.3.7　如何删除变量</h3><ul>
<li><code>bash</code>下使用<code>unset</code>命令来删除相应的变量或函数。unsert命令会自动</li>
</ul>
<blockquote>
<p>命令： unset [-fv] [变量或函数名称]</p>
</blockquote>
<ul>
<li><code>-f</code>选项表示删除一个已定义的函数；<code>-v</code>选项表示删除一个变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ var]# echo $java_home</div><div class="line">/usr/local</div><div class="line">[root@iZ251k7t70aZ var]# unset java_home</div><div class="line">[root@iZ251k7t70aZ var]# echo $java_home</div></pre></td></tr></table></figure>
<blockquote>
<p>使用<code>unset</code>命令不能删除一个只读的变量，否则将会出现类似如下的错误：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ var]# readonly java_home=/usr/local</div><div class="line">[root@iZ251k7t70aZ var]# echo $java_home</div><div class="line">/usr/local</div><div class="line">[root@iZ251k7t70aZ var]# unset java_home</div><div class="line">bash: unset: java_home: cannot unset: readonly variable</div></pre></td></tr></table></figure>
<h3 id="2-3-8-如何检查变量是否存在"><a href="#2-3-8-如何检查变量是否存在" class="headerlink" title="2.3.8 如何检查变量是否存在"></a>2.3.8 如何检查变量是否存在</h3><blockquote>
<p>命令：${ varName? ERROR : The Varibale is not defined}</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ var]# JAVA_HOME=/usr/local</div><div class="line">[root@iZ251k7t70aZ var]# echo $&#123;JAVA_HOME?ERROR:The variable is not defined&#125;</div><div class="line">/usr/local</div><div class="line">[root@iZ251k7t70aZ var]# unset JAVA_HOME</div><div class="line">[root@iZ251k7t70aZ var]# echo $&#123;JAVA_HOME?ERROR:The variable is not defined&#125;</div><div class="line">bash: JAVA_HOME: ERROR:The variable is not defined</div><div class="line">[root@iZ251k7t70aZ var]#</div></pre></td></tr></table></figure>
<h2 id="2-4-Shell环境进阶"><a href="#2-4-Shell环境进阶" class="headerlink" title="2.4 Shell环境进阶"></a>2.4 Shell环境进阶</h2><h3 id="2-4-1-回调历史命令"><a href="#2-4-1-回调历史命令" class="headerlink" title="2.4.1 回调历史命令"></a>2.4.1 回调历史命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ var]# history</div><div class="line">   44  ls</div><div class="line">   45  ./startup.sh</div><div class="line">   46  cd /usr</div><div class="line">   47  ls</div><div class="line">   48  cd local/</div><div class="line">   49  ls</div><div class="line">   50  c dtom</div><div class="line">   51  cd tomcat7/</div></pre></td></tr></table></figure>
<ul>
<li>在命令提示符下，可以通过<code>CTRL + R</code> 组合键输入相应的关键字可以搜索命令</li>
<li>在<code>Shell</code>命令提示符下，可以简单的输入!!，来重复执行上一条执行过的命令</li>
<li>你还可以回调最近一次执行的以指定字符开头的命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ var]# ls</div><div class="line">account  cache  cvs  db  empty  games  lib  local  lock  log  mail  nis  opt  preserve  racoon  run  spool  tmp  www  yp</div><div class="line">[root@iZ251k7t70aZ var]# !l</div><div class="line">ls</div><div class="line">account  cache  cvs  db  empty  games  lib  local  lock  log  mail  nis  opt  preserve  racoon  run  spool  tmp  www  yp</div></pre></td></tr></table></figure>
<ul>
<li>你可以使用由history命令列出的列表的行号来重新调用响应的命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ var]# history</div><div class="line"> 1052  ls -l</div><div class="line"> 1053  clear</div><div class="line"> 1054  ls</div><div class="line"> 1055  ls</div><div class="line"> 1056  clear</div><div class="line"> 1057  history</div><div class="line">[root@iZ251k7t70aZ var]# !1055</div><div class="line">ls</div><div class="line">account  cache  cvs  db  empty  games  lib  local  lock  log  mail  nis  opt  preserve  racoon  run  spool  tmp  www  yp</div><div class="line">[root@iZ251k7t70aZ var]#</div></pre></td></tr></table></figure>
<h3 id="2-4-2-Shell中的拓展"><a href="#2-4-2-Shell中的拓展" class="headerlink" title="2.4.2 Shell中的拓展"></a>2.4.2 Shell中的拓展</h3><ul>
<li><p><code>Shell</code>中的拓展有<strong>8</strong>中，分别是</p>
<ul>
<li>大括号拓展</li>
<li>波浪号拓展</li>
<li>参数和变量拓展</li>
<li>命令替换</li>
<li>算数拓展</li>
<li>进程替换</li>
<li>单词拆分</li>
<li>文件名拓展</li>
</ul>
</li>
<li><p>大括号拓展</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ var]# echo a&#123;b,c,d&#125;e</div><div class="line">abe ace ade</div><div class="line">[root@iZ251k7t70aZ var]# echo &#123;a..z&#125;</div><div class="line">a b c d e f g h i j k l m n o p q r s t u v w x y z</div><div class="line">[root@iZ251k7t70aZ var]# echo &#123;0..10&#125;</div><div class="line">0 1 2 3 4 5 6 7 8 9 10</div><div class="line">[root@iZ251k7t70aZ var]# echo &#123;5..-3&#125;</div><div class="line">5 4 3 2 1 0 -1 -2 -3</div><div class="line">[root@iZ251k7t70aZ var]# echo &#123;g..a&#125;</div><div class="line">g f e d c b a</div><div class="line">[root@iZ251k7t70aZ var]# </div><div class="line">[root@iZ251k7t70aZ var]# echo &#123;a..c&#125;&#123;1..3&#125;</div><div class="line">a1 a2 a3 b1 b2 b3 c1 c2 c3</div><div class="line">[root@iZ251k7t70aZ var]# echo a&#123;&#123;b,c,d&#125;a,&#123;e,f,g&#125;b,h&#125;i</div><div class="line">abai acai adai aebi afbi agbi ahi</div><div class="line">[root@iZ251k7t70aZ var]#</div></pre></td></tr></table></figure>
<ul>
<li>大括号可以拓展许多命令配合使用，使你的命令更简化</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 在当前文件夹下创建dir1 dir2 dir3</div><div class="line">[root@iZ251k7t70aZ local]# ls</div><div class="line">aegis  bin  etc  filedirectroy  games  include  lib  lib64  libexec  mvnreporsitory  mysql  pic  sbin  share  src  tomcat7</div><div class="line">[root@iZ251k7t70aZ local]# mkdir &#123;dir1,dir2,dir3&#125;</div><div class="line">[root@iZ251k7t70aZ local]# ls</div><div class="line">aegis  bin  dir1  dir2  dir3  etc  filedirectroy  games  include  lib  lib64  libexec  mvnreporsitory  mysql  pic  sbin  share  src  tomcat7</div><div class="line">[root@iZ251k7t70aZ local]# </div><div class="line"></div><div class="line"># 在当前文件夹下创建 dir1 dir2 dir3</div><div class="line">[root@iZ251k7t70aZ usr]# mkdir / &#123;dir1,dir2&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>Bash</code>4.0中还提供给了一些大括号的新功能，比如在序列表达式中指定一个增量<code>&lt;INCR&gt;</code></li>
</ul>
<blockquote>
<p>语法如下: {<start>..<end>..<incr>}</incr></end></start></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo &#123;1..10..2&#125;</div><div class="line">1   3   5   7   9</div></pre></td></tr></table></figure>
<ul>
<li>波浪号扩展可以用来指代你自己的主目录，或其他人的主目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ benny]# cd ~             #进入自己的主目录</div><div class="line">[root@iZ251k7t70aZ ~]# pwd</div><div class="line">/root</div><div class="line">[root@iZ251k7t70aZ ~]# cd ~benny            #进入benny的主目录</div><div class="line">[root@iZ251k7t70aZ benny]# pwd</div><div class="line">/home/benny</div><div class="line">[root@iZ251k7t70aZ benny]#</div></pre></td></tr></table></figure>
<ul>
<li><p><code>Bash</code>支持一下三种方式来实现文件名拓展</p>
<ul>
<li><code>*</code>    匹配任何字符串，包括空字符串</li>
<li><code>？</code>   匹配任意单个字符</li>
<li><code>[...]</code>匹配方括号内的任意字符</li>
</ul>
</li>
<li><p>列出所有以字母a或b开头的配置文件</p>
</li>
</ul>
<blockquote>
<p>ls /etc/[ab]*.conf</p>
</blockquote>
<h2 id="创建和使用别名"><a href="#创建和使用别名" class="headerlink" title="创建和使用别名"></a>创建和使用别名</h2><ul>
<li>在Linux系统环境下，我们通常需要使用命令行来处理一些任务，并且会很频繁的使用某些命令语句，为了节省时间，我们可以在文件<code>~/.bashrc</code>中为这些命令语句创建别名。</li>
</ul>
<blockquote>
<p>一旦你修改了<code>~/.bashrc</code>文件，你必须重新启动<code>Shell</code>后，新的设置才会生效。</p>
</blockquote>
<ul>
<li>语法如下：</li>
</ul>
<blockquote>
<p> alias name=’command’</p>
</blockquote>
<pre><code>+ name 用户自定义的用于别名的任意简短字符
+ command  任意linux命令
</code></pre><ul>
<li>打开当前目录下最后被修改的文件</li>
</ul>
<blockquote>
<p>alias Vim=’vim -ls -t | head -1’’</p>
</blockquote>
<ul>
<li>找出当前目录下，5个最大的文件</li>
</ul>
<blockquote>
<p>alias findbig=’find . -type f -exec ls -s {} \;’ | sort -n -r | head -5’</p>
</blockquote>
<ul>
<li><p>列出当前目录下所有文件，包括隐藏文件，并附加指示符和颜色表识</p>
<blockquote>
<p>  alias ls=’ls -aF –color==always’</p>
</blockquote>
</li>
<li><p>清楚全部历史命令记录和屏幕</p>
<blockquote>
<p>alias hcl=’history -c; clear’</p>
</blockquote>
</li>
<li><p>查看磁盘控件使用情况</p>
<blockquote>
<p>alias dus=’df -h’</p>
</blockquote>
</li>
<li><p>切换到不同目录</p>
<blockquote>
<p>alias ..=’cd ..’<br>alias …=’cd ../..’</p>
</blockquote>
</li>
<li><p><code>alias</code>命令查看所有别名</p>
</li>
<li><p>查看一个特定的别名</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ /]# alias dus=&apos;df -h&apos;</div><div class="line">[root@iZ251k7t70aZ /]# dus</div><div class="line">Filesystem            Size  Used Avail Use% Mounted on</div><div class="line">/dev/hda1              20G  7.7G   11G  42% /</div><div class="line">tmpfs                 501M     0  501M   0% /dev/shm</div><div class="line">[root@iZ251k7t70aZ /]# alias dus</div><div class="line">alias dus=&apos;df -h&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>当你想调用实际的命令而暂时停止使用别名</p>
<blockquote>
<p>$ \aliasname</p>
</blockquote>
</li>
<li><p>删除一个别名 <code>unalias</code></p>
<blockquote>
<p>unalias dus</p>
</blockquote>
</li>
<li><p>删除所有别名</p>
<blockquote>
<p>unalias -a</p>
</blockquote>
</li>
</ul>
<h2 id="2-4-4-修改Bash提示符"><a href="#2-4-4-修改Bash提示符" class="headerlink" title="2.4.4 修改Bash提示符"></a>2.4.4 修改<code>Bash</code>提示符</h2><blockquote>
<p>此处没懂</p>
</blockquote>
<h2 id="2-4-5-设置Shell选项"><a href="#2-4-5-设置Shell选项" class="headerlink" title="2.4.5 设置Shell选项"></a>2.4.5 设置<code>Shell</code>选项</h2><ul>
<li><code>set</code>可以设置的<code>Bash</code>选项</li>
</ul>
<blockquote>
<p>语法： set(选项)(参数)</p>
</blockquote>
<table>
<thead>
<tr>
<th>选项</th>
<th>注释</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a：</td>
<td>标示已修改的变量，以供输出至环境变量。</td>
</tr>
<tr>
<td>-b：</td>
<td>使被中止的后台程序立刻回报执行状态。</td>
</tr>
<tr>
<td>-C：</td>
<td>转向所产生的文件无法覆盖已存在的文件。</td>
</tr>
<tr>
<td>-d：</td>
<td>Shell预设会用杂凑表记忆使用过的指令，以加速指令的执行。使用-d参数可取消。</td>
</tr>
<tr>
<td>-e：</td>
<td>若指令传回值不等于0，则立即退出shell。</td>
</tr>
<tr>
<td>-f：</td>
<td>取消使用通配符。</td>
</tr>
<tr>
<td>-h：</td>
<td>自动记录函数的所在位置。</td>
</tr>
<tr>
<td>-H</td>
<td>Shell：可利用”!”加&lt;指令编号&gt;的方式来执行history中记录的指令。</td>
</tr>
<tr>
<td>-k：</td>
<td>指令所给的参数都会被视为此指令的环境变量。</td>
</tr>
<tr>
<td>-l：</td>
<td>记录for循环的变量名称。</td>
</tr>
<tr>
<td>-m：</td>
<td>使用监视模式。</td>
</tr>
<tr>
<td>-n：</td>
<td>只读取指令，而不实际执行。</td>
</tr>
<tr>
<td>-p：</td>
<td>启动优先顺序模式。</td>
</tr>
<tr>
<td>-P：</td>
<td>启动-P参数后，执行指令时，会以实际的文件或目录来取代符号连接。</td>
</tr>
<tr>
<td>-t：</td>
<td>执行完随后的指令，即退出shell。</td>
</tr>
<tr>
<td>-u：</td>
<td>当执行时使用到未定义过的变量，则显示错误信息。</td>
</tr>
<tr>
<td>-v：</td>
<td>显示shell所读取的输入值。</td>
</tr>
<tr>
<td>-x：</td>
<td>执行指令后，会先显示该指令及所下的参数。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>参数</th>
<th>状态</th>
<th>注释</th>
</tr>
</thead>
<tbody>
<tr>
<td>allexport</td>
<td>off</td>
<td>从设置开始标记所有新的和修改过的用于输出的变量                          </td>
</tr>
<tr>
<td>braceexpand</td>
<td>on</td>
<td>允许符号扩展,默认选项  </td>
</tr>
<tr>
<td>emacs</td>
<td>on</td>
<td>在进行命令编辑的时候,使用内建的emacs编辑器, 默认选项</td>
</tr>
<tr>
<td>errexit</td>
<td>off</td>
<td>如果一个命令返回一个非0退出状态值(失败),就退出.</td>
</tr>
<tr>
<td>errtrace</td>
<td>off</td>
</tr>
<tr>
<td>functrace</td>
<td>off</td>
</tr>
<tr>
<td>hashall</td>
<td>on</td>
</tr>
<tr>
<td>histexpand</td>
<td>on</td>
<td>在做临时替换的时候允许使用!和!! 默认选项</td>
</tr>
<tr>
<td>history</td>
<td>on</td>
<td>允许命令行历史,默认选项</td>
</tr>
<tr>
<td>ignoreeof</td>
<td>off</td>
<td>禁止coontrol-D的方式退出shell，必须输入exit。</td>
</tr>
<tr>
<td>interactive-comments</td>
<td>on</td>
<td>在交互式模式下， #用来表示注解</td>
</tr>
<tr>
<td>keyword</td>
<td>off</td>
<td>命令把关键字参数放在环境中</td>
</tr>
<tr>
<td>monitor</td>
<td>on</td>
<td>允许作业控制</td>
</tr>
<tr>
<td>noclobber</td>
<td>off</td>
<td>保护文件在使用重新动向的时候不被覆盖</td>
</tr>
<tr>
<td>noexec</td>
<td>off</td>
<td>在脚本状态下读取命令但是不执行，主要为了检查语法结构。</td>
</tr>
<tr>
<td>nolog</td>
<td>off</td>
</tr>
<tr>
<td>noglob</td>
<td>off</td>
<td>禁止路径名扩展，即关闭通配符     </td>
</tr>
<tr>
<td>notify</td>
<td>off</td>
<td>在后台作业以后通知客户</td>
</tr>
<tr>
<td>nounset</td>
<td>off</td>
<td>在扩展一个没有的设置的变量的时候，    显示错误的信息     </td>
</tr>
<tr>
<td>onecmd</td>
<td>off</td>
<td>在读取并执行一个新的命令后退出       </td>
</tr>
<tr>
<td>physical</td>
<td>off</td>
<td>如果被设置，则在使用pwd和cd命令时不使用符号连接的路径 而是物理路径</td>
</tr>
<tr>
<td>pipefail</td>
<td>off</td>
<td>限制错误。还可以使用trap来截获信号</td>
</tr>
<tr>
<td>posix</td>
<td>off</td>
<td>改变shell行为以便符合POSIX要求</td>
</tr>
<tr>
<td>privileged</td>
<td>off</td>
<td>一旦被设置，shell不再读取.profile文件和env文件 shell函数也不继承任何环境</td>
</tr>
<tr>
<td>verbose</td>
<td>off</td>
<td>为调试打开verbose模式</td>
</tr>
<tr>
<td>vi</td>
<td>off</td>
<td>在命令行编辑的时候使用内置的vi编辑器</td>
</tr>
<tr>
<td>xtrace</td>
<td>off</td>
<td>打开调试回响模式</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>开启</strong>一个<code>Bash</code>命令,关闭<code>Ctrl+d</code></li>
</ul>
<blockquote>
<p>set -o ignoreeof</p>
</blockquote>
<ul>
<li><strong>关闭</strong>一个<code>Bash</code>选项</li>
</ul>
<blockquote>
<p>set +o ignoreeof</p>
</blockquote>
<ul>
<li>查看由<code>Bash</code>内只命令<code>shopt</code>控制的<code>Bash</code>选项及其状态</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>状态</th>
</tr>
</thead>
<tbody>
<tr>
<td>cdable_vars</td>
<td>off</td>
</tr>
<tr>
<td>cdspell</td>
<td>off</td>
</tr>
<tr>
<td>checkhash</td>
<td>off</td>
</tr>
<tr>
<td>checkwinsize</td>
<td>on</td>
</tr>
<tr>
<td>cmdhist</td>
<td>on</td>
</tr>
<tr>
<td>dotglob</td>
<td>off</td>
</tr>
<tr>
<td>execfail</td>
<td>off</td>
</tr>
<tr>
<td>expand_aliases</td>
<td>on</td>
</tr>
<tr>
<td>extdebug</td>
<td>off</td>
</tr>
<tr>
<td>extglob</td>
<td>off</td>
</tr>
<tr>
<td>extquote</td>
<td>on</td>
</tr>
<tr>
<td>failglob</td>
<td>off</td>
</tr>
<tr>
<td>force_fignore</td>
<td>on</td>
</tr>
<tr>
<td>gnu_errfmt</td>
<td>off</td>
</tr>
<tr>
<td>histappend</td>
<td>off</td>
</tr>
<tr>
<td>histreedit</td>
<td>off</td>
</tr>
<tr>
<td>histverify</td>
<td>off</td>
</tr>
<tr>
<td>hostcomplete</td>
<td>on</td>
</tr>
<tr>
<td>huponexit</td>
<td>off</td>
</tr>
<tr>
<td>interactive_comments</td>
<td>on</td>
</tr>
<tr>
<td>lithist</td>
<td>off</td>
</tr>
<tr>
<td>login_shell</td>
<td>on</td>
</tr>
<tr>
<td>mailwarn</td>
<td>off</td>
</tr>
<tr>
<td>no_empty_cmd_completion</td>
<td>off</td>
</tr>
<tr>
<td>nocaseglob</td>
<td>off</td>
</tr>
<tr>
<td>nocasematch</td>
<td>off</td>
</tr>
<tr>
<td>nullglob</td>
<td>off</td>
</tr>
<tr>
<td>progcomp</td>
<td>on</td>
</tr>
<tr>
<td>promptvars</td>
<td>on</td>
</tr>
<tr>
<td>restricted_shell</td>
<td>off</td>
</tr>
<tr>
<td>shift_verbose</td>
<td>off</td>
</tr>
<tr>
<td>sourcepath</td>
<td>on</td>
</tr>
<tr>
<td>xpg_echo</td>
<td>off</td>
</tr>
</tbody>
</table>
<ul>
<li>使用<code>shopt</code>命令开启和关闭<code>Bash</code>选项的语法如下</li>
</ul>
<blockquote>
<p>shopt -s feature-name     # 开启一个Bash选项</p>
<p>shopt -u feature-name     # 关闭一个bash选项</p>
</blockquote>
<ul>
<li><code>shopt</code>命令，<code>cdspell</code>选项，用于检测<code>cd</code>命令中目录名字的拼写错误并纠正。错误检查包括调换的字符，缺少的字符，和重复的字符。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ ~]# cd /var/lid</div><div class="line">-bash: cd: /var/lid: No such file or directory</div><div class="line">[root@iZ251k7t70aZ ~]# shopt -s cdspell</div><div class="line">[root@iZ251k7t70aZ ~]# cd /var/lid</div><div class="line">/var/lib</div><div class="line">[root@iZ251k7t70aZ lib]# cd /var/lid</div><div class="line">/var/lib</div><div class="line">[root@iZ251k7t70aZ lib]# pwd</div><div class="line">/var/lib</div></pre></td></tr></table></figure>
<blockquote>
<p>选项<code>cdspell</code>只在交互式<code>Shell</code>中有效</p>
</blockquote>
<ul>
<li>你可以使用shopt和set为你定制一个Bash环境，编辑你的<code>~/.bashrc</code>文件，可以添加如下命令：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 纠正目录拼写</div><div class="line">shopt -q -s cdspell</div><div class="line"></div><div class="line"># 当终端创建口大小改变时，确保显示得到更新</div><div class="line">shopt -q -s extglob</div><div class="line"></div><div class="line">#开启扩展模式匹配特性</div><div class="line">shopt -q -s extglob</div><div class="line"></div><div class="line"># 退出时追加而不是重启命令历史</div><div class="line">shopt -s histpapperd</div><div class="line"></div><div class="line"># 使Bash尝试保存历史记录中多行命令的所有行</div><div class="line">shopt -q -s cmdhist</div><div class="line"></div><div class="line"># 得到后天任务结束的及时通知</div><div class="line">set -o notify</div></pre></td></tr></table></figure>
<h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><ul>
<li>使用declare命令定义一个新的环境变量”mylove”，并且将其值设置为”java”，输入如下命令：</li>
</ul>
<blockquote>
<p>declare mylove=’Visual C++’ #定义新环境变量</p>
</blockquote>
<ul>
<li>再使用set命令将新定义的变量输出为环境变量，输入如下命令：</li>
</ul>
<blockquote>
<p>set -a mylove #设置为环境变量</p>
</blockquote>
<ul>
<li>执行该命令后，将会新添加对应的环境变量。用户可以使用env命令和grep命令分别显示和搜索环境变量”mylove”，输入命令如下：</li>
</ul>
<blockquote>
<p>env | grep mylove #显示环境变量值</p>
<p>你可以定制系统范围的<code>Bash</code>环境，默认情况下，文件<code>/etc/profile</code>作为Bash的系统范围用户参数文件，而在<code>CentOS</code>,<code>Fedora</code>和<code>Redhat</code>下推荐的方法是使用目录<code>/etc/profle.d</code>中的文件。</p>
</blockquote>
<h2 id="3-常用Shell（Bash）命令"><a href="#3-常用Shell（Bash）命令" class="headerlink" title="3 常用Shell（Bash）命令"></a>3 常用<code>Shell（Bash）</code>命令</h2><h2 id="4-Shell-命令进阶"><a href="#4-Shell-命令进阶" class="headerlink" title="4 Shell 命令进阶"></a>4 <code>Shell</code> 命令进阶</h2><h2 id="5-Shell-编程基础"><a href="#5-Shell-编程基础" class="headerlink" title="5 Shell 编程基础"></a>5 <code>Shell</code> 编程基础</h2><h3 id="5-1-Shell-脚本的第一行-quot-quot-Shebang"><a href="#5-1-Shell-脚本的第一行-quot-quot-Shebang" class="headerlink" title="5.1 Shell 脚本的第一行 &quot;#!&quot; (Shebang)"></a>5.1 <code>Shell</code> 脚本的第一行 <code>&quot;#!&quot; (Shebang)</code></h3><ul>
<li><code>#!</code>（Shebang）是一个有<code>#</code> <code>!</code>构成的字符序列，出现在脚本文件第一行的前两个字符，用于指示一个解释程序。</li>
<li>语法格式：</li>
</ul>
<blockquote>
<p><code>#！INTERPRETER [OPTION]...</code><br>INTERPRETER必须是一个程序的绝对路径</p>
</blockquote>
<ul>
<li>当一个内容经以<code>#!</code>开头的脚本作为一个程序运行时，程序加载器会将脚本第一行的<code>#!</code>之后的内容解析为一个解释程序，然互殴用这个指定的解释程序替代其运行，并将脚本的路径作为第一个参数传递给解释程序。</li>
<li>例如一个脚本的路径名为<code>path/to/script</code> 并且它的内容如下行开头</li>
</ul>
<blockquote>
<p><code>#!/bin/sh</code>
　</p>
<ul>
<li>程序加载器被指示用解释程序<code>/bin/bash</code>替代其运行，并将路径<code>path/to/script</code>作为第一个参数传递给解释程序<code>/bin/bash</code></li>
<li>几乎所有的<code>Bash</code>脚本的内容都是以<code>/bin/bash</code>开头，并确保<code>Bash</code>将作为脚本的解释程序</li>
<li>如果没有指定<code>#!</code>，则会默认用<code>/bin/sh</code>作为解释程序，但还是推荐你将<code>Bash</code>脚本的第一行设为<code>#!/bin/bash</code></li>
</ul>
</blockquote>
<p>5.2 <code>Shell</code> 中的注释 </p>
<ul>
<li>在<code>Shell</code>脚本中，<code>#</code>是注释表示符。</li>
<li>在<code>Shell</code>脚本中, 还可以使用Bash的HERE DOCUMENT 特性添加多行的注释内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">echo &quot;下面是注释&quot;</div><div class="line"></div><div class="line">&lt;&lt;COMMENT</div><div class="line">    comment line 1</div><div class="line">    comment line 2</div><div class="line">    comment line 3</div><div class="line">COMMENT</div><div class="line"></div><div class="line">echo &quot;上面是注释&quot;</div></pre></td></tr></table></figure>
<h3 id="5-3-设置脚本的权限和执行脚本"><a href="#5-3-设置脚本的权限和执行脚本" class="headerlink" title="5.3 设置脚本的权限和执行脚本"></a>5.3 设置脚本的权限和执行脚本</h3><ul>
<li>在运行一个<code>Shell</code>脚本之前，确保<code>Shell</code>脚本文件具有可执行的权限，否则会报错<code>permission denied</code></li>
<li>给脚本添加执行权限</li>
</ul>
<blockquote>
<p><code>chmod u+x ./multicomments.sh</code></p>
</blockquote>
<ul>
<li>给所有用户执行脚本的权限</li>
</ul>
<blockquote>
<p><code>chmod +x ./multicomments.sh</code></p>
</blockquote>
<ul>
<li><p>运行一个<code>Shell</code>脚本，使用<code>绝对路径</code>或<code>相对路径</code>两种方式都可以。</p>
</li>
<li><p>(1)绝对路径</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ /home/benny/scripts/helloworld.sh</div><div class="line">hello world!</div></pre></td></tr></table></figure>
<ul>
<li>(2)相对路径</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cd /home/benny</div><div class="line">$ ./scripts/hellowrold.sh</div><div class="line">hello world!</div></pre></td></tr></table></figure>
<ul>
<li>如果想像运行一个命令一样运行一个脚本，即不需要指定绝对路径或相对路径只需要输入脚本名称即可。</li>
<li>要实现这一目的，<strong>需要将脚本所在目录的路径添加到你的<code>PATH</code>环境变量中</strong>，那么就可以在任何路径下直接运行目录<code>PATH</code>环境变量中。</li>
<li>例如：将目录路径<code>home/benny/scripts</code>加入<code>PATH</code>环境变量中，就可以在任何路径下直接运行目录<code>home/benny/scripts</code>下的<code>Shell</code>脚本。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$   export PATH=$PATH:/home/benny/scripts</div><div class="line">$   cd /tmp</div><div class="line">$   hellowrold.sh</div><div class="line">out :  hello world</div></pre></td></tr></table></figure>
<blockquote>
<p>通过<code>export</code>命令添加的<code>PATH</code>变量会在终端关闭后消失，所以建议通过编辑<code>/etc/profile</code>来改<code>PATH</code>环境变量,也可以改根目录下的<code>.bashrc</code>（即：<code>~/.bashrc</code>）</p>
</blockquote>
<h2 id="5-4-Shell变量进阶"><a href="#5-4-Shell变量进阶" class="headerlink" title="5.4 Shell变量进阶"></a>5.4 <code>Shell</code>变量进阶</h2><h3 id="5-4-1-Bash中的参数拓展"><a href="#5-4-1-Bash中的参数拓展" class="headerlink" title="5.4.1 Bash中的参数拓展"></a>5.4.1 Bash中的参数拓展</h3><h3 id="5-4-2-Bash的内部变量"><a href="#5-4-2-Bash的内部变量" class="headerlink" title="5.4.2 Bash的内部变量"></a>5.4.2 Bash的内部变量</h3><ul>
<li><p>Bath的内部变量会影响Bash脚本的行为。</p>
</li>
<li><p><code>$BATH</code> 用于引用Bash实例的全路径名</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo $BATH</div><div class="line">/bin/bash</div></pre></td></tr></table></figure>
<ul>
<li><code>$HOME</code> 当前用户的home目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ ~]# echo &quot;your home directory is $HOME&quot;</div><div class="line">your home directory is /root</div></pre></td></tr></table></figure>
<ul>
<li><code>$IFS</code> 是内部字段分隔符的缩写。此变量决定当Bath解析字符串时将怎样识别字段，或单词分界线。</li>
<li>变量<code>$IFS</code> 的默认值是空格（空格、制表符和换行），但可以被修改。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ ~]# set x y z    #使用set命令，将x，y，z赋予位置参数1,2,3</div><div class="line">[root@iZ251k7t70aZ ~]# IFS=&quot;:;-&quot;    #指定Bash的内部字段分隔符</div><div class="line">[root@iZ251k7t70aZ ~]# echo &quot;$*&quot;    #拓展特殊参数*</div><div class="line">x:y:z</div></pre></td></tr></table></figure>
<ul>
<li><p><code>$SECONDS</code>变量，脚本已经运行的秒数</p>
</li>
<li><p><code>$TMOUT</code>变量，如果<code>$TMOUT</code>变量指定了一个非零的值，此值就会被内部指令<code>read</code>作为默认的超市秒数，在一个交互式的Shell中$TMOUT的值被作为命令行提示符等待输入的秒数，如果在指定的秒数内没有输入，Bash将自动被终结。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">echo &quot;开始执行脚本&quot;</div><div class="line">set -o nounset</div><div class="line">TMOUT=3</div><div class="line"></div><div class="line">echo &quot;Are you sure (y/n)&quot;</div><div class="line">read input</div><div class="line"></div><div class="line">if [&quot;$input&quot; == &quot;y&quot;]</div><div class="line">then</div><div class="line">        echo &quot;Continue ....&quot;</div><div class="line">else</div><div class="line">        echo &quot;Exit!&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<ul>
<li><code>UID</code>当前用户账号标识码（<code>ID</code>号）与<code>/etc/passwd</code>中记录的相同，此变量记录的是当前账户的真实<code>ID</code>,即使该账户通过<code>su</code>命令已经临时获得了另一个账号的权限，<code>$UID</code>是一个只读变量，不接受从命令行或脚本的修改。</li>
<li>使用<code>$UID</code>变量来判断当前账号是否为<code>root</code></li>
</ul>
<h3 id="5-4-3-Bash-中的位置参数和特殊参数"><a href="#5-4-3-Bash-中的位置参数和特殊参数" class="headerlink" title="5.4.3 Bash 中的位置参数和特殊参数"></a>5.4.3 Bash 中的位置参数和特殊参数</h3><ul>
<li><code>Bash</code>中的位置参数事由除<code>0</code>以外的一个或多个数字表示的参数。</li>
<li>位置参数事由<code>Shell</code>和<code>Shell</code>的函数呗引用时有<code>Shel</code>或<code>Shell</code>函数的参数赋值，并且可以使用Bash的内部命令<code>set</code>来重新赋值，位置参数可以被引用为<code>${N}</code>,或当N只含有一个数字时被引为<code>$N</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ myscript]# set 123 four five</div><div class="line">[root@iZ251k7t70aZ myscript]# echo &quot;$1 $2 $3 $4&quot;</div><div class="line">123 four five</div></pre></td></tr></table></figure>
<ul>
<li>多于一个数字的位置参数在拓展时必须放在大括号中，比如<code>${10}</code></li>
<li>位置参数不能用过赋值语句来赋值，只能通过<code>Bash</code>的命令<code>set</code>和<code>shift</code>来设置和取消他们，当<code>shell</code>函数运行时候，位置参数会被临时替换。</li>
</ul>
<ul>
<li>bash 对一些参数的处理比较特殊，<strong>这些参数只能被引用，但不能修改他们的值</strong>，这些特殊参数分别是<code>*</code>、<code>@</code>、 <code>#</code>、 <code>?</code>、 <code>-</code>、<code>$</code>、<code>!</code>、<code>0</code>、<code>_</code></li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>释义</th>
<th>更多</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*</code></td>
<td>拓展为从1开始的所有位置参数</td>
<td></td>
</tr>
<tr>
<td><code>@</code></td>
<td>也将拓展为从1开始的所有位置参数</td>
</tr>
<tr>
<td><code>#</code></td>
<td>拓展为位置参数的个数</td>
</tr>
<tr>
<td><code>?</code></td>
<td>拓展为最近一个在前台执行的命令的退出状态</td>
</tr>
<tr>
<td><code>-</code></td>
<td>拓展为当前的选项标志</td>
</tr>
<tr>
<td><code>$</code></td>
<td>拓展为当前Shell的进程号</td>
</tr>
<tr>
<td><code>!</code></td>
<td>拓展为最近一次执行的后台命令的进程号</td>
</tr>
<tr>
<td><code>0</code></td>
<td>拓展为Shell或Shell脚本的名称</td>
</tr>
<tr>
<td><code>_</code></td>
<td>在Shell启动时，它被设置为开始运行的shell或者Sehll脚本中</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>参数</th>
<th>释义</th>
<th>更多</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$0</code></td>
<td>这个程式的执行名字</td>
</tr>
<tr>
<td><code>$n</code></td>
<td>这个程式的第n个参数值，n=1..9</td>
</tr>
<tr>
<td><code>$*</code></td>
<td>这个程式的所有参数,此选项参数可超过9个。</td>
</tr>
<tr>
<td><code>$#</code></td>
<td>这个程式的参数个数</td>
</tr>
<tr>
<td><code>$$</code></td>
<td>这个程式的PID(脚本运行的当前进程ID号)</td>
</tr>
<tr>
<td><code>$!</code></td>
<td>执行上一个背景指令的PID(后台运行的最后一个进程的进程ID号)</td>
</tr>
<tr>
<td><code>$?</code></td>
<td>执行上一个指令的返回值 (显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误)</td>
</tr>
<tr>
<td><code>$-</code></td>
<td>显示shell使用的当前选项，与set命令功能相同</td>
</tr>
<tr>
<td><code>$@</code></td>
<td>跟$*类似，但是可以当作数组用</td>
</tr>
</tbody>
</table>
<h2 id="5-4-4-使用declare命令指定变量的类型"><a href="#5-4-4-使用declare命令指定变量的类型" class="headerlink" title="5.4.4 使用declare命令指定变量的类型"></a>5.4.4 使用<code>declare</code>命令指定变量的类型</h2><ul>
<li><p><code>declare</code>命令是Bash的内部命令，用于声明变量和修改变量的属性，与Bash的另一个内部命令typeset的用法和用途完全相同</p>
</li>
<li><p><code>-r</code> 选项，declare命令将吧指定的变量定义为只读变量，这些变量将不能再赋予新值或被清除</p>
</li>
<li><p>-i 选项，declare命令将吧指定的变量定义为整数型变量，赋予整形变量的任何类型的值都将被换成整数 </p>
</li>
<li>-x 选项，declare命令将吧指定的变量通过环境输出到后续命令</li>
<li>-p 选项，declare命令将显示指定变量的属性和值</li>
</ul>
<blockquote>
<p>有时一个任务或命令会运行很长时间，如果不能确定这个任务什么时候才能结束，这是最好就是把它放到后台运行，然后一旦退出系统，这个任务将被终止</p>
</blockquote>
<ul>
<li><code>nohup</code> 命令能让运行的命令或脚本在你退出系统后继续在后台运行。</li>
<li>语法如下：</li>
</ul>
<blockquote>
<p>nohup COMMAND [ARG]… &amp;</p>
</blockquote>
<ul>
<li>COMMAND：Shell脚本或命令的名称</li>
<li>[ARG]：脚本或命令的参数</li>
<li>&amp;：nohup命令不能自动地将任务放在后台运行，你必须明确地在nohup命令的末尾添加操作控制符 <code>&amp;</code></li>
</ul>
<blockquote>
<p>使用nohup命令运行一个脚本script.sh</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ nohup sh script.sh &amp;</div><div class="line">[1] 12496</div><div class="line">$  nohup : appending output to &apos;nohup.out&apos;</div></pre></td></tr></table></figure>
<ul>
<li>其中<code>[1]</code>是任务编号，<code>12496</code>是任务的进程号，最后一句表示当前脚本运行输出的内容都将被写入到但钱目录下的文件 nohup.out中。</li>
<li>当你退出系统后在重新登陆，你仍会看到脚本script.sh在后台运行。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ps -ef | grep 12496</div><div class="line">out:benny 12496 1 0 18:15? 00:00:00 sh script.sh</div></pre></td></tr></table></figure>
<p>5.4.5 Bash 中的数组变量</p>
<ul>
<li>声明一个数组的语法：</li>
</ul>
<blockquote>
<p>ARRAYNAME[INDEX]=value</p>
</blockquote>
<ul>
<li>INDEX手机一正数，或是一个值为正数的算数表达式</li>
<li>显式的声明一个数组变量使使用Bash的内部命令declare</li>
</ul>
<blockquote>
<p>$ declare -a ARRAYNAME</p>
</blockquote>
<ul>
<li>带有一个索引编号的声明也是可以接受的，但索引编号将被忽略，数组的属性可以使用Bash的内部命令declare和readonly指定，这些属性将被应用到数组的所有变量。</li>
<li>定一个数组变量</li>
</ul>
<blockquote>
<p>$ declare -a linux={‘java’,’php’,’javascript’}</p>
</blockquote>
<ul>
<li>数组变量还可以使用复合赋值的格式</li>
</ul>
<blockquote>
<p>$ ARRAYNAME={value1,value2,value3…valueN}</p>
</blockquote>
<ul>
<li>若要引用数中某一项的内容，必须使用<code>{}</code>，<strong>如果索引编号是<code>@</code>或<code>*</code>,那么数组的所有成员都将被使用</strong>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$   echo $&#123;linux[@]&#125;</div><div class="line"></div><div class="line">out: java php javascript</div><div class="line"></div><div class="line">$   arr1=(one two three)</div><div class="line">$   echo $&#123;arr1[0]&#125; $&#123;arr1[1]&#125; $&#123;arr1[2]&#125; </div><div class="line"></div><div class="line">out: one two three</div><div class="line"></div><div class="line">$   echo $&#123;arr1[*]&#125;</div><div class="line"></div><div class="line">out: one two three</div><div class="line"></div><div class="line">$   echo $&#123;arr1[@]&#125;</div><div class="line"></div><div class="line">out: one two three</div><div class="line"></div><div class="line">$   arr1[3]=four</div><div class="line">$   echo $&#123;arr1[@]&#125;</div><div class="line"></div><div class="line">out:one two three four</div><div class="line"></div><div class="line">$   echo $arr1</div><div class="line"></div><div class="line">out:one</div></pre></td></tr></table></figure>
<ul>
<li><strong>如果引用数组时，不指定索引编号，则引用的将是数组中的第一元素，即使用索引编号为0</strong></li>
<li>使用<code>unset</code>命令可以<strong>删除一个数组或数组中的成员变量</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$   unset arr1[2]</div><div class="line">$   echo $&#123;arr1[@]&#125;</div><div class="line"></div><div class="line">out: one two four</div><div class="line"></div><div class="line">$   unset arr1</div><div class="line">$   echo $&#123;arr1[@]&#125;</div><div class="line"></div><div class="line">out:</div></pre></td></tr></table></figure>
<h2 id="5-5-Shell-算术运算"><a href="#5-5-Shell-算术运算" class="headerlink" title="5.5 Shell 算术运算"></a>5.5 Shell 算术运算</h2><h3 id="5-5-1-Bash的算数运算符"><a href="#5-5-1-Bash的算数运算符" class="headerlink" title="5.5.1 Bash的算数运算符"></a>5.5.1 Bash的算数运算符</h3><h3 id="5-5-2-数字常量"><a href="#5-5-2-数字常量" class="headerlink" title="5.5.2 数字常量"></a>5.5.2 数字常量</h3><h3 id="5-5-3-使用算数拓展和let进行算数运算"><a href="#5-5-3-使用算数拓展和let进行算数运算" class="headerlink" title="5.5.3 使用算数拓展和let进行算数运算"></a>5.5.3 使用算数拓展和let进行算数运算</h3><h3 id="5-5-4-使用expr命令"><a href="#5-5-4-使用expr命令" class="headerlink" title="5.5.4 使用expr命令"></a>5.5.4 使用<code>expr</code>命令</h3><h2 id="5-6-退出脚本"><a href="#5-6-退出脚本" class="headerlink" title="5.6 退出脚本"></a>5.6 退出脚本</h2><h3 id="5-6-1-退出状态码"><a href="#5-6-1-退出状态码" class="headerlink" title="5.6.1 退出状态码"></a>5.6.1 退出状态码</h3><ul>
<li>每一个命令都会返回一个退出状态</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">状态值</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>0</code></td>
<td><strong>表示运行成功，程序执行未遇到任何问题</strong></td>
</tr>
<tr>
<td style="text-align:center"><code>1 ~ 125</code></td>
<td>表示运行失败，脚本命令、系统命令错误或参数传递错误</td>
</tr>
<tr>
<td style="text-align:center"><code>126</code></td>
<td>找到了该命令但无法执行</td>
</tr>
<tr>
<td style="text-align:center"><code>127</code></td>
<td>未找到要运行的命令</td>
</tr>
<tr>
<td style="text-align:center"><code>&gt; 128</code></td>
<td>命令被系统强行结束</td>
</tr>
</tbody>
</table>
<ul>
<li><code>Shell</code>脚本和它里面的函数也会返回一个退出状态码。</li>
<li><strong>可以通过检查<code>Bash</code>的特殊变量<code>$?</code>来查看上一条命令的退出状态码</strong>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ usr]# ls</div><div class="line">a  b  bin  etc  games  include  java  kerberos  lib  lib64  libexec  local  sbin  share  src  tmp  X11R6</div><div class="line">[root@iZ251k7t70aZ usr]# echo $?</div><div class="line">0</div><div class="line">[root@iZ251k7t70aZ usr]# ls /benny</div><div class="line">ls: /benny: No such file or directory</div><div class="line">[root@iZ251k7t70aZ usr]# echo $?</div><div class="line">2</div><div class="line">[root@iZ251k7t70aZ usr]#</div></pre></td></tr></table></figure>
<h3 id="5-6-2-使用exit-命令"><a href="#5-6-2-使用exit-命令" class="headerlink" title="5.6.2 使用exit 命令"></a>5.6.2 使用<code>exit</code> 命令</h3><ul>
<li>语法如下：退出并且返回退出状态码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$    exit  N</div></pre></td></tr></table></figure>
<ul>
<li>退出状态码<code>N</code>可以被其他命令或脚本用来采取他们自己的行为，如果退出状态码<code>N</code>被省略，则将把最后一条运行的命令的退出状态作为脚本的退出状态码。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">cd $SOME_DIR</div><div class="line"></div><div class="line">if [ $? -eq 0 ]; then</div><div class="line">    rm -rf *</div><div class="line">else</div><div class="line">    echo &apos;Cannot change directory!&apos;</div><div class="line">    </div><div class="line">exit 1</div><div class="line">fi</div></pre></td></tr></table></figure>
<ul>
<li>上述例子，检查<code>csd</code>命令的退出状态，如果其不为0，将打印一个错误消息，并使用<code>exit</code>命令终结脚本运行，返回退出状态码1。</li>
<li><code>linux shell</code> 命令中判断对文件和文件夹的判断，判断表达式</li>
</ul>
<p><code>[ ]</code> 部分是判断表达式，<br><code>-d</code> 表示判断是否是目录(<code>directory</code>)<br><code>&amp;&amp;</code> 是“逻辑与”操作符（这个与C语法类似啊），只有&amp;&amp;前面的判断成立（返回逻辑真），后面的语句才会得到执行。<br>总之，含义就是：<br>若/root/Desktop/为目录，就执行 chmod 777 /root/Desktop/download.desktop<br>若/root/Desktop/不是目录（不存在该目录），就执行 chmod 777 /root/桌面/download.desktop<br>其实就是处理 Desktop 是英文和中文两种情况。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">BAK=/data</div><div class="line">TAPE=/dev/st0</div><div class="line">echo &quot;Trying to backup $&#123;BAK&#125; direcotry to type device $&#123;TAPE&#125;&quot;</div><div class="line"></div><div class="line">[! -d $BAK] &amp;&amp;&#123;echo &quot;Source backup directory $BAK not found&quot;&#125;</div><div class="line"></div><div class="line">if [$? -ne 0]</div><div class="line"></div><div class="line">then echo &quot;An Error occurred while making a type backup&quot;</div><div class="line">exit 3</div><div class="line">fi</div><div class="line">exit 0 #如果备份成功，则返回0</div></pre></td></tr></table></figure>
<p><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong>   [里面的参数 还有待继续学习]</p>
<h2 id="5-7-调试脚本"><a href="#5-7-调试脚本" class="headerlink" title="5.7 调试脚本"></a>5.7 调试脚本</h2><ul>
<li>常用的脚本调试方法是<code>Bash</code> 的<code>-x</code> 选项启动一个子<code>Shell</code></li>
<li>它将以调试模式运行，使<code>Shell</code>在执行脚本的过程中把实际执行的每一个命令显示出来，并且在每一个命令行的行首显示一个 <code>+</code>号</li>
<li><code>+</code>号后面显示的是经过了参数拓展之后的命令行的内容，有助于分析是什么命令。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ myscript]# ./param.sh </div><div class="line">this is /bin/bash</div><div class="line">Linux iZ251k7t70aZ 2.6.18-371.11.1.el5 #1 SMP Wed Jul 23 15:12:55 EDT 2014 x86_64 x86_64 x86_64 GNU/Linux</div><div class="line">[root@iZ251k7t70aZ myscript]# bash -x param.sh </div><div class="line">+ echo &apos;this is /bin/bash&apos;</div><div class="line">this is /bin/bash</div><div class="line">+ uname -a</div><div class="line">Linux iZ251k7t70aZ 2.6.18-371.11.1.el5 #1 SMP Wed Jul 23 15:12:55 EDT 2014 x86_64 x86_64 x86_64 GNU/Linux</div></pre></td></tr></table></figure>
<ul>
<li>Bash 中还有一个 <code>-v</code> 选项，该选项激活详细输出模式</li>
<li>在此模式，由<code>Bash</code>读入的脚本的每一个命令行豆浆在执行前被输出。</li>
<li><strong> 通常情况下，将<code>-v</code>选项和<code>-x</code>选项同时使用</strong> </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ myscript]# bash -xv param.sh </div><div class="line">#!/bin/bash</div><div class="line">echo &quot;this is /bin/bash&quot;</div><div class="line">+ echo &apos;this is /bin/bash&apos;</div><div class="line">this is /bin/bash</div><div class="line">uname -a</div><div class="line">+ uname -a</div><div class="line">Linux iZ251k7t70aZ 2.6.18-371.11.1.el5 #1 SMP Wed Jul 23 15:12:55 EDT 2014 x86_64 x86_64 x86_64 GNU/Linux</div><div class="line">[root@iZ251k7t70aZ myscript]#</div></pre></td></tr></table></figure>
<ul>
<li><code>-x</code>选项虽然使用起来比较方便，但它输出的调试信息仅限于参数拓展后的每一条执行命令以及行首的一个<code>+</code>号，但却没有代码行的行号这样的重要信息。</li>
<li>可以通过<code>Bash</code>的一些内部环境变量来增加<code>-x</code>选项的输出信息</li>
</ul>
<table>
<thead>
<tr>
<th>内部环境变量</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$LINENO</code></td>
<td>表示Shell脚本的当前行号</td>
</tr>
<tr>
<td><code>$FUNCNAME</code></td>
<td>它是一个包含了当前在执行调用栈中的所有Shell函数名称的数组变量。${FUNCNAME[0]}代表正在执行的Shell函数的名称，${FUNCNAME[1]则代表调用函数${FUNCNAME[1]则代表调用函数${FUNCNAME[0]}的函数的名字，一次类推</td>
</tr>
<tr>
<td>$PS4</td>
<td>使用<code>Bash</code>的<code>-x</code>选项时，每一条执行的命令的行首会显示<code>+</code>号，而这个<code>+</code>号其实就是变量<code>$PS4</code>的默认值</td>
</tr>
</tbody>
</table>
<ul>
<li>利用变量<code>$PS4</code>的这一特性，结合上述另两个Bash内部变量，通过重新定义变量$PS4就可以增强<code>-x</code>选项的输出信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  export  PS4=&apos;+&#123;$LINENO:$&#123;FUNCNAME[0]&#125;&#125;&apos;</div></pre></td></tr></table></figure>
<ul>
<li>然后使用Bash -xv 选项来调试脚本</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ myscript]# export PS4=&apos;+&#123;$LINENO:$&#123;FUNCNAME[0]&#125;&#125;&apos;</div><div class="line">[root@iZ251k7t70aZ myscript]# bash -xv param.sh </div><div class="line">#!/bin/bash</div><div class="line">echo &quot;this is /bin/bash&quot;</div><div class="line">+&#123;2:&#125;echo &apos;this is /bin/bash&apos;</div><div class="line">this is /bin/bash</div><div class="line">uname -a</div><div class="line">+&#123;3:&#125;uname -a</div><div class="line">Linux iZ251k7t70aZ 2.6.18-371.11.1.el5 #1 SMP Wed Jul 23 15:12:55 EDT 2014 x86_64 x86_64 x86_64 GNU/Linux</div><div class="line">[root@iZ251k7t70aZ myscript]#</div></pre></td></tr></table></figure>
<ul>
<li><p>Bash 中执行选项<code>-n</code>，用于测试Shell脚本中是否存在语法错误。</p>
</li>
<li><p>Bash 的内置变量总结</p>
</li>
</ul>
<h2 id="5-8-Shell脚本编程风格"><a href="#5-8-Shell脚本编程风格" class="headerlink" title="5.8 Shell脚本编程风格"></a>5.8 Shell脚本编程风格</h2><ul>
<li>每个代码行不多于80个字符</li>
<li>保持一直的缩进深度，程序结构的缩进应与逻辑嵌套深度一致</li>
<li>每一个代码块之间留一个空行，可以提高脚本的可读性</li>
<li>每个脚本文件都必须要有一个文件头注释，任何一个不简短而不显而易见的函数都需要注释</li>
<li>文件头提供文件名和他的内容等一些信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#</div><div class="line">#=====================================</div><div class="line">#</div><div class="line">#				 FILE: param.sh</div><div class="line">#</div><div class="line">#				USAGE: ./param.sh</div><div class="line">#</div><div class="line">#		  DESCRIPTION: Read the Bash variable $SECONDS</div><div class="line">#</div><div class="line">#			  OPTIONS: ----</div><div class="line">#</div><div class="line">#	      REQUIREMENTS：----</div><div class="line">#</div><div class="line">#			   	 BUGS:---</div><div class="line">#</div><div class="line">#				NOTES:---</div><div class="line">#</div><div class="line">#			ORGANIZATION:---</div><div class="line">#</div><div class="line">#			 CREATETED:---</div><div class="line">#</div><div class="line">#			  REVISION:---</div></pre></td></tr></table></figure>
<h2 id="6-1-Shell的条件执行–条件测试"><a href="#6-1-Shell的条件执行–条件测试" class="headerlink" title="6.1 Shell的条件执行–条件测试"></a>6.1 Shell的条件执行–条件测试</h2><h3 id="6-1-1-使用test命令"><a href="#6-1-1-使用test命令" class="headerlink" title="6.1.1 使用test命令"></a>6.1.1 使用test命令</h3><ul>
<li>Shell脚本可以使用条件逻辑，使脚本可以根据参数，Shell变量或是其他条件的值采取不同的行动。</li>
<li>test命令运行你做各种测试并每当测试成功或失败时设置它的退出状态码为<code>0</code>（<code>表示真</code>）或<code>1</code>（<code>表示假</code>）</li>
<li><p><code>test</code>命令可以用于：</p>
<ul>
<li>文件属性测试</li>
<li>字符串测试</li>
<li>算术测试</li>
</ul>
</li>
<li><p>test命令的语法如下：</p>
</li>
</ul>
<blockquote>
<p>test EXPRESSION   ||    [<code>空格</code>EXPRESSION<code>空格</code>]</p>
<p>[  <code>EXPRESSION</code> ]<strong> 注意： 表达式前后需要有空格</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ myscript]# test -d &quot;$HOME&quot;; echo $?</div><div class="line">0</div><div class="line">[root@iZ251k7t70aZ myscript]# test -d &quot;$HOMEs&quot;; echo $?</div><div class="line">1</div><div class="line">[root@iZ251k7t70aZ myscript]# [ &quot;abc&quot; != &quot;def&quot;]; echo $?</div><div class="line">-bash: [: missing `]&apos;</div><div class="line">2</div><div class="line">[root@iZ251k7t70aZ myscript]# [&quot;abc&quot; != &quot;def&quot; ]; echo $?</div><div class="line">-bash: [abc: command not found</div><div class="line">127</div><div class="line">[root@iZ251k7t70aZ myscript]# [ &quot;abc&quot; != &quot;def&quot; ]; echo $?</div><div class="line">0</div><div class="line">[root@iZ251k7t70aZ myscript]# test 8 -gt 3 &amp;&amp; echo TRUE || echo False</div><div class="line">TRUE</div><div class="line">[root@iZ251k7t70aZ myscript]# test -8 -gt 3 &amp;&amp; echo TRUE || echo False</div><div class="line">False</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述符</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>-e</td>
<td>文件存在</td>
</tr>
<tr>
<td><del>-a</del></td>
<td><del>文件存在，这个选项的效果与-e相同. 但是它已经被”弃用”了, 并且不鼓励使用.</del></td>
</tr>
<tr>
<td>-f</td>
<td>表示这个文件是一个一般文件(并不是目录或者设备文件)</td>
</tr>
<tr>
<td>-s</td>
<td>文件大小不为零</td>
</tr>
<tr>
<td>-d</td>
<td>表示这是一个目录</td>
</tr>
<tr>
<td>-b</td>
<td>表示这是一个块设备(软盘, 光驱, 等等.)</td>
</tr>
<tr>
<td>-c</td>
<td>表示这是一个字符设备(键盘, modem, 声卡, 等等.)</td>
</tr>
<tr>
<td>-p</td>
<td>这个文件是一个管道</td>
</tr>
<tr>
<td>-h</td>
<td>这是一个符号链接</td>
</tr>
<tr>
<td>-L</td>
<td>这是一个符号链接</td>
</tr>
<tr>
<td>-S</td>
<td>表示这是一个socket</td>
</tr>
<tr>
<td>-t</td>
<td>文件(描述符)被关联到一个终端设备上这个测试选项一般被用来检测脚本中的stdin([ -t 0 ]) 或者stdout([ -t 1 ])是否来自于一个终端.</td>
</tr>
<tr>
<td>-r</td>
<td>文件是否具有可读权限(指的是正在运行这个测试命令的用户是否具有读权限)</td>
</tr>
<tr>
<td>-w</td>
<td>文件是否具有可写权限(指的是正在运行这个测试命令的用户是否具有写权限)</td>
</tr>
<tr>
<td>-x</td>
<td>文件是否具有可执行权限(指的是正在运行这个测试命令的用户是否具有可执行权限)</td>
</tr>
<tr>
<td>-g</td>
<td>set-group-id(sgid)标记被设置到文件或目录上，如果目录具有sgid标记的话, 那么在这个目录下所创建的文件将属于拥有这个目录的用户组, 而不必是创建这个文件的用户组. 这个特性对于在一个工作组中共享目录非常有用.</td>
</tr>
<tr>
<td>-u</td>
<td>set-user-id (suid)标记被设置到文件上，如果一个root用户所拥有的二进制可执行文件设置了set-user-id标记位的话, 那么普通用户也会以root权限来运行这个文件. [1] 这对于需要访问系统硬件的执行程序(比如pppd和cdrecord)非常有用. 如果没有suid标志的话, 这些二进制执行程序是不能够被非root用户调用的.</td>
</tr>
<tr>
<td>-O</td>
<td>判断你是否是文件的拥有者</td>
</tr>
<tr>
<td>-G</td>
<td>文件的group-id是否与你的相同</td>
</tr>
<tr>
<td>-N</td>
<td>从文件上一次被读取到现在为止, 文件是否被修改过</td>
</tr>
<tr>
<td>f1 <code>-nt</code> f2</td>
<td>文件f1比文件f2新</td>
</tr>
<tr>
<td>f1 <code>-ot</code> f2</td>
<td>文件f1比文件f2旧</td>
</tr>
<tr>
<td>f1 <code>-ef</code> f2</td>
<td>文件f1和文件f2是相同文件的硬链接</td>
</tr>
<tr>
<td>!</td>
<td>“非” – 反转上边所有测试的结果(如果没给出条件, 那么返回真).</td>
</tr>
</tbody>
</table>
<ul>
<li>检查名命令文件<code>/bin/cp</code>是否存在，如果存在则打印找到此文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ myscript]# test -e /bin/cp &amp;&amp; &quot;the command $_ found &quot; || &quot;the command $_ not found&quot;</div><div class="line">-bash: the command /bin/cp found : No such file or directory</div><div class="line"></div><div class="line">[root@iZ251k7t70aZ myscript]# [ -d /local ] &amp;&amp; echo &quot;真&quot; || echo &quot;假&quot;</div><div class="line">真</div></pre></td></tr></table></figure>
<blockquote>
<p>上述命令语句中的<code>$_</code>表示前一个执行的命令中的额最后一个参数。</p>
</blockquote>
<ul>
<li>字符串测试操作符表</li>
</ul>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-z 《String》</td>
<td>如果《String》为空则为真</td>
</tr>
<tr>
<td>-n 《String》</td>
<td>如果《String》不为空则为真</td>
</tr>
<tr>
<td>《String1》=《String2》</td>
<td>如果《String1》与《String2》相同则为真</td>
</tr>
<tr>
<td>《String1》！=《String2》</td>
<td>如果《String1》与《String2》不相同则为真</td>
</tr>
<tr>
<td>《String1》&lt;《String2》</td>
<td>如果《String1》的字典顺序排在《String2》之前则为真</td>
</tr>
<tr>
<td>《String1》&gt;《String2》</td>
<td>如果《String1》的字典顺序排在《String2》之后则为真</td>
</tr>
</tbody>
</table>
<ul>
<li>算术测试操作符表</li>
</ul>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-eq</td>
<td>等于,如:if [ “$a” -eq “$b” ] </td>
</tr>
<tr>
<td>-ne</td>
<td>不等于,如:if [ “$a” -ne “$b” ] </td>
</tr>
<tr>
<td>-gt</td>
<td>大于,如:if [ “$a” -gt “$b” ] </td>
</tr>
<tr>
<td>-ge</td>
<td>大于等于,如:if [ “$a” -ge “$b” ] </td>
</tr>
<tr>
<td>-lt</td>
<td>小于,如:if [ “$a” -lt “$b” ] </td>
</tr>
<tr>
<td>-le</td>
<td>小于等于,如:if [ “$a” -le “$b” ] </td>
</tr>
<tr>
<td>&lt;</td>
<td>小于(需要双括号),如:((“$a” &lt; “$b”)) </td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于(需要双括号),如:((“$a” &lt;= “$b”)) </td>
</tr>
<tr>
<td>&gt;</td>
<td>大于(需要双括号),如:((“$a” &gt; “$b”)) </td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于(需要双括号),如:((“$a” &gt;= “$b”)) </td>
</tr>
</tbody>
</table>
<h3 id="6-1-2-if结构的语法格式"><a href="#6-1-2-if结构的语法格式" class="headerlink" title="6.1.2 if结构的语法格式"></a>6.1.2 if结构的语法格式</h3><ul>
<li><code>if</code>语句的基本语法：</li>
</ul>
<blockquote>
<p>if TEST-COMMANDS ; then CONSEQUENT-COMMANDS ;  fi<br>或<br>if TEST-COMMANDS ; then<br>  CONSEQUENT-COMMANDS<br>fi<br>或<br>if TEST-COMMANDS<br>then<br>  CONSEQUENT-COMMANDS<br>fi</p>
</blockquote>
<h3 id="6-1-3-if…else…fi"><a href="#6-1-3-if…else…fi" class="headerlink" title="6.1.3 if…else…fi"></a>6.1.3 if…else…fi</h3><ul>
<li>if…else…fi的语法基本结构</li>
</ul>
<blockquote>
<p>if TEST-COMMANDS<br>then<br>       CONSEQUENT-COMMANDS<br>else<br>        CONSEQUENT-COMMANDS<br>fi</p>
</blockquote>
<h3 id="6-1-5-多级的if…elif…else…fi"><a href="#6-1-5-多级的if…elif…else…fi" class="headerlink" title="6.1.5 多级的if…elif…else…fi"></a>6.1.5 多级的if…elif…else…fi</h3><ul>
<li>if…elif…else…fi语法结构：</li>
</ul>
<blockquote>
<p>if TEST-COMMANDS<br>then<br>   CONSEQUENT-COMMANDS<br>elif TEST-COMMANDS<br>then<br>   CONSEQUENT-COMMANDS<br>elif TEST-COMMANDS<br>then<br>   CONSEQUENT-COMMANDS<br>else<br>   CONSEQUENT-COMMANDS<br>fi</p>
</blockquote>
<h2 id="6-2-条件执行"><a href="#6-2-条件执行" class="headerlink" title="6.2 条件执行"></a>6.2 条件执行</h2><h3 id="6-2-1-逻辑与-amp-amp"><a href="#6-2-1-逻辑与-amp-amp" class="headerlink" title="6.2.1 逻辑与&amp;&amp;"></a>6.2.1 逻辑与<code>&amp;&amp;</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if [ on $var ] &amp;&amp; [ -e $var ]</div><div class="line">then </div><div class="line">	echo &quot;...&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<ul>
<li><strong>在<code>test</code>命令中我们可以使用<code>-a</code> 选项来表示逻辑与。</strong></li>
<li>将上述命令改写：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if [ -n $var -a -e $var ]</div><div class="line">then </div><div class="line">	echo &quot;...&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<h3 id="6-2-2-逻辑或"><a href="#6-2-2-逻辑或" class="headerlink" title="6.2.2 逻辑或||"></a>6.2.2 逻辑或<code>||</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NOW=&apos;data +%a&apos;</div><div class="line">if [ &quot;$NOW&quot; = &quot;MON&quot; ] || [ &quot;$NOW&quot; = &quot;SAT&quot; ] </div><div class="line">then </div><div class="line">	echo &quot;...&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<ul>
<li>上述脚本中我们使用<code>&quot;[[ ]]&quot;</code> 代替<code>&quot;[]&quot;</code>，那么次脚本会简介一些</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NOW=&apos;data +%a&apos;</div><div class="line">if [[ $NOW = &quot;MON&quot; || $NOW = &quot;SAT&quot; ]]</div><div class="line">then </div><div class="line">	echo &quot;...&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<ul>
<li><strong>与<code>test</code>命令的<code>-a</code>选项类似，我们可以使用<code>test</code>命令的<code>-o</code>选项来表示逻辑或</strong></li>
<li>将上述命令改写成：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 定义变量NOW,并将计算得到的今天是星期几赋值给变量NOW</div><div class="line">NOW=&apos;data +%a&apos;</div><div class="line">if [ &quot;$NOW&quot; = &quot;MON&quot; -o &quot;$NOW&quot; = &quot;$SAT&quot; ]</div><div class="line">then </div><div class="line">	echo &quot;...&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<h3 id="6-2-3-逻辑非-“-”"><a href="#6-2-3-逻辑非-“-”" class="headerlink" title="6.2.3 逻辑非 “!”"></a>6.2.3 逻辑非 “!”</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">if [! -d /home/benny]</div><div class="line">then </div><div class="line">	mkdir /home/benny</div><div class="line">else</div><div class="line">	echo &quot;the directory is exist&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<h2 id="6-3-case语句实例"><a href="#6-3-case语句实例" class="headerlink" title="6.3 case语句实例"></a>6.3 case语句实例</h2><ul>
<li>case语句是多级的if…then…else…fi语句很好的替代方式。</li>
<li>它可以让一个条件与多个模式相比较，而且case语句的结构的读写比较方便</li>
<li>case语句的语法实例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">case EXPRESSION in </div><div class="line">	PATTERN 1 )</div><div class="line">			CONSEQUENT-COMMANDS</div><div class="line">;;</div><div class="line">	PATTERN 2 )</div><div class="line">			CONSEQUENT-COMMANDS</div><div class="line">;;</div><div class="line">	</div><div class="line">	PATTERN N )</div><div class="line">			CONSEQUENT-COMAANDS</div><div class="line">;;</div><div class="line">esac</div></pre></td></tr></table></figure>
<blockquote>
<p><code>case</code>语句结构一定要以<code>&quot;esac&quot;</code>结尾，每一个命令列表都以两个<code>&quot;;;&quot;</code>为终结，只有最后一个命里该列表的<code>&quot;;;&quot;</code>可以被省略。</p>
</blockquote>
<ul>
<li>通过一个<code>Linux</code>下信号处理的脚本来学习<code>case</code>语句的使用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"># ===============================</div><div class="line">#	FILE： killsignal.sh</div><div class="line">#	USAGE: ./killsignal.sh</div><div class="line"># 	DESCRIPTION:</div><div class="line"># 	AUTHOR:	benny</div><div class="line">#	CREATED: 10/24/2013</div><div class="line"># ===============================</div><div class="line">if [ $# -lt 2]</div><div class="line">then </div><div class="line">	echo &quot;...&quot;</div><div class="line">	exit</div><div class="line">fi</div><div class="line"></div><div class="line">case &quot;$1&quot; in</div><div class="line">	1)</div><div class="line">		echo &quot;...&quot;</div><div class="line">;;</div><div class="line">	2)</div><div class="line">	kill -SIGHUP $2</div><div class="line">;;</div><div class="line">	*)</div><div class="line">	echo &quot;前面的都没有匹配，则匹配此选项&quot;</div><div class="line">esac</div></pre></td></tr></table></figure>
<ul>
<li><strong>多重模式匹配的case语句的脚本实例：</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"># ===============================</div><div class="line">#	FILE： killsignal.sh</div><div class="line">#	USAGE: ./killsignal.sh</div><div class="line"># 	DESCRIPTION:</div><div class="line"># 	AUTHOR:	benny</div><div class="line">#	CREATED: 10/24/2013</div><div class="line"># =============================== </div><div class="line">NOW=&apos;date +%a&apos;</div><div class="line"></div><div class="line">case $NOW in</div><div class="line">	# 若今天为星期一</div><div class="line">	Mon)</div><div class="line">		echo &quot;FULL Backup&quot;</div><div class="line">;;</div><div class="line"></div><div class="line">	#若今天为星期二、星期三、星期四</div><div class="line">	Tue | Wed | Thu )</div><div class="line">	echo &quot;Partial backup&quot;</div><div class="line">;;</div><div class="line">	# 若今天为星期六、星期天</div><div class="line">	Sat | Sun)</div><div class="line">	echo &quot;no backup&quot;</div><div class="line">;;</div><div class="line">	*)</div><div class="line">	echo &quot;notihing&quot;</div><div class="line">;;</div><div class="line"></div><div class="line">exac</div></pre></td></tr></table></figure>
<h2 id="7-1-for循环"><a href="#7-1-for循环" class="headerlink" title="7.1 for循环"></a>7.1 for循环</h2><ul>
<li>首先，循环条件中使用的变量必须是已经初始化的，然后在循环中开始执行</li>
<li>在每一次循环开始时，进行一次测试</li>
<li>重复的执行一个代码块</li>
</ul>
<h3 id="7-1-1-for循环语法"><a href="#7-1-1-for循环语法" class="headerlink" title="7.1.1 for循环语法"></a>7.1.1 for循环语法</h3><ul>
<li>语法结构</li>
<li>for循环的基本语法结构如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">for VAR in item1 item2 ... itemN</div><div class="line">do</div><div class="line">	command1</div><div class="line">	command2</div><div class="line">	...</div><div class="line">	commandN</div><div class="line">done</div></pre></td></tr></table></figure>
<ul>
<li>for循环变量的内容的语法：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">for VAR in $fileName</div><div class="line">do</div><div class="line">	command1</div><div class="line">	command2</div><div class="line">	...</div><div class="line">	commandN</div><div class="line">done</div></pre></td></tr></table></figure>
<ul>
<li>for循环命令替换语法：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">for var in $(Linux-command-name) </div><div class="line"># 或者使用 for VAR in &apos;Linux-command-name&apos;</div><div class="line">do</div><div class="line">	command1</div><div class="line">	command2</div><div class="line">	...</div><div class="line">	commandN</div><div class="line">done</div></pre></td></tr></table></figure>
<ul>
<li>在for循环中，每次指定列表中的（item1…itemN） 新值被赋值给变量VAR后，for循环都会执行一次，它将重复的执行do和done之间的所有语句，知道条件不满足时为止。</li>
<li>这些值通常都是<ul>
<li>字符串</li>
<li>数字</li>
<li>命令行参数</li>
<li>文件名</li>
<li>Linux命令的输出</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#=====================================</div><div class="line">#	FILE： killsignal.sh</div><div class="line">#	USAGE: ./killsignal.sh</div><div class="line"># 	DESCRIPTION:	简单的使用for循环脚本</div><div class="line"># 	AUTHOR:	benny</div><div class="line">#	CREATED: 10/24/2013</div><div class="line">#==========================</div><div class="line"></div><div class="line">for i in 1 2 3  # 从1~3循环</div><div class="line">do</div><div class="line">	echo &quot;the for loop is run $i times&quot;</div><div class="line">done</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#=====================================</div><div class="line">#	FILE： killsignal.sh</div><div class="line">#	USAGE: ./killsignal.sh</div><div class="line"># 	DESCRIPTION:	使用变量内容的for循环脚本实例</div><div class="line"># 	AUTHOR:	benny</div><div class="line">#	CREATED: 10/24/2013</div><div class="line">#==========================</div><div class="line"></div><div class="line">filenames=&quot;/etc/yp.conf /etc/nsswitch.conf /etc/auto.master&quot;</div><div class="line"></div><div class="line">for file in $filenames</div><div class="line">do</div><div class="line">	[ -f $file ] &amp;&amp;  echo &quot;the file $file was found &quot; || echo &quot;the file is not found&quot;</div><div class="line">done</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#=====================================</div><div class="line">#	FILE： killsignal.sh</div><div class="line">#	USAGE: ./killsignal.sh</div><div class="line"># 	DESCRIPTION:	使用变量内容的for循环脚本实例</div><div class="line"># 	AUTHOR:	benny</div><div class="line">#	CREATED: 10/24/2013</div><div class="line">#==========================</div><div class="line">echo &quot;Printing file list in /tmp diretroy:&quot;</div><div class="line">for file in &apos;ls /etm/*&apos;</div><div class="line">do </div><div class="line">	echo $file</div><div class="line">done</div></pre></td></tr></table></figure>
<ul>
<li>for循环还有三项表达式语法：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">for ((  EXP1； EXP2; #XP3 ))</div><div class="line">do</div><div class="line">	command1</div><div class="line">	command2</div><div class="line">	...</div><div class="line">	commandN</div><div class="line">done</div></pre></td></tr></table></figure>
<ul>
<li>EXP1 初始化表达式</li>
<li>EXP2 循环测试活条件</li>
<li>EXP3 计算表达式</li>
</ul>
<h2 id="7-2-while-循环"><a href="#7-2-while-循环" class="headerlink" title="7.2 while 循环"></a>7.2 while 循环</h2><h3 id="7-2-1-while-循环语法"><a href="#7-2-1-while-循环语法" class="headerlink" title="7.2.1 while 循环语法"></a>7.2.1 while 循环语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">while [ Condition ]</div><div class="line">do</div><div class="line">	Command1</div><div class="line">	Command2</div><div class="line">	...</div><div class="line">	CommandN	</div><div class="line">done</div></pre></td></tr></table></figure>
<ul>
<li>while循环示例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#=====================================</div><div class="line">#	FILE： killsignal.sh</div><div class="line">#	USAGE: ./killsignal.sh</div><div class="line"># 	DESCRIPTION:	简单的使用while循环</div><div class="line"># 	AUTHOR:	benny</div><div class="line">#	CREATED: 10/24/2013</div><div class="line">#==========================</div><div class="line"></div><div class="line">var=1</div><div class="line">while [ $var -lt 3 ]</div><div class="line">do</div><div class="line">	echo &quot;the for loop is run $var times&quot;</div><div class="line">	var=$((var+1))</div><div class="line">done</div></pre></td></tr></table></figure>
<h3 id="7-2-2-无限while循环"><a href="#7-2-2-无限while循环" class="headerlink" title="7.2.2 无限while循环"></a>7.2.2 无限while循环</h3><ul>
<li>定义一个无限while循环可以使用如下3种命令：<ul>
<li>true 命令 —— 不做任何事，表示成功，返回退出状态码0</li>
</ul>
</li>
<li>语法格式：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">while :</div><div class="line">do</div><div class="line">	echo	&quot;...&quot;</div><div class="line">done</div><div class="line"># 或</div><div class="line">while true</div><div class="line">do</div><div class="line">	echo	&quot;...&quot;</div><div class="line">done</div><div class="line"># 或</div></pre></td></tr></table></figure>
<ul>
<li>菜单驱动程序，持续运行知道用户按下”4”为止</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">while :</div><div class="line">do</div><div class="line">	clear	# 清理终端屏幕</div><div class="line">	echo &quot;=============&quot;</div><div class="line">	echo &quot; MAIN - MENU &quot;</div><div class="line">	echo &quot;=============&quot;</div><div class="line">	</div><div class="line">	read -p &quot;Enter your choice[ 1 - 4 ]:&quot; choice  # 从标准输入中读取用户的输入，并赋值给变量choice</div><div class="line">	case $choice in</div><div class="line">	1)</div><div class="line">	echo &quot;Today is $(date + %Y-%m-%d)&quot;</div><div class="line">	;;</div><div class="line">	2)</div><div class="line">	uname -a  # 打印系统信息</div><div class="line">	;;</div><div class="line">	3)</div><div class="line">	w</div><div class="line">	read -p &quot;Press [Enter] key to continue...&quot; readEnterKey</div><div class="line">	;;</div><div class="line">	4)</div><div class="line">	echo &quot;buy&quot;</div><div class="line">	exit 0</div><div class="line">	;;</div><div class="line">	*)</div><div class="line">	echo &quot;Error : Invalid option&quot;</div><div class="line">	read -p &quot;Presdss key to continue....&quot; readEnterKey</div><div class="line">	;;</div><div class="line">	exac</div></pre></td></tr></table></figure>
<h2 id="7-3-until-循环语句实例"><a href="#7-3-until-循环语句实例" class="headerlink" title="7.3 until 循环语句实例"></a>7.3 until 循环语句实例</h2><ul>
<li>until循环与while循环类似，也同样基于一个条件，但until循环的判断条件正好与while循环的判断条件相反，<strong>until循环在条件为假的条件下才会持续的运行</strong>。一旦条件被满足，即为真，就会退出循环。</li>
<li>语法如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">until  [ COMMANDS ]</div><div class="line">do </div><div class="line">	command1</div><div class="line">	command2</div><div class="line">	...</div><div class="line">	commandN</div><div class="line">done</div></pre></td></tr></table></figure>
<ul>
<li>until循环与while循环相比：<ul>
<li>until 循环执行直到返回0状态</li>
<li>while 循环执行直到返回非0状态</li>
<li>until循环总是执行至少一次</li>
</ul>
</li>
</ul>
<h2 id="7-4-select-循环语句"><a href="#7-4-select-循环语句" class="headerlink" title="7.4 select 循环语句"></a>7.4 select 循环语句</h2><ul>
<li>语法格式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">select VAR in LIST</div><div class="line">do </div><div class="line">	command1</div><div class="line">	command2</div><div class="line">	...</div><div class="line">	commandN</div><div class="line">done</div></pre></td></tr></table></figure>
<ul>
<li><p>select循环有以下特点</p>
<ul>
<li>select语句使用Bash内部变量PS3的值作为它的提示符之一</li>
<li>打印到屏幕上的列表LIST中的每一项会在前面加上一个数字编号</li>
<li>当用户输入的数字与某一个数字编号一致时，列表中的相应的项即被赋予变量VAR</li>
<li>如果用户输入的内容为空，将重新显示列表LIST中的项和提示符信息</li>
<li>可以通过添加一个退出选项，或按CTRL+C 或 CTRL+D组合键退出select循环</li>
</ul>
</li>
<li><p>脚本实例</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">PS3=&quot;Run command:&quot;</div><div class="line"></div><div class="line">select choice in date w hostname &quot;uname -a &quot; Exit //指定select循环列表</div><div class="line">do</div><div class="line">	case $choice in</div><div class="line">		date)</div><div class="line">			echo &quot;==============&quot;</div><div class="line">			echo &quot;Current System date and time:&quot;</div><div class="line">			ehco &quot;================&quot;</div><div class="line">			;;</div><div class="line">		w)</div><div class="line">			echo &quot;==============&quot;</div><div class="line">			echo &quot;who is log on:&quot;</div><div class="line">			ehco &quot;================&quot;</div><div class="line">			;;</div><div class="line">		hostname)</div><div class="line">			echo &quot;==============&quot;</div><div class="line">			echo &quot;Hostname :&quot;</div><div class="line">			ehco &quot;================&quot;</div><div class="line">		;;</div><div class="line">		&quot;uname -a&quot;)</div><div class="line">			echo &quot;==============&quot;</div><div class="line">			echo &quot;System information&quot;</div><div class="line">			ehco &quot;================&quot;</div><div class="line">		;;</div><div class="line">		Exit)</div><div class="line">		echo &quot;Bye!&quot;</div><div class="line">		exit 0</div><div class="line">		;;</div><div class="line">	esac</div><div class="line">done</div></pre></td></tr></table></figure>
<h2 id="7-5-循环控制"><a href="#7-5-循环控制" class="headerlink" title="7.5 循环控制"></a>7.5 循环控制</h2><h3 id="7-5-1-break-语句"><a href="#7-5-1-break-语句" class="headerlink" title="7.5.1 break 语句"></a>7.5.1 break 语句</h3><ul>
<li>break 语句用于从for、while、until、select循环中退出、停止循环的执行</li>
<li>语法如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">break [n]</div></pre></td></tr></table></figure>
<ul>
<li>n 代表嵌套循环的层级，如果指定了n，break将推出n级嵌套循环。</li>
<li>如果没有指定n或n不大于等于1，则退出状态码为0，否则退出状态码为n</li>
<li><strong>此实例需要查看</strong></li>
</ul>
<h3 id="7-5-2-continue-语句"><a href="#7-5-2-continue-语句" class="headerlink" title="7.5.2 continue 语句"></a>7.5.2 continue 语句</h3><ul>
<li>continue 语句用于跳过循环体中剩余的命令直接跳转到循环体的顶部，而重新开始循环的下一次重复。</li>
<li>continue语句可以应用于for、while或until循环</li>
<li>语法如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">continue [n]</div></pre></td></tr></table></figure>
<h2 id="第8章-Shell函数"><a href="#第8章-Shell函数" class="headerlink" title="第8章 Shell函数"></a>第8章 Shell函数</h2><h2 id="8-1-函数的定义"><a href="#8-1-函数的定义" class="headerlink" title="8.1 函数的定义"></a>8.1 函数的定义</h2><ul>
<li>函数语法：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 函数名</div><div class="line">function_name()&#123;</div><div class="line">    # 函数体 ，在函数中执行的命令行</div><div class="line">    commands...</div><div class="line">     # 参数返回，return语句是可选的</div><div class="line">     #如果没有return语句，则以函数最后一条命令的运行结果作为返回值</div><div class="line">     #如果使用return语句，则return后跟数值n（数值范围：0~255）</div><div class="line">    [ return ini; ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>或者如果你愿意，可以在函数名字前面加上关键字<code>function</code> </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function function_name()&#123;</div><div class="line">    commands...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>如果有<code>function</code>关键字，则可以省略圆括号<code>&quot;()&quot;</code>。函数体，也叫做符合命令块，是包含在<code>{}</code>之间的命令列表。</p>
</li>
<li><p><strong>在一行内定义一个函数，此时，函数体内的个命令之间必须使用分号<code>;</code>隔开，语法如下</strong></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function name &#123; commands1; commands2;commandsN; &#125;</div><div class="line"></div><div class="line">或者</div><div class="line"></div><div class="line">name() &#123;  commands1; commands2;commandsN;  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>可以使用内部命令<code>unset</code>的’-f’选线过来取消函数的定义</li>
</ul>
<blockquote>
<p>通常情况下，函数体外的大括号与函数体之间必须用空白符（空格、回车或制表符等）换行符分开，因为大括号{}是保留字，但只有<code>{</code>或<code>}</code>与其中间的命令列表呗加空格或者其它Shell元字符（比如 ， 或； 或|等）分隔时，才能被识别为保留字</p>
</blockquote>
<h2 id="8-2-函数的参数，变量与返回值"><a href="#8-2-函数的参数，变量与返回值" class="headerlink" title="8.2 函数的参数，变量与返回值"></a>8.2 函数的参数，变量与返回值</h2><h3 id="8-2-1-向函数传递参数"><a href="#8-2-1-向函数传递参数" class="headerlink" title="8.2.1 向函数传递参数"></a>8.2.1 向函数传递参数</h3><ul>
<li>Shell函数有自己的命令行参数，函数使用特殊变量$1,$2,…,$n来范文传递给它的参数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">name()&#123;</div><div class="line">    arg1=$1</div><div class="line">    arg1=$2</div><div class="line">    arg1=$3</div><div class="line">    command on $arg1</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>使用如下语法来调用函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name foo bar</div></pre></td></tr></table></figure>
<ul>
<li><p>上面的函数中</p>
<ul>
<li>name = 函数名</li>
<li>foo  = 参数1 传递给函数的第一个参数（位置参数$1）</li>
<li>bar  = 参数2 传递给函数的第二个参数（位置参数$2）</li>
</ul>
</li>
<li><p>示例</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#=====================================</div><div class="line">#	FILE： passed.sh</div><div class="line">#	USAGE: ./passed.sh</div><div class="line"># 	DESCRIPTION:	</div><div class="line"># 	AUTHOR:	benny</div><div class="line">#	CREATED: 10/24/2013</div><div class="line">#==========================</div><div class="line"></div><div class="line"># 定义函数passed</div><div class="line">passwed()&#123;</div><div class="line">    </div><div class="line">    # 定义变量a，将此传递给函数passed()的第一个参数赋值给此变量</div><div class="line">    a=$1</div><div class="line">    # 打印特殊函数0的值，即脚本名称</div><div class="line">    echo &quot;passed()： \$0 is $0 &quot; </div><div class="line">    </div><div class="line">    # 打印位置参数1的值，即指定给函数的第一个参数</div><div class="line">    echo &quot;passed() ： \$1 is $1&quot;</div><div class="line">    echo &quot;passed() ： \$a is $a&quot;</div><div class="line">    </div><div class="line">    # 打印传递给函数passed的参数个数</div><div class="line">    echo &quot;passed() ： total args is $#&quot;</div><div class="line">      </div><div class="line">    # 打印传递给函数passed()的所有函数</div><div class="line">    echo &quot;passed() ： total args is $@&quot;</div><div class="line">   # 打印传递给函数passed()的所有函数</div><div class="line">    echo &quot;passed() ： total args is $*&quot;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">echo &quot;**** calling passed() first time *****&quot;</div><div class="line"></div><div class="line"># 调用函数passwd()并指定一个参数&apos;one&apos;</div><div class="line">passed one</div><div class="line"></div><div class="line">echo &quot;**** calling passed() second time *****&quot;</div><div class="line">passed one two three</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">out:</div><div class="line">**** calling passed() first time *****</div><div class="line">passed()： $0 is ./passed.sh </div><div class="line">passed() ： $1 is one</div><div class="line">passed() ： $a is one</div><div class="line">passed() ： total args is 1</div><div class="line">passed() ： total args is one</div><div class="line">passed() ： total args is one</div><div class="line">**** calling passed() second time *****</div><div class="line">passed()： $0 is ./passed.sh </div><div class="line">passed() ： $1 is one</div><div class="line">passed() ： $a is one</div><div class="line">passed() ： total args is 3</div><div class="line">passed() ： total args is one two three</div><div class="line">passed() ： total args is one two three</div></pre></td></tr></table></figure>
<ul>
<li><p>在Shell函数中：</p>
<ul>
<li>所有函数参数都可以通过$1,$2,…,$N来访问</li>
<li><code>$0</code> 指代Shell脚本的名字</li>
<li><code>$*</code> <code>$@</code> 保存传递给函数所有的参数</li>
<li><code>$#</code> 保存村递给函数的位置参数的个数</li>
</ul>
</li>
<li><p>8.2.2 本地变量</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#!/bin/bash</div><div class="line">#=====================================</div><div class="line">#	FILE： fvar.sh</div><div class="line">#	USAGE: ./fvar.sh</div><div class="line"># 	DESCRIPTION:	本地变量</div><div class="line"># 	AUTHOR:	benny</div><div class="line">#	CREATED: 10/24/2013</div><div class="line">#==========================</div><div class="line"># 定义函数create_logFile</div><div class="line">create_logFile()&#123;</div><div class="line">    #修改变量d的名字</div><div class="line">    d=$1</div><div class="line">    echo &quot;create_logFile : d is set to $d&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 定义变量d</div><div class="line">d=/tmp/diskUsage.log</div><div class="line"></div><div class="line">echo &quot;Before calling create_logFile d is set to $d&quot;</div><div class="line"></div><div class="line"># 调用函数create_logFile并指定一个参数</div><div class="line"></div><div class="line">create_logFile &quot;/home /benny/diskUsage.log&quot;</div><div class="line">echo &quot;After calling create_logFile d is set to $d&quot;</div><div class="line"></div><div class="line"></div><div class="line">out:</div><div class="line">[root@iZ251k7t70aZ myscript]# ./fvar.sh </div><div class="line">Before calling create_logFile d is set to /tmp/diskUsage.log</div><div class="line">create_logFile : d is set to /home /benny/diskUsage.log</div><div class="line">After calling create_logFile d is set to /home /benny/diskUsage.log</div></pre></td></tr></table></figure>
<ul>
<li>通常情况下，我们可以使用local命令来创建一个本地变量</li>
<li>语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">local var=value</div><div class="line">local varName</div><div class="line"></div><div class="line">或者</div><div class="line"></div><div class="line">function name()&#123;</div><div class="line"></div><div class="line">    # 定义一个本独变量var</div><div class="line">    local var=$1</div><div class="line">    command1 on $var</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>local命令只能在函数内部使用</li>
<li>local命令将变量名的可见范围控制在函数内部</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line"># 定义全变量d</div><div class="line">d=/tmp/diskUsage.log</div><div class="line"></div><div class="line">#定义函数create_logFile</div><div class="line">function create_logFile()&#123;</div><div class="line">        # 定义本地变量，这个变量制度及此函数可见</div><div class="line">        local d=$1</div><div class="line">echo &quot;create_logFIle（）： d is set to $d&quot;</div><div class="line">&#125;</div><div class="line">echo &quot;Before caling create_logFIle d is set to $d&quot;</div><div class="line"></div><div class="line"># 调用函数create_logFile() 并指定一个参数</div><div class="line">create_logFile &quot;/home/benny/diskUsage.log&quot;</div><div class="line"></div><div class="line">echo &quot;After calling create_log_file() d is set to $d&quot;</div><div class="line">~                                                       </div><div class="line"></div><div class="line">out:</div><div class="line">[root@iZ251k7t70aZ myscript]# ./localfvar.sh </div><div class="line">Before caling create_logFIle d is set to /tmp/diskUsage.log</div><div class="line">create_logFIle（）： d is set to /home/benny/diskUsage.log</div><div class="line">After calling create_log_file() d is set to /tmp/diskUsage.log</div></pre></td></tr></table></figure>
<h2 id="8-2-3-使用return命令"><a href="#8-2-3-使用return命令" class="headerlink" title="8.2.3 使用return命令"></a>8.2.3 使用<code>return</code>命令</h2><ul>
<li>如果函数理由<code>Shell</code>内置命令<code>return</code>，则函数执行到<code>return</code>语句时结束，并且返回到Shell脚本中调用函数位置的下一个命令。</li>
<li>如果return带有一个数值型参数，则这个参数就是函数的返回值，返回值的最大值是<code>255</code>；否则函数的返回值就是函数体内最后一个执行的命令的返回状态</li>
<li>示例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ myscript]# vi checkpid.sh </div><div class="line">#!/bin/bash</div><div class="line">checkpid()&#123;</div><div class="line"># 定义本地变量</div><div class="line">local  i</div><div class="line"># 使用for循环遍历传递给此函数的所有参数</div><div class="line">for i in $*</div><div class="line">do</div><div class="line"></div><div class="line"># 如果目录/proc/$i存在，则执行此函数返回</div><div class="line"># 在一般的Linux系统中，如果进程正在运行，则在/proc目录下会存在一个以进程号命名的子目录</div><div class="line"></div><div class="line">[ -d &quot;/proc/$i&quot; ] &amp;&amp; return  0</div><div class="line">done</div><div class="line"></div><div class="line"># 返回1</div><div class="line">return 1</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">checkpid $pid1 $pis2 $pid3</div><div class="line"></div><div class="line">if [ $? == 0  ]</div><div class="line">then</div><div class="line">    echo &quot;the one of them is running&quot;</div><div class="line">else</div><div class="line">    echo &quot;These Pids are not running&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">out:</div><div class="line">[root@iZ251k7t70aZ myscript]# ./checkpid.sh </div><div class="line">These Pids are not running</div></pre></td></tr></table></figure>
<ul>
<li>上述中的<code>if</code>判断语句也可以改成，因为返回值是<code>0</code>或<code>1</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">checkpid $pid1 $pis2 $pid3</div><div class="line"></div><div class="line">if [ $? == 0  ]</div><div class="line">then</div><div class="line">    echo &quot;the one of them is running&quot;</div><div class="line">else    </div><div class="line">    echo &quot;These Pids are not running&quot;</div><div class="line">fi</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">改成</div><div class="line"></div><div class="line">if （checkpid $pid1 $pis2 $pid3） ; then</div><div class="line">    echo &quot;the one of them is running&quot;</div><div class="line">else</div><div class="line">    echo &quot;These Pids are not running&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<h2 id="8-3-函数的调用"><a href="#8-3-函数的调用" class="headerlink" title="8.3 函数的调用"></a>8.3 函数的调用</h2><h3 id="8-3-1-在Shell命令行调用函数"><a href="#8-3-1-在Shell命令行调用函数" class="headerlink" title="8.3.1 在Shell命令行调用函数"></a>8.3.1 在Shell命令行调用函数</h3><ul>
<li>在命令行中，可以通过直接输入函数的名字，来调用或引用函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$   funciton_name</div></pre></td></tr></table></figure>
<ul>
<li>定义yDay()函数来显示昨天的日期</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ myscript]# yDay() &#123; date --date=&apos;1 day ago&apos;; &#125;</div></pre></td></tr></table></figure>
<ul>
<li>引用函数dDay()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ myscript]# yDay</div><div class="line">Wed Jul 13 15:09:44 CST 2016</div></pre></td></tr></table></figure>
<h3 id="8-3-2-在脚本中调用函数"><a href="#8-3-2-在脚本中调用函数" class="headerlink" title="8.3.2 在脚本中调用函数"></a>8.3.2 在脚本中调用函数</h3><ul>
<li>要在脚本中调用该函数<ul>
<li>首先要创建函数</li>
<li><strong>确保函数位于调用此函数的语句之前</strong></li>
</ul>
</li>
<li>示例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#!/bin/bash</div><div class="line"></div><div class="line"># 定义变量TEST</div><div class="line">TEST=&quot; /tmp/fileName&quot;</div><div class="line"></div><div class="line"># 调用delete_file; 失败</div><div class="line">delete_file</div><div class="line"></div><div class="line">#定义函数delete_file</div><div class="line">delete_file()&#123;</div><div class="line">echo &quot;Deleting file....&quot;</div><div class="line"></div><div class="line">out:</div><div class="line">[root@iZ251k7t70aZ myscript]# ./dfile.sh </div><div class="line">./dfile.sh: line 7: delete_file: command not found</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>出错的原因是因为脚本的执行顺序是从上而下运行</li>
<li>调用了未定义的方法</li>
<li>为了避免出现这样的问题，<strong>要在脚本的开头定义和编写函数</strong></li>
<li>改写一下上面的脚本</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#!/bin/bash</div><div class="line"></div><div class="line"># 定义函数delete_file</div><div class="line">function delete_file()&#123;</div><div class="line">echo    &quot;Delteting ....&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"># 定义变量TEST</div><div class="line">TEST=&quot; /tmp/fileName&quot;</div><div class="line"></div><div class="line"># 调用delete_file; </div><div class="line">delete_file</div></pre></td></tr></table></figure>
<h3 id="8-3-3-从函数文件中调用函数"><a href="#8-3-3-从函数文件中调用函数" class="headerlink" title="8.3.3 从函数文件中调用函数"></a>8.3.3 从函数文件中调用函数</h3><ul>
<li>你可以把所有的函数存储到一个文件中</li>
<li>你可以把所有订单而函数加载到当前脚本或者是命令行</li>
<li>加载函数文件中所有函数的语法如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$   . /path/to/your/functions.sh</div><div class="line"></div><div class="line">或者</div><div class="line"></div><div class="line">$   . functions.sh</div></pre></td></tr></table></figure>
<ul>
<li>示例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#!/bin/bash</div><div class="line">#====================</div><div class="line">#       FILE: functions.sh</div><div class="line">#       USAGE:./functions.sh</div><div class="line">#       DESCRIPTION:</div><div class="line">#====================</div><div class="line"></div><div class="line"># 定义变量</div><div class="line">declare -r TRUE=0</div><div class="line">declare -r FLASE=1</div><div class="line">declare -r PASSWD_FILE=/etc/passwd</div><div class="line"></div><div class="line">################################</div><div class="line">#用途： 将字符串转换成小写</div><div class="line">#参数：</div><div class="line">#       $1 -&gt; 要转换为小写的字符串</div><div class="line">################################</div><div class="line"></div><div class="line">function to_lower()&#123;</div><div class="line"></div><div class="line"># 定义本地变量str</div><div class="line">local str=&quot;$@&quot;</div><div class="line"></div><div class="line"># 定义本地变量output</div><div class="line">local output</div><div class="line"></div><div class="line"># 将变量str的值转换为小写后赋值给变量output</div><div class="line">output=$(tr &apos;[A_Z]&apos; &apos;[a-z]&apos;&lt;&lt;&lt;&quot;&#123;str&#125;&quot;)</div><div class="line">echo $output</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>加载一个函数文件到脚本中</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[root@iZ251k7t70aZ myscript]# vi functiondemo.sh </div><div class="line"></div><div class="line">#!/bin/bash</div><div class="line">#============================</div><div class="line">#       FILE: functionDemo.sh</div><div class="line">#       AUTHOR: benny</div><div class="line">#       DESCRIPTION: 加载函数文件到脚本</div><div class="line">#       USAGE:  ./funcionDemo.sh</div><div class="line">#============================</div><div class="line"></div><div class="line"># 加载函数文件  functions.sh</div><div class="line"># 这里的路径需要根据你的手机环境做改动</div><div class="line">. /usr/local/myscript/functions.sh</div><div class="line"></div><div class="line"># 定义本地变量</div><div class="line"># var1 是没有被function.sh使用个</div><div class="line">var1=&quot;The manabharata is the longst and , arguably, one of the greatest epicpoems in any language&quot;</div><div class="line"></div><div class="line"># 调用函数is_root 执行成功或失败，会分别打印不同的信息</div><div class="line">is_root &amp;&amp; echo &quot;you are logged in as root&quot; || echo &quot;you are not logged in as root&quot;</div><div class="line"></div><div class="line"># 调用函数is_user_exists</div><div class="line">is_user_exists &quot;benny&quot; &amp;&amp; e &quot;Account found&quot; || echo &quot;Account not found&quot;</div><div class="line"></div><div class="line"># 打印变量的值</div><div class="line">echo -e &quot;*** orignal quote : \n$&#123;var1&#125;&quot;</div><div class="line"></div><div class="line"># 调用函数to_lower()</div><div class="line"># 将$var1 作为参数传递给to_lower()</div><div class="line"># 将echo内使用命令替换</div><div class="line">echo -e &quot;*** Lowercase version : \n$&#123;to_lower $(var1)&#125;&quot;</div></pre></td></tr></table></figure>
<h3 id="8-3-4-递归函数调用"><a href="#8-3-4-递归函数调用" class="headerlink" title="8.3.4 递归函数调用"></a>8.3.4 递归函数调用</h3><ul>
<li>递归函数是重复调用其自身的函数，并且没有递归调用次数的限制</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">factorial()&#123;</div><div class="line">    </div><div class="line">    # 定义本地变量</div><div class="line">    local i=$1</div><div class="line">    # 定义本地变量f</div><div class="line">    local f</div><div class="line">    # 声明变量i为整数</div><div class="line">    declare -i f</div><div class="line">    </div><div class="line">    # factorial被调用直到$f的值&lt;=2</div><div class="line">    # 开始递归</div><div class="line">    </div><div class="line">    [ $i -le 2 ] &amp;&amp; echo $i || &#123;f=$((i-1));f=$(factorial $f);f=$(( f * i ));echo $f; &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"># 显示函数的用户</div><div class="line">[ $# -eq 0 ] &amp;&amp; &#123; echo &quot;Usage : $0 number &quot;;exit 1; &#125;</div><div class="line"></div><div class="line"># 调用函数factorial</div><div class="line">factorial $1</div></pre></td></tr></table></figure>
<ul>
<li><strong>在Bash下，递归函数执行速度慢，应尽可能避免使用递归函数。</strong></li>
</ul>
<h3 id="将函数放在后台运行"><a href="#将函数放在后台运行" class="headerlink" title="将函数放在后台运行"></a>将函数放在后台运行</h3><ul>
<li><code>&amp;</code><strong>操作符可以将命令放在后台运行并释放你的终端，同样也可以将函数放在后台运行</strong></li>
<li>语法规则</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 定义函数name</div><div class="line">name()&#123;</div><div class="line">    echo &quot;Do something&quot;</div><div class="line">    sleep 1</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 将函数放在后台运行</div><div class="line"></div><div class="line">    name &amp;</div><div class="line"></div><div class="line"># 继续执行其他命令</div><div class="line">    commmands...</div></pre></td></tr></table></figure>
<ul>
<li>示例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line"># prigress.sh 当进行备份时显示进度</div><div class="line"></div><div class="line"># 定义函数progress</div><div class="line">progress()&#123;</div><div class="line">    </div><div class="line">    echo -n &quot;$0: please wait ....&quot;</div><div class="line">    while true</div><div class="line">    do</div><div class="line">    echo -n &quot;.&quot;</div><div class="line">    # 休眠5秒</div><div class="line">    sleep 5</div><div class="line">    done</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"># 定义函数dobackup</div><div class="line">dobackup()&#123;</div><div class="line">    # 运行备份命令</div><div class="line">    tar zcvf /dev/st0 /home &gt;/dev/null 2&gt;&amp;1</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"># 将函数放在后台运行</div><div class="line">progress &amp;</div><div class="line"></div><div class="line"># 保存函数 progress() 运行的进程号</div><div class="line"># 需要使用PID来结束此函数</div><div class="line">MYSELF=$!</div><div class="line"></div><div class="line">echo &quot;$MYSELF&quot;</div><div class="line"></div><div class="line"># 开始备份</div><div class="line"># 转移控制到函数dobackup</div><div class="line">dobackup</div><div class="line"></div><div class="line"># 杀死进程</div><div class="line">kill $MYSELF &gt;/dev/null 2&gt;&amp;1</div><div class="line">echo -n &quot;...done&quot;</div><div class="line">echo</div></pre></td></tr></table></figure>
<ul>
<li>shell中可能经常能看到：<code>&gt;/dev/null 2&gt;&amp;1</code><ul>
<li>命令的结果可以通过<code>%&gt;</code>的形式来定义输出</li>
<li><code>/dev/null</code> 代表空设备文件</li>
<li><code>&gt;</code> 代表重定向到哪里，例如：<code>echo &quot;123&quot; &gt; /home/123.txt</code></li>
<li><code>1</code> 表示<code>stdout</code>标准输出，系统默认值是<code>1</code>，所以<code>&gt;/dev/null</code>等同于<code>1&gt;/dev/null</code></li>
<li><code>1</code> 表示<code>stderr</code>标准错误</li>
<li><code>&amp;</code> 表示等同于的意思，<code>2&gt;&amp;1</code>，表示<code>2</code>的输出重定向等同于<code>1</code></li>
<li><code>1&gt;/dev/null</code> 首先表示标准输出重定向到空设备文件，也就是不输出任何信息到终端，说白了就是不显示任何信息。</li>
<li><code>2&gt;&amp;1</code> 接着，标准错误输出重定向等同于标准输出，因为之前标准输出已经重定向到了空设备文件，所以标准错误输出也重定向到空设备文件。</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[代码整洁之道]]></title>
      <url>/2016/07/02/160706_clean_code/</url>
      <content type="html"><![CDATA[<h2 id="本书结构"><a href="#本书结构" class="headerlink" title="本书结构"></a>本书结构</h2><p><img src="http://ww3.sinaimg.cn/large/610dc034jw1f5byokn81tj20dw0hiwfe.jpg" alt="就问你美不美"></p>
<a id="more"></a>
<hr>
<p><img src="http://7xjlkb.com1.z0.glb.clouddn.com/cleancode.png" alt="代码整洁之道"></p>
<hr>
<h2 id="有意义的命名"><a href="#有意义的命名" class="headerlink" title="有意义的命名"></a>有意义的命名</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><h3 id="2-2-名副其实"><a href="#2-2-名副其实" class="headerlink" title="2.2 名副其实"></a>2.2 名副其实</h3><ul>
<li>变量和函数或类的名称应该已经答复了大问题，他该告诉你，他为什么会存在，他做什么事，应该怎么用。</li>
<li>如果<code>名称</code>需要注释来补充，那就不算是名副其实。<blockquote>
<p>以下的代码不能让人一目了然</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;<span class="keyword">int</span>[]&gt; flaggedCells = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">int</span>[]&gt;();   (<span class="number">1</span>)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] cell : gameBoard)&#123;</div><div class="line">    <span class="keyword">if</span>(cell[STATUS_VALUE] == FLAGGED)&#123;...&#125;           (<span class="number">2</span>)  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<blockquote>
<p>可以更进一步，修改成：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;Cell&gt; flaggedCells = <span class="keyword">new</span> ArrayList&lt;Cell&gt;();</div><div class="line"><span class="keyword">for</span>(Cell cell : gameBoard )&#123;</div><div class="line">    <span class="keyword">if</span>(cell.isFlagged())&#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p>主要有两点：</p>
<ul>
<li>(1)、将int[]的List换成Cell的List</li>
<li>(2)、将状态判断提取成一个函数<code>isFlagged</code></li>
</ul>
</blockquote>
<h3 id="2-3-避免误导"><a href="#2-3-避免误导" class="headerlink" title="2.3 避免误导"></a>2.3 避免误导</h3><ul>
<li>程序员必须避免留下掩藏代码本意的错误线索，应当避免使用与本意相悖的词。</li>
<li>不要使用<code>hp</code>、<code>aix</code>、<code>sco</code>作为变量名，因为他们都是UNIX平台或类UNIX平台的专有名词。</li>
<li>不要使用account<code>List</code> 来指称一组账号，除非他真的是List类型。</li>
<li>不要使用不同之处较小的名称。例如：<code>XYZControllerForEfficientHandingOfStrings</code>和<code>XYZControllerForEfficientStorageOfStrings</code><blockquote>
<p>误导性名称是最可怕的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (O == <span class="number">1</span>) &#123; </div><div class="line">    a == <span class="number">0l</span>;    </div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    l = <span class="number">01</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h3 id="2-4-做有意义的区分"><a href="#2-4-做有意义的区分" class="headerlink" title="2.4 做有意义的区分"></a>2.4 做有意义的区分</h3><ul>
<li>以数字系列命名(a1、a2、…aN)是依意命名的对立面。这样的名称纯属误导————完全没有提供正确的信息；没有提供导向作者意图的线索。<blockquote>
<p>例如一下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyChars</span><span class="params">(<span class="keyword">char</span> a1[], <span class="keyword">char</span> a2[])</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; a1.length; i++)&#123;</div><div class="line">        a2[i] == a1[i];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<blockquote>
<p><strong>如果将参数名改为<code>source</code>和<code>destination</code>，这个函数就会好很多。</strong></p>
</blockquote>
<ul>
<li>废话是另一种没意义的区分。假如你有一个<code>Product</code>类。如果还有一个<code>ProductInfo</code>类和<code>ProductData</code>类，<br>虽然他们名称不同，但意思却无区别。info和Data就像a、an、the一样是意义含混的废话。</li>
<li>废话都是冗余。<code>Variable</code>一词永远都不要出现在变量名中。<code>Table</code>一词永远不要出现在表明中。<br>nameString会比name好么？难道Name会是浮点数么？<blockquote>
<p>看下面这种情况：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getActiveAccount();</div><div class="line">getActiveAccounts();</div><div class="line">getActiveAccountInfo();</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<blockquote>
<p>　程序员怎么能知道调用哪个呢？如果缺少明确约定，变量 <code>moneyAmount</code> 与 <code>money</code> 没有区别，<br> <code>customerInfo</code> 与 <code>customer</code> 没有区别，<code>accountData</code>与<code>account</code>没有区别，<br> 要区分名称就要以读者能鉴别不同之处的方式来区分。</p>
</blockquote>
<h3 id="2-5-使用读的出来的名称"><a href="#2-5-使用读的出来的名称" class="headerlink" title="2.5 使用读的出来的名称"></a>2.5 使用读的出来的名称</h3><ul>
<li>总结下来就是一句，不要自造词，引号使用恰当的英语单词。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DtaRcrd102P</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> Date genymdhms;</div><div class="line">    <span class="keyword">private</span> Date modymdhms;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String pszqint = <span class="string">"102"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在看看下面的代码：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> Date generationTimstamp;</div><div class="line">    <span class="keyword">private</span> Date modificationTimestamp;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String recordId = <span class="string">"102"</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这样应该不会发生，生成时间戳被设置成明天了，应该不会了吧。</p>
</blockquote>
<h3 id="2-6-使用可搜索的名称"><a href="#2-6-使用可搜索的名称" class="headerlink" title="2.6 使用可搜索的名称"></a>2.6 使用可搜索的名称</h3><ul>
<li>不要使用单字母如<code>e</code>或者单数字如<code>3</code>来作为变量名，它是英文中最常用的字母，在每个程序、每段代码中都有可能出现。</li>
<li><strong>名称长短与其作用域大小相对应</strong>，比如你就3行代码，你就没必要起很长的变量名，你都可以搜索的到。</li>
</ul>
<h3 id="2-7-避免使用编码"><a href="#2-7-避免使用编码" class="headerlink" title="2.7 避免使用编码"></a>2.7 避免使用编码</h3><h4 id="2-7-1-匈牙利语标记法"><a href="#2-7-1-匈牙利语标记法" class="headerlink" title="2.7.1 匈牙利语标记法"></a>2.7.1 匈牙利语标记法</h4><ul>
<li><code>Fortran</code>语言要求首字符体现出类型。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  类型变化时，名称并不变化。</span></div><div class="line">PhoneNumber phoneString;</div></pre></td></tr></table></figure>
<h4 id="2-7-2-成员前缀"><a href="#2-7-2-成员前缀" class="headerlink" title="2.7.2 成员前缀"></a>2.7.2 成员前缀</h4><ul>
<li>不必使用m_前缀来标明成员变量。</li>
</ul>
<hr>
<pre><code>private String m_dsc;
</code></pre><blockquote>
<p>远不如使用：</p>
</blockquote>
<pre><code>private String description;
</code></pre><blockquote>
<p>人们很快会无视前缀(或后缀)，只看到名称中有意义的部分。代码读的越多严重就越没有前缀。</p>
</blockquote>
<h4 id="2-7-3-接口和实现"><a href="#2-7-3-接口和实现" class="headerlink" title="2.7.3 接口和实现"></a>2.7.3 接口和实现</h4><ul>
<li>一个创建形状的抽象工厂，该工厂是个接口，要用具体类来实现。你如何来命名。</li>
<li><code>IShapeFactory</code> 或者是 <code>ShapeFactory</code></li>
<li>我喜欢不加修饰的接口，不喜欢 <del>IShapeFactory</del>，前导字母I被滥用到了说好听点是干扰，说难听点根本就是废话的程度。</li>
</ul>
<h3 id="2-8避免思维映射"><a href="#2-8避免思维映射" class="headerlink" title="2.8避免思维映射"></a>2.8避免思维映射</h3><ul>
<li>一个专业的程序员知道，明确才是王道，专业程序员能善用其能，编写其他人能理解的代码。</li>
</ul>
<h3 id="2-9类名"><a href="#2-9类名" class="headerlink" title="2.9类名"></a>2.9类名</h3><ul>
<li>类名和对象名应该是名词或名词短语，如 <code>Customer</code>、<code>WikiPage</code>、 <code>Account</code>、 <code>AddressParser</code> 。避免使用 <del>Manager</del>、<del>Processor</del> 、<del>Data</del> 和 <del>Info</del> 这样的类名。</li>
<li><strong><em>类名不应该是动词</em></strong>。</li>
</ul>
<h3 id="2-10-方法名"><a href="#2-10-方法名" class="headerlink" title="2.10 方法名"></a>2.10 方法名</h3><ul>
<li>方法名应该是动词或动词短语，如 <code>postPayment</code>、<code>deletePage</code>、<code>save</code> 。属性访问器、修改器和断言应该根据其值命名，并根据<em><em>Javabean</em></em>标准加上 <code>get</code> <code>set</code> 和 <code>is</code> 前缀。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String name = employee.getName();</div><div class="line">customer.setName(&quot;Benny&quot;);</div><div class="line">if ( payCheck.isPosted() )&#123; ... &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<blockquote>
<p><strong>重载构造器</strong>，使用描述了参数的静态工厂方法命名，例如：</p>
</blockquote>
<hr>
<pre><code>Complex fulcrumPoint = Complex.FromReadNumber(23.0);
</code></pre><hr>
<blockquote>
<p>通常好于：</p>
</blockquote>
<hr>
<pre><code>Complex fulcrumpoint = new Complex(23.0);
</code></pre><h3 id="2-11-别扮可爱"><a href="#2-11-别扮可爱" class="headerlink" title="2.11 别扮可爱"></a>2.11 别扮可爱</h3><ul>
<li>不要用俗话或俚语。例如，不要使用<code>whack</code>()来表示<code>kill</code>()。别用<code>eatMyshorts</code>()这类与文化紧密相关的词语表示<code>abort</code>()。</li>
</ul>
<h3 id="2-12-每个概念对应一个词"><a href="#2-12-每个概念对应一个词" class="headerlink" title="2.12 每个概念对应一个词"></a>2.12 每个概念对应一个词</h3><ul>
<li>简单点说不要里面即出现<code>DriverManager</code>又出现<code>Protocol-Controller</code>，<br>为什么不全用<code>Controler</code>或者<code>Manager</code>，这种名称会让人觉得这两个对象是不同类型的，也分属不同的类。</li>
</ul>
<h3 id="2-13-别用双关语"><a href="#2-13-别用双关语" class="headerlink" title="2.13 别用双关语"></a>2.13 别用双关语</h3><ul>
<li>在多个类中都有<code>add</code>方法，该方法通过增加或连接两个现存值来获得新值。</li>
<li>假如要写个新类，该类中只有一个方法，将单个参数放到<code>Collection</code>中去，此时如果叫做<code>add</code>的话，<br>这样做貌似和其他<code>add</code>方法保持了一致， 但实际上语义不同，应该用<code>insert</code>或者<code>append</code>之类的词来命名才对，<br>将该方法命名为<code>add</code>，就是双关语了。</li>
</ul>
<h3 id="2-13-使用解决方案领域名称"><a href="#2-13-使用解决方案领域名称" class="headerlink" title="2.13 使用解决方案领域名称"></a>2.13 使用解决方案领域名称</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery plugin 插件编写时遇到的问题总结]]></title>
      <url>/2016/06/30/160630_jqueryplugin/</url>
      <content type="html"><![CDATA[<h2 id="1、模板方法替换时，正则使用问题。"><a href="#1、模板方法替换时，正则使用问题。" class="headerlink" title="1、模板方法替换时，正则使用问题。"></a>1、模板方法替换时，正则使用问题。</h2><p><img src="http://ww1.sinaimg.cn/mw690/692a6bbcgw1f4fz7s830fj20gg0o00y5.jpg" alt="就问你美不美"></p>
<a id="more"></a>
<ul>
<li><p>主要问题就是在js里面，要双斜杠转义</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var regex = new RegExp(&quot;(\\&#123;\\&#123;&quot;+i+&quot;\&#125;\&#125;)&quot;,&quot;g&quot;);</div></pre></td></tr></table></figure>
</li>
<li><p>贴一下所有的代码</p>
</li>
</ul>
<hr>
<blockquote>
<p><code>template模板</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var template =</div><div class="line">    &quot; &lt;div class=&apos;tag&apos;&gt;&lt;font&gt;*&lt;/font&gt;&lt;span&gt;&#123;&#123;0&#125;&#125;&lt;/span&gt;&lt;/div&gt; &quot; + /*证件照*/</div><div class="line">    &quot; &lt;img alt=&apos;&apos; src=&apos;$&#123;contextPath&#125;/js/AjaxFileUploader/loading.gif&apos; style=&apos;display: none;&apos; id=&apos;&#123;&#123;1&#125;&#125;&apos;&gt;&quot; +   //id=&apos;loadingimgA&apos;</div><div class="line">    &quot; &lt;input class=&apos;real_file&apos; type=&apos;file&apos; name=&apos;upload&apos; onchange=&apos;uploadPicture(&quot;+&apos;&#123;&#123;2&#125;&#125;&apos;+&quot;)&apos; accept=&apos;image/*&apos; capture=&apos;camera&apos; style=&apos;display: none&apos;  id=&apos;&#123;&#123;3&#125;&#125;&apos; /&gt; &quot; +</div><div class="line">    &quot; &lt;input class=&apos;real_button uploadImg required&apos; id=&apos;&#123;&#123;3&#125;&#125;&apos; type=&apos;button&apos; value=&apos;上传图片&apos; style=&apos;display:none&apos; action=&apos;&#123;&#123;8&#125;&#125;&apos;&gt;&quot; +</div><div class="line">    &quot; &lt;input type=&apos;hidden&apos; id=&apos;&#123;&#123;4&#125;&#125;&apos; name=&apos;&#123;&#123;5&#125;&#125;&apos; value=&apos;&apos; /&gt; &quot; +  //  id=&quot;imgShowHidden&quot; name=&quot;myAccountVo.credentialImgFrontPath&quot;</div><div class="line">    &quot; &lt;/div&gt;&quot; +</div><div class="line">    &quot; &lt;/div&gt;&quot;;</div></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>mobDefault集合map参数</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var mobDefault = &#123;</div><div class="line">           title : &quot;证件照&quot; , //&#123;&#123;0&#125;&#125;    </div><div class="line">           inp_file_id : img_id,  //&#123;&#123;1&#125;&#125; </div><div class="line">           img_container_id : img_id+&quot;Container&quot;, //&#123;&#123;2&#125;&#125;</div><div class="line">           img_sample_id : img_id+&quot;Show&quot; , //&#123;&#123;3&#125;&#125;</div><div class="line">           inp_file_id : img_id,  //&#123;&#123;4&#125;&#125;      </div><div class="line">           img_loading_id : img_id+&quot;Loading&quot;,  //&#123;&#123;5&#125;&#125;</div><div class="line">           &#125;;</div></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>模板替换方法</code> 定义在String的原型里面了，直接拓展String的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 模板替换方法</div><div class="line"> */</div><div class="line">String.prototype.template=String.prototype.template || function()&#123;</div><div class="line">    var args=arguments[0];</div><div class="line">    var i = 0;</div><div class="line">    for(var key in args)&#123;</div><div class="line">        var regex = new RegExp(&quot;(\\&#123;\\&#123;&quot;+i+&quot;\&#125;\&#125;)&quot;,&quot;g&quot;); </div><div class="line">        mobileTemplate = mobileTemplate.replace(regex, args[key]);</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">    return mobileTemplate;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[博客初搭建]]></title>
      <url>/2016/06/28/160628_first/</url>
      <content type="html"><![CDATA[<h2 id="博客说明"><a href="#博客说明" class="headerlink" title="博客说明"></a>博客说明</h2><ul>
<li>以后我的每一篇博文中，都会附带一个美女高清大图。</li>
<li>算是作为一个程序员的福利。</li>
</ul>
<p><img src="http://images.cnitblog.com/news/66372/201411/131709068356625.png" alt="image"><br><a id="more"></a></p>
]]></content>
    </entry>
    
  
  
</search>
